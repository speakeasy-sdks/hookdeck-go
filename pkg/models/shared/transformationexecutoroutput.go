// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"errors"
	"github.com/speakeasy-sdks/hookdeck-go/pkg/utils"
)

type TransformationExecutorOutputRequestBodyType string

const (
	TransformationExecutorOutputRequestBodyTypeStr      TransformationExecutorOutputRequestBodyType = "str"
	TransformationExecutorOutputRequestBodyTypeMapOfany TransformationExecutorOutputRequestBodyType = "mapOfany"
)

type TransformationExecutorOutputRequestBody struct {
	Str      *string
	MapOfany map[string]interface{}

	Type TransformationExecutorOutputRequestBodyType
}

func CreateTransformationExecutorOutputRequestBodyStr(str string) TransformationExecutorOutputRequestBody {
	typ := TransformationExecutorOutputRequestBodyTypeStr

	return TransformationExecutorOutputRequestBody{
		Str:  &str,
		Type: typ,
	}
}

func CreateTransformationExecutorOutputRequestBodyMapOfany(mapOfany map[string]interface{}) TransformationExecutorOutputRequestBody {
	typ := TransformationExecutorOutputRequestBodyTypeMapOfany

	return TransformationExecutorOutputRequestBody{
		MapOfany: mapOfany,
		Type:     typ,
	}
}

func (u *TransformationExecutorOutputRequestBody) UnmarshalJSON(data []byte) error {

	str := new(string)
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = str
		u.Type = TransformationExecutorOutputRequestBodyTypeStr
		return nil
	}

	mapOfany := map[string]interface{}{}
	if err := utils.UnmarshalJSON(data, &mapOfany, "", true, true); err == nil {
		u.MapOfany = mapOfany
		u.Type = TransformationExecutorOutputRequestBodyTypeMapOfany
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u TransformationExecutorOutputRequestBody) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.MapOfany != nil {
		return utils.MarshalJSON(u.MapOfany, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type TransformationExecutorOutputRequestHeadersType string

const (
	TransformationExecutorOutputRequestHeadersTypeStr      TransformationExecutorOutputRequestHeadersType = "str"
	TransformationExecutorOutputRequestHeadersTypeMapOfany TransformationExecutorOutputRequestHeadersType = "mapOfany"
)

type TransformationExecutorOutputRequestHeaders struct {
	Str      *string
	MapOfany map[string]interface{}

	Type TransformationExecutorOutputRequestHeadersType
}

func CreateTransformationExecutorOutputRequestHeadersStr(str string) TransformationExecutorOutputRequestHeaders {
	typ := TransformationExecutorOutputRequestHeadersTypeStr

	return TransformationExecutorOutputRequestHeaders{
		Str:  &str,
		Type: typ,
	}
}

func CreateTransformationExecutorOutputRequestHeadersMapOfany(mapOfany map[string]interface{}) TransformationExecutorOutputRequestHeaders {
	typ := TransformationExecutorOutputRequestHeadersTypeMapOfany

	return TransformationExecutorOutputRequestHeaders{
		MapOfany: mapOfany,
		Type:     typ,
	}
}

func (u *TransformationExecutorOutputRequestHeaders) UnmarshalJSON(data []byte) error {

	str := new(string)
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = str
		u.Type = TransformationExecutorOutputRequestHeadersTypeStr
		return nil
	}

	mapOfany := map[string]interface{}{}
	if err := utils.UnmarshalJSON(data, &mapOfany, "", true, true); err == nil {
		u.MapOfany = mapOfany
		u.Type = TransformationExecutorOutputRequestHeadersTypeMapOfany
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u TransformationExecutorOutputRequestHeaders) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.MapOfany != nil {
		return utils.MarshalJSON(u.MapOfany, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type TransformationExecutorOutputRequestParsedQueryType string

const (
	TransformationExecutorOutputRequestParsedQueryTypeStr      TransformationExecutorOutputRequestParsedQueryType = "str"
	TransformationExecutorOutputRequestParsedQueryTypeMapOfany TransformationExecutorOutputRequestParsedQueryType = "mapOfany"
)

type TransformationExecutorOutputRequestParsedQuery struct {
	Str      *string
	MapOfany map[string]interface{}

	Type TransformationExecutorOutputRequestParsedQueryType
}

func CreateTransformationExecutorOutputRequestParsedQueryStr(str string) TransformationExecutorOutputRequestParsedQuery {
	typ := TransformationExecutorOutputRequestParsedQueryTypeStr

	return TransformationExecutorOutputRequestParsedQuery{
		Str:  &str,
		Type: typ,
	}
}

func CreateTransformationExecutorOutputRequestParsedQueryMapOfany(mapOfany map[string]interface{}) TransformationExecutorOutputRequestParsedQuery {
	typ := TransformationExecutorOutputRequestParsedQueryTypeMapOfany

	return TransformationExecutorOutputRequestParsedQuery{
		MapOfany: mapOfany,
		Type:     typ,
	}
}

func (u *TransformationExecutorOutputRequestParsedQuery) UnmarshalJSON(data []byte) error {

	str := new(string)
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = str
		u.Type = TransformationExecutorOutputRequestParsedQueryTypeStr
		return nil
	}

	mapOfany := map[string]interface{}{}
	if err := utils.UnmarshalJSON(data, &mapOfany, "", true, true); err == nil {
		u.MapOfany = mapOfany
		u.Type = TransformationExecutorOutputRequestParsedQueryTypeMapOfany
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u TransformationExecutorOutputRequestParsedQuery) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.MapOfany != nil {
		return utils.MarshalJSON(u.MapOfany, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type TransformationExecutorOutputRequestQueryType string

const (
	TransformationExecutorOutputRequestQueryTypeMapOfany TransformationExecutorOutputRequestQueryType = "mapOfany"
	TransformationExecutorOutputRequestQueryTypeStr      TransformationExecutorOutputRequestQueryType = "str"
)

type TransformationExecutorOutputRequestQuery struct {
	MapOfany map[string]interface{}
	Str      *string

	Type TransformationExecutorOutputRequestQueryType
}

func CreateTransformationExecutorOutputRequestQueryMapOfany(mapOfany map[string]interface{}) TransformationExecutorOutputRequestQuery {
	typ := TransformationExecutorOutputRequestQueryTypeMapOfany

	return TransformationExecutorOutputRequestQuery{
		MapOfany: mapOfany,
		Type:     typ,
	}
}

func CreateTransformationExecutorOutputRequestQueryStr(str string) TransformationExecutorOutputRequestQuery {
	typ := TransformationExecutorOutputRequestQueryTypeStr

	return TransformationExecutorOutputRequestQuery{
		Str:  &str,
		Type: typ,
	}
}

func (u *TransformationExecutorOutputRequestQuery) UnmarshalJSON(data []byte) error {

	mapOfany := map[string]interface{}{}
	if err := utils.UnmarshalJSON(data, &mapOfany, "", true, true); err == nil {
		u.MapOfany = mapOfany
		u.Type = TransformationExecutorOutputRequestQueryTypeMapOfany
		return nil
	}

	str := new(string)
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = str
		u.Type = TransformationExecutorOutputRequestQueryTypeStr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u TransformationExecutorOutputRequestQuery) MarshalJSON() ([]byte, error) {
	if u.MapOfany != nil {
		return utils.MarshalJSON(u.MapOfany, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type TransformationExecutorOutputRequest struct {
	AdditionalProperties map[string]interface{}                          `additionalProperties:"true" json:"-"`
	Body                 *TransformationExecutorOutputRequestBody        `json:"body,omitempty"`
	Headers              *TransformationExecutorOutputRequestHeaders     `json:"headers,omitempty"`
	ParsedQuery          *TransformationExecutorOutputRequestParsedQuery `json:"parsed_query,omitempty"`
	Path                 string                                          `json:"path"`
	Query                *TransformationExecutorOutputRequestQuery       `json:"query,omitempty"`
}

func (t TransformationExecutorOutputRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TransformationExecutorOutputRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *TransformationExecutorOutputRequest) GetAdditionalProperties() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *TransformationExecutorOutputRequest) GetBody() *TransformationExecutorOutputRequestBody {
	if o == nil {
		return nil
	}
	return o.Body
}

func (o *TransformationExecutorOutputRequest) GetHeaders() *TransformationExecutorOutputRequestHeaders {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *TransformationExecutorOutputRequest) GetParsedQuery() *TransformationExecutorOutputRequestParsedQuery {
	if o == nil {
		return nil
	}
	return o.ParsedQuery
}

func (o *TransformationExecutorOutputRequest) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *TransformationExecutorOutputRequest) GetQuery() *TransformationExecutorOutputRequestQuery {
	if o == nil {
		return nil
	}
	return o.Query
}

type TransformationExecutorOutput struct {
	AdditionalProperties map[string]interface{} `additionalProperties:"true" json:"-"`
	Console              []ConsoleLine          `json:"console,omitempty"`
	ExecutionID          *string                `json:"execution_id,omitempty"`
	// The minimum log level to open the issue on
	LogLevel         TransformationExecutionLogLevel      `json:"log_level"`
	Request          *TransformationExecutorOutputRequest `json:"request,omitempty"`
	RequestID        *string                              `json:"request_id,omitempty"`
	TransformationID *string                              `json:"transformation_id,omitempty"`
}

func (t TransformationExecutorOutput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TransformationExecutorOutput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *TransformationExecutorOutput) GetAdditionalProperties() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *TransformationExecutorOutput) GetConsole() []ConsoleLine {
	if o == nil {
		return nil
	}
	return o.Console
}

func (o *TransformationExecutorOutput) GetExecutionID() *string {
	if o == nil {
		return nil
	}
	return o.ExecutionID
}

func (o *TransformationExecutorOutput) GetLogLevel() TransformationExecutionLogLevel {
	if o == nil {
		return TransformationExecutionLogLevel("")
	}
	return o.LogLevel
}

func (o *TransformationExecutorOutput) GetRequest() *TransformationExecutorOutputRequest {
	if o == nil {
		return nil
	}
	return o.Request
}

func (o *TransformationExecutorOutput) GetRequestID() *string {
	if o == nil {
		return nil
	}
	return o.RequestID
}

func (o *TransformationExecutorOutput) GetTransformationID() *string {
	if o == nil {
		return nil
	}
	return o.TransformationID
}
