// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"errors"
	"github.com/speakeasy-sdks/hookdeck-go/pkg/utils"
)

type IssueType string

const (
	IssueTypeDeliveryIssue       IssueType = "DeliveryIssue"
	IssueTypeTransformationIssue IssueType = "TransformationIssue"
)

type Issue struct {
	DeliveryIssue       *DeliveryIssue
	TransformationIssue *TransformationIssue

	Type IssueType
}

func CreateIssueDeliveryIssue(deliveryIssue DeliveryIssue) Issue {
	typ := IssueTypeDeliveryIssue

	return Issue{
		DeliveryIssue: &deliveryIssue,
		Type:          typ,
	}
}

func CreateIssueTransformationIssue(transformationIssue TransformationIssue) Issue {
	typ := IssueTypeTransformationIssue

	return Issue{
		TransformationIssue: &transformationIssue,
		Type:                typ,
	}
}

func (u *Issue) UnmarshalJSON(data []byte) error {

	deliveryIssue := DeliveryIssue{}
	if err := utils.UnmarshalJSON(data, &deliveryIssue, "", true, true); err == nil {
		u.DeliveryIssue = &deliveryIssue
		u.Type = IssueTypeDeliveryIssue
		return nil
	}

	transformationIssue := TransformationIssue{}
	if err := utils.UnmarshalJSON(data, &transformationIssue, "", true, true); err == nil {
		u.TransformationIssue = &transformationIssue
		u.Type = IssueTypeTransformationIssue
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u Issue) MarshalJSON() ([]byte, error) {
	if u.DeliveryIssue != nil {
		return utils.MarshalJSON(u.DeliveryIssue, "", true)
	}

	if u.TransformationIssue != nil {
		return utils.MarshalJSON(u.TransformationIssue, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}
