// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/hookdeck-go/pkg/utils"
)

// RetryRuleType - A retry rule must be of type `retry`
type RetryRuleType string

const (
	RetryRuleTypeRetry RetryRuleType = "retry"
)

func (e RetryRuleType) ToPointer() *RetryRuleType {
	return &e
}

func (e *RetryRuleType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "retry":
		*e = RetryRuleType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RetryRuleType: %v", v)
	}
}

type RetryRule struct {
	AdditionalProperties map[string]interface{} `additionalProperties:"true" json:"-"`
	// Maximum number of retries to attempt
	Count *int64 `json:"count,omitempty"`
	// Time in MS between each retry
	Interval *int64 `json:"interval,omitempty"`
	// Algorithm to use when calculating delay between retries
	Strategy RetryStrategy `json:"strategy"`
	// A retry rule must be of type `retry`
	Type RetryRuleType `json:"type"`
}

func (r RetryRule) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RetryRule) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *RetryRule) GetAdditionalProperties() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *RetryRule) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *RetryRule) GetInterval() *int64 {
	if o == nil {
		return nil
	}
	return o.Interval
}

func (o *RetryRule) GetStrategy() RetryStrategy {
	if o == nil {
		return RetryStrategy("")
	}
	return o.Strategy
}

func (o *RetryRule) GetType() RetryRuleType {
	if o == nil {
		return RetryRuleType("")
	}
	return o.Type
}
