// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"github.com/speakeasy-sdks/hookdeck-go/pkg/utils"
)

type RetryRule struct {
	// Maximum number of retries to attempt
	Count *int64 `json:"count,omitempty"`
	// Time in MS between each retry
	Interval *int64 `json:"interval,omitempty"`
	// Algorithm to use when calculating delay between retries
	Strategy RetryStrategy `json:"strategy"`
	// A retry rule must be of type `retry`
	type_ string `const:"retry" json:"type"`
}

func (r RetryRule) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RetryRule) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *RetryRule) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *RetryRule) GetInterval() *int64 {
	if o == nil {
		return nil
	}
	return o.Interval
}

func (o *RetryRule) GetStrategy() RetryStrategy {
	if o == nil {
		return RetryStrategy("")
	}
	return o.Strategy
}

func (o *RetryRule) GetType() string {
	return "retry"
}
