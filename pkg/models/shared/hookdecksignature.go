// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/hookdeck-go/pkg/utils"
)

// HookdeckSignatureType - Type of auth method
type HookdeckSignatureType string

const (
	HookdeckSignatureTypeHookdeckSignature HookdeckSignatureType = "HOOKDECK_SIGNATURE"
)

func (e HookdeckSignatureType) ToPointer() *HookdeckSignatureType {
	return &e
}

func (e *HookdeckSignatureType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "HOOKDECK_SIGNATURE":
		*e = HookdeckSignatureType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for HookdeckSignatureType: %v", v)
	}
}

// HookdeckSignature - Hookdeck Signature
type HookdeckSignature struct {
	AdditionalProperties map[string]interface{} `additionalProperties:"true" json:"-"`
	// Empty config for the destination's auth method
	Config map[string]interface{} `json:"config,omitempty"`
	// Type of auth method
	Type HookdeckSignatureType `json:"type"`
}

func (h HookdeckSignature) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(h, "", false)
}

func (h *HookdeckSignature) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &h, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *HookdeckSignature) GetAdditionalProperties() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *HookdeckSignature) GetConfig() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *HookdeckSignature) GetType() HookdeckSignatureType {
	if o == nil {
		return HookdeckSignatureType("")
	}
	return o.Type
}
