// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"github.com/speakeasy-sdks/hookdeck-go/pkg/utils"
	"time"
)

// TransformationIssue - Transformation issue
type TransformationIssue struct {
	// Keys used as the aggregation keys a 'transformation' type issue
	AggregationKeys TransformationIssueAggregationKeys `json:"aggregation_keys"`
	AutoResolvedAt  *time.Time                         `json:"auto_resolved_at,omitempty"`
	// ISO timestamp for when the issue was created
	CreatedAt string `json:"created_at"`
	// ISO timestamp for when the issue was dismissed
	DismissedAt *time.Time `json:"dismissed_at,omitempty"`
	// ISO timestamp for when the issue was first opened
	FirstSeenAt time.Time `json:"first_seen_at"`
	// Issue ID
	ID string `json:"id"`
	// ISO timestamp for when the issue last occured
	LastSeenAt time.Time `json:"last_seen_at"`
	// ID of the team member who last updated the issue status
	LastUpdatedBy *string `json:"last_updated_by,omitempty"`
	MergedWith    *string `json:"merged_with,omitempty"`
	// ISO timestamp for when the issue was last opened
	OpenedAt time.Time `json:"opened_at"`
	// Reference to the event request transformation an issue is being created for.
	Reference TransformationIssueReference `json:"reference"`
	// Issue status
	Status IssueStatus `json:"status"`
	// ID of the workspace
	TeamID string `json:"team_id"`
	type_  string `const:"transformation" json:"type"`
	// ISO timestamp for when the issue was last updated
	UpdatedAt string `json:"updated_at"`
}

func (t TransformationIssue) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TransformationIssue) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *TransformationIssue) GetAggregationKeys() TransformationIssueAggregationKeys {
	if o == nil {
		return TransformationIssueAggregationKeys{}
	}
	return o.AggregationKeys
}

func (o *TransformationIssue) GetAutoResolvedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.AutoResolvedAt
}

func (o *TransformationIssue) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *TransformationIssue) GetDismissedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.DismissedAt
}

func (o *TransformationIssue) GetFirstSeenAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.FirstSeenAt
}

func (o *TransformationIssue) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *TransformationIssue) GetLastSeenAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.LastSeenAt
}

func (o *TransformationIssue) GetLastUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.LastUpdatedBy
}

func (o *TransformationIssue) GetMergedWith() *string {
	if o == nil {
		return nil
	}
	return o.MergedWith
}

func (o *TransformationIssue) GetOpenedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.OpenedAt
}

func (o *TransformationIssue) GetReference() TransformationIssueReference {
	if o == nil {
		return TransformationIssueReference{}
	}
	return o.Reference
}

func (o *TransformationIssue) GetStatus() IssueStatus {
	if o == nil {
		return IssueStatus("")
	}
	return o.Status
}

func (o *TransformationIssue) GetTeamID() string {
	if o == nil {
		return ""
	}
	return o.TeamID
}

func (o *TransformationIssue) GetType() string {
	return "transformation"
}

func (o *TransformationIssue) GetUpdatedAt() string {
	if o == nil {
		return ""
	}
	return o.UpdatedAt
}
