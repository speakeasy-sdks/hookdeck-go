// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"github.com/speakeasy-sdks/hookdeck-go/pkg/utils"
)

type FilterRule struct {
	// JSON using our filter syntax to filter on request headers
	Body *ConnectionFilterProperty `json:"body,omitempty"`
	// JSON using our filter syntax to filter on request headers
	Headers *ConnectionFilterProperty `json:"headers,omitempty"`
	// JSON using our filter syntax to filter on request headers
	Path *ConnectionFilterProperty `json:"path,omitempty"`
	// JSON using our filter syntax to filter on request headers
	Query *ConnectionFilterProperty `json:"query,omitempty"`
	// A filter rule must be of type `filter`
	type_ string `const:"filter" json:"type"`
}

func (f FilterRule) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FilterRule) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *FilterRule) GetBody() *ConnectionFilterProperty {
	if o == nil {
		return nil
	}
	return o.Body
}

func (o *FilterRule) GetHeaders() *ConnectionFilterProperty {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *FilterRule) GetPath() *ConnectionFilterProperty {
	if o == nil {
		return nil
	}
	return o.Path
}

func (o *FilterRule) GetQuery() *ConnectionFilterProperty {
	if o == nil {
		return nil
	}
	return o.Query
}

func (o *FilterRule) GetType() string {
	return "filter"
}
