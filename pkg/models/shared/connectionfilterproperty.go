// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"errors"
	"github.com/speakeasy-sdks/hookdeck-go/pkg/utils"
)

type ConnectionFilterPropertyType string

const (
	ConnectionFilterPropertyTypeStr      ConnectionFilterPropertyType = "str"
	ConnectionFilterPropertyTypeFloat32  ConnectionFilterPropertyType = "float32"
	ConnectionFilterPropertyTypeBoolean  ConnectionFilterPropertyType = "boolean"
	ConnectionFilterPropertyTypeMapOfany ConnectionFilterPropertyType = "mapOfany"
)

type ConnectionFilterProperty struct {
	Str      *string
	Float32  *float32
	Boolean  *bool
	MapOfany map[string]interface{}

	Type ConnectionFilterPropertyType
}

func CreateConnectionFilterPropertyStr(str string) ConnectionFilterProperty {
	typ := ConnectionFilterPropertyTypeStr

	return ConnectionFilterProperty{
		Str:  &str,
		Type: typ,
	}
}

func CreateConnectionFilterPropertyFloat32(float32T float32) ConnectionFilterProperty {
	typ := ConnectionFilterPropertyTypeFloat32

	return ConnectionFilterProperty{
		Float32: &float32T,
		Type:    typ,
	}
}

func CreateConnectionFilterPropertyBoolean(boolean bool) ConnectionFilterProperty {
	typ := ConnectionFilterPropertyTypeBoolean

	return ConnectionFilterProperty{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateConnectionFilterPropertyMapOfany(mapOfany map[string]interface{}) ConnectionFilterProperty {
	typ := ConnectionFilterPropertyTypeMapOfany

	return ConnectionFilterProperty{
		MapOfany: mapOfany,
		Type:     typ,
	}
}

func (u *ConnectionFilterProperty) UnmarshalJSON(data []byte) error {

	str := new(string)
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = str
		u.Type = ConnectionFilterPropertyTypeStr
		return nil
	}

	float32Var := new(float32)
	if err := utils.UnmarshalJSON(data, &float32Var, "", true, true); err == nil {
		u.Float32 = float32Var
		u.Type = ConnectionFilterPropertyTypeFloat32
		return nil
	}

	boolean := new(bool)
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = boolean
		u.Type = ConnectionFilterPropertyTypeBoolean
		return nil
	}

	mapOfany := map[string]interface{}{}
	if err := utils.UnmarshalJSON(data, &mapOfany, "", true, true); err == nil {
		u.MapOfany = mapOfany
		u.Type = ConnectionFilterPropertyTypeMapOfany
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ConnectionFilterProperty) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Float32 != nil {
		return utils.MarshalJSON(u.Float32, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.MapOfany != nil {
		return utils.MarshalJSON(u.MapOfany, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}
