// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/hookdeck-go/pkg/models/shared"
	"github.com/speakeasy-sdks/hookdeck-go/pkg/utils"
	"net/http"
)

// TriggerBookmarkRequestBodyTarget - Bookmark target
type TriggerBookmarkRequestBodyTarget string

const (
	TriggerBookmarkRequestBodyTargetHTTP TriggerBookmarkRequestBodyTarget = "http"
	TriggerBookmarkRequestBodyTargetCli  TriggerBookmarkRequestBodyTarget = "cli"
)

func (e TriggerBookmarkRequestBodyTarget) ToPointer() *TriggerBookmarkRequestBodyTarget {
	return &e
}

func (e *TriggerBookmarkRequestBodyTarget) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "http":
		fallthrough
	case "cli":
		*e = TriggerBookmarkRequestBodyTarget(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TriggerBookmarkRequestBodyTarget: %v", v)
	}
}

type TriggerBookmarkRequestBody struct {
	AdditionalProperties map[string]interface{} `additionalProperties:"true" json:"-"`
	// Bookmark target
	Target *TriggerBookmarkRequestBodyTarget `json:"target,omitempty"`
}

func (t TriggerBookmarkRequestBody) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TriggerBookmarkRequestBody) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *TriggerBookmarkRequestBody) GetAdditionalProperties() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *TriggerBookmarkRequestBody) GetTarget() *TriggerBookmarkRequestBodyTarget {
	if o == nil {
		return nil
	}
	return o.Target
}

type TriggerBookmarkRequest struct {
	RequestBody TriggerBookmarkRequestBody `request:"mediaType=application/json"`
	ID          string                     `pathParam:"style=simple,explode=false,name=id"`
}

func (o *TriggerBookmarkRequest) GetRequestBody() TriggerBookmarkRequestBody {
	if o == nil {
		return TriggerBookmarkRequestBody{}
	}
	return o.RequestBody
}

func (o *TriggerBookmarkRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type TriggerBookmarkResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// Array of created events
	EventArray []shared.Event
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *TriggerBookmarkResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *TriggerBookmarkResponse) GetEventArray() []shared.Event {
	if o == nil {
		return nil
	}
	return o.EventArray
}

func (o *TriggerBookmarkResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *TriggerBookmarkResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
