// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"github.com/speakeasy-sdks/hookdeck-go/pkg/models/shared"
	"net/http"
	"time"
)

type UpdateIssueTriggerRequestBody struct {
	// Notification channels object for the specific channel type
	Channels *shared.IssueTriggerChannels `json:"channels,omitempty"`
	// Configuration object for the specific issue type selected
	Configs interface{} `json:"configs,omitempty"`
	// Date when the issue trigger was disabled
	DisabledAt *time.Time `json:"disabled_at,omitempty"`
	// Optional unique name to use as reference when using the API
	Name *string `json:"name,omitempty"`
}

func (o *UpdateIssueTriggerRequestBody) GetChannels() *shared.IssueTriggerChannels {
	if o == nil {
		return nil
	}
	return o.Channels
}

func (o *UpdateIssueTriggerRequestBody) GetConfigs() interface{} {
	if o == nil {
		return nil
	}
	return o.Configs
}

func (o *UpdateIssueTriggerRequestBody) GetDisabledAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *UpdateIssueTriggerRequestBody) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

type UpdateIssueTriggerRequest struct {
	RequestBody UpdateIssueTriggerRequestBody `request:"mediaType=application/json"`
	ID          string                        `pathParam:"style=simple,explode=false,name=id"`
}

func (o *UpdateIssueTriggerRequest) GetRequestBody() UpdateIssueTriggerRequestBody {
	if o == nil {
		return UpdateIssueTriggerRequestBody{}
	}
	return o.RequestBody
}

func (o *UpdateIssueTriggerRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type UpdateIssueTriggerResponse struct {
	ContentType string
	// A single issue trigger
	IssueTrigger *shared.IssueTrigger
	StatusCode   int
	RawResponse  *http.Response
}

func (o *UpdateIssueTriggerResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *UpdateIssueTriggerResponse) GetIssueTrigger() *shared.IssueTrigger {
	if o == nil {
		return nil
	}
	return o.IssueTrigger
}

func (o *UpdateIssueTriggerResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *UpdateIssueTriggerResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
