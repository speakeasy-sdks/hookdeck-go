// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"errors"
	"github.com/speakeasy-sdks/hookdeck-go/pkg/models/shared"
	"github.com/speakeasy-sdks/hookdeck-go/pkg/utils"
	"net/http"
)

// UpdateIntegrationRequestBodyConfigs1 - Decrypted Key/Value object of the associated configuration for that provider
type UpdateIntegrationRequestBodyConfigs1 struct {
}

type UpdateIntegrationRequestBodyConfigsType string

const (
	UpdateIntegrationRequestBodyConfigsTypeUpdateIntegrationRequestBodyConfigs1 UpdateIntegrationRequestBodyConfigsType = "updateIntegration_requestBody_configs_1"
	UpdateIntegrationRequestBodyConfigsTypeHMACIntegrationConfigs               UpdateIntegrationRequestBodyConfigsType = "HMACIntegrationConfigs"
	UpdateIntegrationRequestBodyConfigsTypeAPIKeyIntegrationConfigs             UpdateIntegrationRequestBodyConfigsType = "APIKeyIntegrationConfigs"
	UpdateIntegrationRequestBodyConfigsTypeHandledHMACConfigs                   UpdateIntegrationRequestBodyConfigsType = "HandledHMACConfigs"
	UpdateIntegrationRequestBodyConfigsTypeBasicAuthIntegrationConfigs          UpdateIntegrationRequestBodyConfigsType = "BasicAuthIntegrationConfigs"
	UpdateIntegrationRequestBodyConfigsTypeShopifyIntegrationConfigs            UpdateIntegrationRequestBodyConfigsType = "ShopifyIntegrationConfigs"
)

type UpdateIntegrationRequestBodyConfigs struct {
	UpdateIntegrationRequestBodyConfigs1 *UpdateIntegrationRequestBodyConfigs1
	HMACIntegrationConfigs               *shared.HMACIntegrationConfigs
	APIKeyIntegrationConfigs             *shared.APIKeyIntegrationConfigs
	HandledHMACConfigs                   *shared.HandledHMACConfigs
	BasicAuthIntegrationConfigs          *shared.BasicAuthIntegrationConfigs
	ShopifyIntegrationConfigs            *shared.ShopifyIntegrationConfigs

	Type UpdateIntegrationRequestBodyConfigsType
}

func CreateUpdateIntegrationRequestBodyConfigsUpdateIntegrationRequestBodyConfigs1(updateIntegrationRequestBodyConfigs1 UpdateIntegrationRequestBodyConfigs1) UpdateIntegrationRequestBodyConfigs {
	typ := UpdateIntegrationRequestBodyConfigsTypeUpdateIntegrationRequestBodyConfigs1

	return UpdateIntegrationRequestBodyConfigs{
		UpdateIntegrationRequestBodyConfigs1: &updateIntegrationRequestBodyConfigs1,
		Type:                                 typ,
	}
}

func CreateUpdateIntegrationRequestBodyConfigsHMACIntegrationConfigs(hmacIntegrationConfigs shared.HMACIntegrationConfigs) UpdateIntegrationRequestBodyConfigs {
	typ := UpdateIntegrationRequestBodyConfigsTypeHMACIntegrationConfigs

	return UpdateIntegrationRequestBodyConfigs{
		HMACIntegrationConfigs: &hmacIntegrationConfigs,
		Type:                   typ,
	}
}

func CreateUpdateIntegrationRequestBodyConfigsAPIKeyIntegrationConfigs(apiKeyIntegrationConfigs shared.APIKeyIntegrationConfigs) UpdateIntegrationRequestBodyConfigs {
	typ := UpdateIntegrationRequestBodyConfigsTypeAPIKeyIntegrationConfigs

	return UpdateIntegrationRequestBodyConfigs{
		APIKeyIntegrationConfigs: &apiKeyIntegrationConfigs,
		Type:                     typ,
	}
}

func CreateUpdateIntegrationRequestBodyConfigsHandledHMACConfigs(handledHMACConfigs shared.HandledHMACConfigs) UpdateIntegrationRequestBodyConfigs {
	typ := UpdateIntegrationRequestBodyConfigsTypeHandledHMACConfigs

	return UpdateIntegrationRequestBodyConfigs{
		HandledHMACConfigs: &handledHMACConfigs,
		Type:               typ,
	}
}

func CreateUpdateIntegrationRequestBodyConfigsBasicAuthIntegrationConfigs(basicAuthIntegrationConfigs shared.BasicAuthIntegrationConfigs) UpdateIntegrationRequestBodyConfigs {
	typ := UpdateIntegrationRequestBodyConfigsTypeBasicAuthIntegrationConfigs

	return UpdateIntegrationRequestBodyConfigs{
		BasicAuthIntegrationConfigs: &basicAuthIntegrationConfigs,
		Type:                        typ,
	}
}

func CreateUpdateIntegrationRequestBodyConfigsShopifyIntegrationConfigs(shopifyIntegrationConfigs shared.ShopifyIntegrationConfigs) UpdateIntegrationRequestBodyConfigs {
	typ := UpdateIntegrationRequestBodyConfigsTypeShopifyIntegrationConfigs

	return UpdateIntegrationRequestBodyConfigs{
		ShopifyIntegrationConfigs: &shopifyIntegrationConfigs,
		Type:                      typ,
	}
}

func (u *UpdateIntegrationRequestBodyConfigs) UnmarshalJSON(data []byte) error {

	updateIntegrationRequestBodyConfigs1 := new(UpdateIntegrationRequestBodyConfigs1)
	if err := utils.UnmarshalJSON(data, &updateIntegrationRequestBodyConfigs1, "", true, true); err == nil {
		u.UpdateIntegrationRequestBodyConfigs1 = updateIntegrationRequestBodyConfigs1
		u.Type = UpdateIntegrationRequestBodyConfigsTypeUpdateIntegrationRequestBodyConfigs1
		return nil
	}

	handledHMACConfigs := new(shared.HandledHMACConfigs)
	if err := utils.UnmarshalJSON(data, &handledHMACConfigs, "", true, true); err == nil {
		u.HandledHMACConfigs = handledHMACConfigs
		u.Type = UpdateIntegrationRequestBodyConfigsTypeHandledHMACConfigs
		return nil
	}

	apiKeyIntegrationConfigs := new(shared.APIKeyIntegrationConfigs)
	if err := utils.UnmarshalJSON(data, &apiKeyIntegrationConfigs, "", true, true); err == nil {
		u.APIKeyIntegrationConfigs = apiKeyIntegrationConfigs
		u.Type = UpdateIntegrationRequestBodyConfigsTypeAPIKeyIntegrationConfigs
		return nil
	}

	basicAuthIntegrationConfigs := new(shared.BasicAuthIntegrationConfigs)
	if err := utils.UnmarshalJSON(data, &basicAuthIntegrationConfigs, "", true, true); err == nil {
		u.BasicAuthIntegrationConfigs = basicAuthIntegrationConfigs
		u.Type = UpdateIntegrationRequestBodyConfigsTypeBasicAuthIntegrationConfigs
		return nil
	}

	hmacIntegrationConfigs := new(shared.HMACIntegrationConfigs)
	if err := utils.UnmarshalJSON(data, &hmacIntegrationConfigs, "", true, true); err == nil {
		u.HMACIntegrationConfigs = hmacIntegrationConfigs
		u.Type = UpdateIntegrationRequestBodyConfigsTypeHMACIntegrationConfigs
		return nil
	}

	shopifyIntegrationConfigs := new(shared.ShopifyIntegrationConfigs)
	if err := utils.UnmarshalJSON(data, &shopifyIntegrationConfigs, "", true, true); err == nil {
		u.ShopifyIntegrationConfigs = shopifyIntegrationConfigs
		u.Type = UpdateIntegrationRequestBodyConfigsTypeShopifyIntegrationConfigs
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u UpdateIntegrationRequestBodyConfigs) MarshalJSON() ([]byte, error) {
	if u.UpdateIntegrationRequestBodyConfigs1 != nil {
		return utils.MarshalJSON(u.UpdateIntegrationRequestBodyConfigs1, "", true)
	}

	if u.HMACIntegrationConfigs != nil {
		return utils.MarshalJSON(u.HMACIntegrationConfigs, "", true)
	}

	if u.APIKeyIntegrationConfigs != nil {
		return utils.MarshalJSON(u.APIKeyIntegrationConfigs, "", true)
	}

	if u.HandledHMACConfigs != nil {
		return utils.MarshalJSON(u.HandledHMACConfigs, "", true)
	}

	if u.BasicAuthIntegrationConfigs != nil {
		return utils.MarshalJSON(u.BasicAuthIntegrationConfigs, "", true)
	}

	if u.ShopifyIntegrationConfigs != nil {
		return utils.MarshalJSON(u.ShopifyIntegrationConfigs, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type UpdateIntegrationRequestBody struct {
	// Decrypted Key/Value object of the associated configuration for that provider
	Configs *UpdateIntegrationRequestBodyConfigs `json:"configs,omitempty"`
	// List of features to enable (see features list above)
	Features []shared.IntegrationFeature `json:"features,omitempty"`
	// Label of the integration
	Label *string `json:"label,omitempty"`
	// The provider name
	Provider *shared.IntegrationProvider `json:"provider,omitempty"`
}

func (o *UpdateIntegrationRequestBody) GetConfigs() *UpdateIntegrationRequestBodyConfigs {
	if o == nil {
		return nil
	}
	return o.Configs
}

func (o *UpdateIntegrationRequestBody) GetFeatures() []shared.IntegrationFeature {
	if o == nil {
		return nil
	}
	return o.Features
}

func (o *UpdateIntegrationRequestBody) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *UpdateIntegrationRequestBody) GetProvider() *shared.IntegrationProvider {
	if o == nil {
		return nil
	}
	return o.Provider
}

type UpdateIntegrationRequest struct {
	RequestBody UpdateIntegrationRequestBody `request:"mediaType=application/json"`
	ID          string                       `pathParam:"style=simple,explode=false,name=id"`
}

func (o *UpdateIntegrationRequest) GetRequestBody() UpdateIntegrationRequestBody {
	if o == nil {
		return UpdateIntegrationRequestBody{}
	}
	return o.RequestBody
}

func (o *UpdateIntegrationRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type UpdateIntegrationResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// A single integration
	Integration *shared.Integration
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *UpdateIntegrationResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *UpdateIntegrationResponse) GetIntegration() *shared.Integration {
	if o == nil {
		return nil
	}
	return o.Integration
}

func (o *UpdateIntegrationResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *UpdateIntegrationResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
