// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"errors"
	"github.com/speakeasy-sdks/hookdeck-go/internal/utils"
	"github.com/speakeasy-sdks/hookdeck-go/models/components"
	"net/http"
)

type One struct {
}

type ConfigsType string

const (
	ConfigsTypeOne                         ConfigsType = "1"
	ConfigsTypeHMACIntegrationConfigs      ConfigsType = "HMACIntegrationConfigs"
	ConfigsTypeAPIKeyIntegrationConfigs    ConfigsType = "APIKeyIntegrationConfigs"
	ConfigsTypeHandledHMACConfigs          ConfigsType = "HandledHMACConfigs"
	ConfigsTypeBasicAuthIntegrationConfigs ConfigsType = "BasicAuthIntegrationConfigs"
	ConfigsTypeShopifyIntegrationConfigs   ConfigsType = "ShopifyIntegrationConfigs"
)

// Configs - Decrypted Key/Value object of the associated configuration for that provider
type Configs struct {
	One                         *One
	HMACIntegrationConfigs      *components.HMACIntegrationConfigs
	APIKeyIntegrationConfigs    *components.APIKeyIntegrationConfigs
	HandledHMACConfigs          *components.HandledHMACConfigs
	BasicAuthIntegrationConfigs *components.BasicAuthIntegrationConfigs
	ShopifyIntegrationConfigs   *components.ShopifyIntegrationConfigs

	Type ConfigsType
}

func CreateConfigsOne(one One) Configs {
	typ := ConfigsTypeOne

	return Configs{
		One:  &one,
		Type: typ,
	}
}

func CreateConfigsHMACIntegrationConfigs(hmacIntegrationConfigs components.HMACIntegrationConfigs) Configs {
	typ := ConfigsTypeHMACIntegrationConfigs

	return Configs{
		HMACIntegrationConfigs: &hmacIntegrationConfigs,
		Type:                   typ,
	}
}

func CreateConfigsAPIKeyIntegrationConfigs(apiKeyIntegrationConfigs components.APIKeyIntegrationConfigs) Configs {
	typ := ConfigsTypeAPIKeyIntegrationConfigs

	return Configs{
		APIKeyIntegrationConfigs: &apiKeyIntegrationConfigs,
		Type:                     typ,
	}
}

func CreateConfigsHandledHMACConfigs(handledHMACConfigs components.HandledHMACConfigs) Configs {
	typ := ConfigsTypeHandledHMACConfigs

	return Configs{
		HandledHMACConfigs: &handledHMACConfigs,
		Type:               typ,
	}
}

func CreateConfigsBasicAuthIntegrationConfigs(basicAuthIntegrationConfigs components.BasicAuthIntegrationConfigs) Configs {
	typ := ConfigsTypeBasicAuthIntegrationConfigs

	return Configs{
		BasicAuthIntegrationConfigs: &basicAuthIntegrationConfigs,
		Type:                        typ,
	}
}

func CreateConfigsShopifyIntegrationConfigs(shopifyIntegrationConfigs components.ShopifyIntegrationConfigs) Configs {
	typ := ConfigsTypeShopifyIntegrationConfigs

	return Configs{
		ShopifyIntegrationConfigs: &shopifyIntegrationConfigs,
		Type:                      typ,
	}
}

func (u *Configs) UnmarshalJSON(data []byte) error {

	one := One{}
	if err := utils.UnmarshalJSON(data, &one, "", true, true); err == nil {
		u.One = &one
		u.Type = ConfigsTypeOne
		return nil
	}

	handledHMACConfigs := components.HandledHMACConfigs{}
	if err := utils.UnmarshalJSON(data, &handledHMACConfigs, "", true, true); err == nil {
		u.HandledHMACConfigs = &handledHMACConfigs
		u.Type = ConfigsTypeHandledHMACConfigs
		return nil
	}

	apiKeyIntegrationConfigs := components.APIKeyIntegrationConfigs{}
	if err := utils.UnmarshalJSON(data, &apiKeyIntegrationConfigs, "", true, true); err == nil {
		u.APIKeyIntegrationConfigs = &apiKeyIntegrationConfigs
		u.Type = ConfigsTypeAPIKeyIntegrationConfigs
		return nil
	}

	basicAuthIntegrationConfigs := components.BasicAuthIntegrationConfigs{}
	if err := utils.UnmarshalJSON(data, &basicAuthIntegrationConfigs, "", true, true); err == nil {
		u.BasicAuthIntegrationConfigs = &basicAuthIntegrationConfigs
		u.Type = ConfigsTypeBasicAuthIntegrationConfigs
		return nil
	}

	hmacIntegrationConfigs := components.HMACIntegrationConfigs{}
	if err := utils.UnmarshalJSON(data, &hmacIntegrationConfigs, "", true, true); err == nil {
		u.HMACIntegrationConfigs = &hmacIntegrationConfigs
		u.Type = ConfigsTypeHMACIntegrationConfigs
		return nil
	}

	shopifyIntegrationConfigs := components.ShopifyIntegrationConfigs{}
	if err := utils.UnmarshalJSON(data, &shopifyIntegrationConfigs, "", true, true); err == nil {
		u.ShopifyIntegrationConfigs = &shopifyIntegrationConfigs
		u.Type = ConfigsTypeShopifyIntegrationConfigs
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u Configs) MarshalJSON() ([]byte, error) {
	if u.One != nil {
		return utils.MarshalJSON(u.One, "", true)
	}

	if u.HMACIntegrationConfigs != nil {
		return utils.MarshalJSON(u.HMACIntegrationConfigs, "", true)
	}

	if u.APIKeyIntegrationConfigs != nil {
		return utils.MarshalJSON(u.APIKeyIntegrationConfigs, "", true)
	}

	if u.HandledHMACConfigs != nil {
		return utils.MarshalJSON(u.HandledHMACConfigs, "", true)
	}

	if u.BasicAuthIntegrationConfigs != nil {
		return utils.MarshalJSON(u.BasicAuthIntegrationConfigs, "", true)
	}

	if u.ShopifyIntegrationConfigs != nil {
		return utils.MarshalJSON(u.ShopifyIntegrationConfigs, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateIntegrationRequestBody struct {
	// Decrypted Key/Value object of the associated configuration for that provider
	Configs *Configs `json:"configs,omitempty"`
	// List of features to enable (see features list above)
	Features []components.IntegrationFeature `json:"features,omitempty"`
	// Label of the integration
	Label *string `json:"label,omitempty"`
	// The provider name
	Provider *components.IntegrationProvider `json:"provider,omitempty"`
}

func (o *CreateIntegrationRequestBody) GetConfigs() *Configs {
	if o == nil {
		return nil
	}
	return o.Configs
}

func (o *CreateIntegrationRequestBody) GetFeatures() []components.IntegrationFeature {
	if o == nil {
		return nil
	}
	return o.Features
}

func (o *CreateIntegrationRequestBody) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *CreateIntegrationRequestBody) GetProvider() *components.IntegrationProvider {
	if o == nil {
		return nil
	}
	return o.Provider
}

type CreateIntegrationResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// A single integration
	Integration *components.Integration
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *CreateIntegrationResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *CreateIntegrationResponse) GetIntegration() *components.Integration {
	if o == nil {
		return nil
	}
	return o.Integration
}

func (o *CreateIntegrationResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *CreateIntegrationResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
