// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/hookdeck-go/models/components"
	"net/http"
)

// UpdateIssueStatus - New status
type UpdateIssueStatus string

const (
	UpdateIssueStatusOpened       UpdateIssueStatus = "OPENED"
	UpdateIssueStatusIgnored      UpdateIssueStatus = "IGNORED"
	UpdateIssueStatusAcknowledged UpdateIssueStatus = "ACKNOWLEDGED"
	UpdateIssueStatusResolved     UpdateIssueStatus = "RESOLVED"
)

func (e UpdateIssueStatus) ToPointer() *UpdateIssueStatus {
	return &e
}

func (e *UpdateIssueStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OPENED":
		fallthrough
	case "IGNORED":
		fallthrough
	case "ACKNOWLEDGED":
		fallthrough
	case "RESOLVED":
		*e = UpdateIssueStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateIssueStatus: %v", v)
	}
}

type UpdateIssueRequestBody struct {
	// New status
	Status UpdateIssueStatus `json:"status"`
}

func (o *UpdateIssueRequestBody) GetStatus() UpdateIssueStatus {
	if o == nil {
		return UpdateIssueStatus("")
	}
	return o.Status
}

type UpdateIssueRequest struct {
	RequestBody UpdateIssueRequestBody `request:"mediaType=application/json"`
	ID          string                 `pathParam:"style=simple,explode=false,name=id"`
}

func (o *UpdateIssueRequest) GetRequestBody() UpdateIssueRequestBody {
	if o == nil {
		return UpdateIssueRequestBody{}
	}
	return o.RequestBody
}

func (o *UpdateIssueRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type UpdateIssueResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// Updated issue
	Issue *components.Issue
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *UpdateIssueResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *UpdateIssueResponse) GetIssue() *components.Issue {
	if o == nil {
		return nil
	}
	return o.Issue
}

func (o *UpdateIssueResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *UpdateIssueResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
