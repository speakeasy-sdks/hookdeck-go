// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/speakeasy-sdks/hookdeck-go/internal/utils"
	"github.com/speakeasy-sdks/hookdeck-go/models/components"
	"net/http"
	"time"
)

// CreateRequestBulkRetry2 - URL Encoded string of the JSON to match to the data body
type CreateRequestBulkRetry2 struct {
}

type CreateRequestBulkRetryBodyType string

const (
	CreateRequestBulkRetryBodyTypeStr                     CreateRequestBulkRetryBodyType = "str"
	CreateRequestBulkRetryBodyTypeCreateRequestBulkRetry2 CreateRequestBulkRetryBodyType = "createRequestBulkRetry_2"
)

type CreateRequestBulkRetryBody struct {
	Str                     *string
	CreateRequestBulkRetry2 *CreateRequestBulkRetry2

	Type CreateRequestBulkRetryBodyType
}

func CreateCreateRequestBulkRetryBodyStr(str string) CreateRequestBulkRetryBody {
	typ := CreateRequestBulkRetryBodyTypeStr

	return CreateRequestBulkRetryBody{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreateRequestBulkRetryBodyCreateRequestBulkRetry2(createRequestBulkRetry2 CreateRequestBulkRetry2) CreateRequestBulkRetryBody {
	typ := CreateRequestBulkRetryBodyTypeCreateRequestBulkRetry2

	return CreateRequestBulkRetryBody{
		CreateRequestBulkRetry2: &createRequestBulkRetry2,
		Type:                    typ,
	}
}

func (u *CreateRequestBulkRetryBody) UnmarshalJSON(data []byte) error {

	createRequestBulkRetry2 := CreateRequestBulkRetry2{}
	if err := utils.UnmarshalJSON(data, &createRequestBulkRetry2, "", true, true); err == nil {
		u.CreateRequestBulkRetry2 = &createRequestBulkRetry2
		u.Type = CreateRequestBulkRetryBodyTypeCreateRequestBulkRetry2
		return nil
	}

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CreateRequestBulkRetryBodyTypeStr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateRequestBulkRetryBody) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.CreateRequestBulkRetry2 != nil {
		return utils.MarshalJSON(u.CreateRequestBulkRetry2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateRequestBulkRetryBulkRetryIDType string

const (
	CreateRequestBulkRetryBulkRetryIDTypeStr        CreateRequestBulkRetryBulkRetryIDType = "str"
	CreateRequestBulkRetryBulkRetryIDTypeArrayOfstr CreateRequestBulkRetryBulkRetryIDType = "arrayOfstr"
)

type CreateRequestBulkRetryBulkRetryID struct {
	Str        *string
	ArrayOfstr []string

	Type CreateRequestBulkRetryBulkRetryIDType
}

func CreateCreateRequestBulkRetryBulkRetryIDStr(str string) CreateRequestBulkRetryBulkRetryID {
	typ := CreateRequestBulkRetryBulkRetryIDTypeStr

	return CreateRequestBulkRetryBulkRetryID{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreateRequestBulkRetryBulkRetryIDArrayOfstr(arrayOfstr []string) CreateRequestBulkRetryBulkRetryID {
	typ := CreateRequestBulkRetryBulkRetryIDTypeArrayOfstr

	return CreateRequestBulkRetryBulkRetryID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *CreateRequestBulkRetryBulkRetryID) UnmarshalJSON(data []byte) error {

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CreateRequestBulkRetryBulkRetryIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = CreateRequestBulkRetryBulkRetryIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateRequestBulkRetryBulkRetryID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateRequestBulkRetryBulkRetryRequests2 struct {
	Any *bool      `json:"any,omitempty"`
	Gt  *time.Time `json:"gt,omitempty"`
	Gte *time.Time `json:"gte,omitempty"`
	Le  *time.Time `json:"le,omitempty"`
	Lte *time.Time `json:"lte,omitempty"`
}

func (c CreateRequestBulkRetryBulkRetryRequests2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateRequestBulkRetryBulkRetryRequests2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateRequestBulkRetryBulkRetryRequests2) GetAny() *bool {
	if o == nil {
		return nil
	}
	return o.Any
}

func (o *CreateRequestBulkRetryBulkRetryRequests2) GetGt() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *CreateRequestBulkRetryBulkRetryRequests2) GetGte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *CreateRequestBulkRetryBulkRetryRequests2) GetLe() *time.Time {
	if o == nil {
		return nil
	}
	return o.Le
}

func (o *CreateRequestBulkRetryBulkRetryRequests2) GetLte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Lte
}

type CreateRequestBulkRetryCreatedAtType string

const (
	CreateRequestBulkRetryCreatedAtTypeDateTime                                 CreateRequestBulkRetryCreatedAtType = "date-time"
	CreateRequestBulkRetryCreatedAtTypeCreateRequestBulkRetryBulkRetryRequests2 CreateRequestBulkRetryCreatedAtType = "createRequestBulkRetry_BulkRetryRequests_2"
)

type CreateRequestBulkRetryCreatedAt struct {
	DateTime                                 *time.Time
	CreateRequestBulkRetryBulkRetryRequests2 *CreateRequestBulkRetryBulkRetryRequests2

	Type CreateRequestBulkRetryCreatedAtType
}

func CreateCreateRequestBulkRetryCreatedAtDateTime(dateTime time.Time) CreateRequestBulkRetryCreatedAt {
	typ := CreateRequestBulkRetryCreatedAtTypeDateTime

	return CreateRequestBulkRetryCreatedAt{
		DateTime: &dateTime,
		Type:     typ,
	}
}

func CreateCreateRequestBulkRetryCreatedAtCreateRequestBulkRetryBulkRetryRequests2(createRequestBulkRetryBulkRetryRequests2 CreateRequestBulkRetryBulkRetryRequests2) CreateRequestBulkRetryCreatedAt {
	typ := CreateRequestBulkRetryCreatedAtTypeCreateRequestBulkRetryBulkRetryRequests2

	return CreateRequestBulkRetryCreatedAt{
		CreateRequestBulkRetryBulkRetryRequests2: &createRequestBulkRetryBulkRetryRequests2,
		Type:                                     typ,
	}
}

func (u *CreateRequestBulkRetryCreatedAt) UnmarshalJSON(data []byte) error {

	createRequestBulkRetryBulkRetryRequests2 := CreateRequestBulkRetryBulkRetryRequests2{}
	if err := utils.UnmarshalJSON(data, &createRequestBulkRetryBulkRetryRequests2, "", true, true); err == nil {
		u.CreateRequestBulkRetryBulkRetryRequests2 = &createRequestBulkRetryBulkRetryRequests2
		u.Type = CreateRequestBulkRetryCreatedAtTypeCreateRequestBulkRetryBulkRetryRequests2
		return nil
	}

	dateTime := time.Time{}
	if err := utils.UnmarshalJSON(data, &dateTime, "", true, true); err == nil {
		u.DateTime = &dateTime
		u.Type = CreateRequestBulkRetryCreatedAtTypeDateTime
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateRequestBulkRetryCreatedAt) MarshalJSON() ([]byte, error) {
	if u.DateTime != nil {
		return utils.MarshalJSON(u.DateTime, "", true)
	}

	if u.CreateRequestBulkRetryBulkRetryRequests2 != nil {
		return utils.MarshalJSON(u.CreateRequestBulkRetryBulkRetryRequests2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateRequestBulkRetryBulkRetryRequestsRequest2 struct {
	Any      *bool  `json:"any,omitempty"`
	Contains *int64 `json:"contains,omitempty"`
	Gt       *int64 `json:"gt,omitempty"`
	Gte      *int64 `json:"gte,omitempty"`
	Le       *int64 `json:"le,omitempty"`
	Lte      *int64 `json:"lte,omitempty"`
}

func (o *CreateRequestBulkRetryBulkRetryRequestsRequest2) GetAny() *bool {
	if o == nil {
		return nil
	}
	return o.Any
}

func (o *CreateRequestBulkRetryBulkRetryRequestsRequest2) GetContains() *int64 {
	if o == nil {
		return nil
	}
	return o.Contains
}

func (o *CreateRequestBulkRetryBulkRetryRequestsRequest2) GetGt() *int64 {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *CreateRequestBulkRetryBulkRetryRequestsRequest2) GetGte() *int64 {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *CreateRequestBulkRetryBulkRetryRequestsRequest2) GetLe() *int64 {
	if o == nil {
		return nil
	}
	return o.Le
}

func (o *CreateRequestBulkRetryBulkRetryRequestsRequest2) GetLte() *int64 {
	if o == nil {
		return nil
	}
	return o.Lte
}

type EventsCountType string

const (
	EventsCountTypeInteger                                         EventsCountType = "integer"
	EventsCountTypeCreateRequestBulkRetryBulkRetryRequestsRequest2 EventsCountType = "createRequestBulkRetry_BulkRetryRequests_request_2"
	EventsCountTypeArrayOfinteger                                  EventsCountType = "arrayOfinteger"
)

type EventsCount struct {
	Integer                                         *int64
	CreateRequestBulkRetryBulkRetryRequestsRequest2 *CreateRequestBulkRetryBulkRetryRequestsRequest2
	ArrayOfinteger                                  []int64

	Type EventsCountType
}

func CreateEventsCountInteger(integer int64) EventsCount {
	typ := EventsCountTypeInteger

	return EventsCount{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateEventsCountCreateRequestBulkRetryBulkRetryRequestsRequest2(createRequestBulkRetryBulkRetryRequestsRequest2 CreateRequestBulkRetryBulkRetryRequestsRequest2) EventsCount {
	typ := EventsCountTypeCreateRequestBulkRetryBulkRetryRequestsRequest2

	return EventsCount{
		CreateRequestBulkRetryBulkRetryRequestsRequest2: &createRequestBulkRetryBulkRetryRequestsRequest2,
		Type: typ,
	}
}

func CreateEventsCountArrayOfinteger(arrayOfinteger []int64) EventsCount {
	typ := EventsCountTypeArrayOfinteger

	return EventsCount{
		ArrayOfinteger: arrayOfinteger,
		Type:           typ,
	}
}

func (u *EventsCount) UnmarshalJSON(data []byte) error {

	createRequestBulkRetryBulkRetryRequestsRequest2 := CreateRequestBulkRetryBulkRetryRequestsRequest2{}
	if err := utils.UnmarshalJSON(data, &createRequestBulkRetryBulkRetryRequestsRequest2, "", true, true); err == nil {
		u.CreateRequestBulkRetryBulkRetryRequestsRequest2 = &createRequestBulkRetryBulkRetryRequestsRequest2
		u.Type = EventsCountTypeCreateRequestBulkRetryBulkRetryRequestsRequest2
		return nil
	}

	integer := int64(0)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = &integer
		u.Type = EventsCountTypeInteger
		return nil
	}

	arrayOfinteger := []int64{}
	if err := utils.UnmarshalJSON(data, &arrayOfinteger, "", true, true); err == nil {
		u.ArrayOfinteger = arrayOfinteger
		u.Type = EventsCountTypeArrayOfinteger
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u EventsCount) MarshalJSON() ([]byte, error) {
	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.CreateRequestBulkRetryBulkRetryRequestsRequest2 != nil {
		return utils.MarshalJSON(u.CreateRequestBulkRetryBulkRetryRequestsRequest2, "", true)
	}

	if u.ArrayOfinteger != nil {
		return utils.MarshalJSON(u.ArrayOfinteger, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// CreateRequestBulkRetryBulkRetryRequestsRequestRequestBody2 - URL Encoded string of the JSON to match to the data headers
type CreateRequestBulkRetryBulkRetryRequestsRequestRequestBody2 struct {
}

type CreateRequestBulkRetryHeadersType string

const (
	CreateRequestBulkRetryHeadersTypeStr                                                        CreateRequestBulkRetryHeadersType = "str"
	CreateRequestBulkRetryHeadersTypeCreateRequestBulkRetryBulkRetryRequestsRequestRequestBody2 CreateRequestBulkRetryHeadersType = "createRequestBulkRetry_BulkRetryRequests_request_requestBody_2"
)

type CreateRequestBulkRetryHeaders struct {
	Str                                                        *string
	CreateRequestBulkRetryBulkRetryRequestsRequestRequestBody2 *CreateRequestBulkRetryBulkRetryRequestsRequestRequestBody2

	Type CreateRequestBulkRetryHeadersType
}

func CreateCreateRequestBulkRetryHeadersStr(str string) CreateRequestBulkRetryHeaders {
	typ := CreateRequestBulkRetryHeadersTypeStr

	return CreateRequestBulkRetryHeaders{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreateRequestBulkRetryHeadersCreateRequestBulkRetryBulkRetryRequestsRequestRequestBody2(createRequestBulkRetryBulkRetryRequestsRequestRequestBody2 CreateRequestBulkRetryBulkRetryRequestsRequestRequestBody2) CreateRequestBulkRetryHeaders {
	typ := CreateRequestBulkRetryHeadersTypeCreateRequestBulkRetryBulkRetryRequestsRequestRequestBody2

	return CreateRequestBulkRetryHeaders{
		CreateRequestBulkRetryBulkRetryRequestsRequestRequestBody2: &createRequestBulkRetryBulkRetryRequestsRequestRequestBody2,
		Type: typ,
	}
}

func (u *CreateRequestBulkRetryHeaders) UnmarshalJSON(data []byte) error {

	createRequestBulkRetryBulkRetryRequestsRequestRequestBody2 := CreateRequestBulkRetryBulkRetryRequestsRequestRequestBody2{}
	if err := utils.UnmarshalJSON(data, &createRequestBulkRetryBulkRetryRequestsRequestRequestBody2, "", true, true); err == nil {
		u.CreateRequestBulkRetryBulkRetryRequestsRequestRequestBody2 = &createRequestBulkRetryBulkRetryRequestsRequestRequestBody2
		u.Type = CreateRequestBulkRetryHeadersTypeCreateRequestBulkRetryBulkRetryRequestsRequestRequestBody2
		return nil
	}

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CreateRequestBulkRetryHeadersTypeStr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateRequestBulkRetryHeaders) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.CreateRequestBulkRetryBulkRetryRequestsRequestRequestBody2 != nil {
		return utils.MarshalJSON(u.CreateRequestBulkRetryBulkRetryRequestsRequestRequestBody2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateRequestBulkRetryIDType string

const (
	CreateRequestBulkRetryIDTypeStr        CreateRequestBulkRetryIDType = "str"
	CreateRequestBulkRetryIDTypeArrayOfstr CreateRequestBulkRetryIDType = "arrayOfstr"
)

type CreateRequestBulkRetryID struct {
	Str        *string
	ArrayOfstr []string

	Type CreateRequestBulkRetryIDType
}

func CreateCreateRequestBulkRetryIDStr(str string) CreateRequestBulkRetryID {
	typ := CreateRequestBulkRetryIDTypeStr

	return CreateRequestBulkRetryID{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreateRequestBulkRetryIDArrayOfstr(arrayOfstr []string) CreateRequestBulkRetryID {
	typ := CreateRequestBulkRetryIDTypeArrayOfstr

	return CreateRequestBulkRetryID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *CreateRequestBulkRetryID) UnmarshalJSON(data []byte) error {

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CreateRequestBulkRetryIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = CreateRequestBulkRetryIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateRequestBulkRetryID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQuery2 struct {
	Any      *bool  `json:"any,omitempty"`
	Contains *int64 `json:"contains,omitempty"`
	Gt       *int64 `json:"gt,omitempty"`
	Gte      *int64 `json:"gte,omitempty"`
	Le       *int64 `json:"le,omitempty"`
	Lte      *int64 `json:"lte,omitempty"`
}

func (o *CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQuery2) GetAny() *bool {
	if o == nil {
		return nil
	}
	return o.Any
}

func (o *CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQuery2) GetContains() *int64 {
	if o == nil {
		return nil
	}
	return o.Contains
}

func (o *CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQuery2) GetGt() *int64 {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQuery2) GetGte() *int64 {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQuery2) GetLe() *int64 {
	if o == nil {
		return nil
	}
	return o.Le
}

func (o *CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQuery2) GetLte() *int64 {
	if o == nil {
		return nil
	}
	return o.Lte
}

type IgnoredCountType string

const (
	IgnoredCountTypeInteger                                                         IgnoredCountType = "integer"
	IgnoredCountTypeCreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQuery2 IgnoredCountType = "createRequestBulkRetry_BulkRetryRequests_request_requestBody_query_2"
	IgnoredCountTypeArrayOfinteger                                                  IgnoredCountType = "arrayOfinteger"
)

type IgnoredCount struct {
	Integer                                                         *int64
	CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQuery2 *CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQuery2
	ArrayOfinteger                                                  []int64

	Type IgnoredCountType
}

func CreateIgnoredCountInteger(integer int64) IgnoredCount {
	typ := IgnoredCountTypeInteger

	return IgnoredCount{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateIgnoredCountCreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQuery2(createRequestBulkRetryBulkRetryRequestsRequestRequestBodyQuery2 CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQuery2) IgnoredCount {
	typ := IgnoredCountTypeCreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQuery2

	return IgnoredCount{
		CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQuery2: &createRequestBulkRetryBulkRetryRequestsRequestRequestBodyQuery2,
		Type: typ,
	}
}

func CreateIgnoredCountArrayOfinteger(arrayOfinteger []int64) IgnoredCount {
	typ := IgnoredCountTypeArrayOfinteger

	return IgnoredCount{
		ArrayOfinteger: arrayOfinteger,
		Type:           typ,
	}
}

func (u *IgnoredCount) UnmarshalJSON(data []byte) error {

	createRequestBulkRetryBulkRetryRequestsRequestRequestBodyQuery2 := CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQuery2{}
	if err := utils.UnmarshalJSON(data, &createRequestBulkRetryBulkRetryRequestsRequestRequestBodyQuery2, "", true, true); err == nil {
		u.CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQuery2 = &createRequestBulkRetryBulkRetryRequestsRequestRequestBodyQuery2
		u.Type = IgnoredCountTypeCreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQuery2
		return nil
	}

	integer := int64(0)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = &integer
		u.Type = IgnoredCountTypeInteger
		return nil
	}

	arrayOfinteger := []int64{}
	if err := utils.UnmarshalJSON(data, &arrayOfinteger, "", true, true); err == nil {
		u.ArrayOfinteger = arrayOfinteger
		u.Type = IgnoredCountTypeArrayOfinteger
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u IgnoredCount) MarshalJSON() ([]byte, error) {
	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQuery2 != nil {
		return utils.MarshalJSON(u.CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQuery2, "", true)
	}

	if u.ArrayOfinteger != nil {
		return utils.MarshalJSON(u.ArrayOfinteger, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryIngestedAt2 struct {
	Any *bool      `json:"any,omitempty"`
	Gt  *time.Time `json:"gt,omitempty"`
	Gte *time.Time `json:"gte,omitempty"`
	Le  *time.Time `json:"le,omitempty"`
	Lte *time.Time `json:"lte,omitempty"`
}

func (c CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryIngestedAt2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryIngestedAt2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryIngestedAt2) GetAny() *bool {
	if o == nil {
		return nil
	}
	return o.Any
}

func (o *CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryIngestedAt2) GetGt() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryIngestedAt2) GetGte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryIngestedAt2) GetLe() *time.Time {
	if o == nil {
		return nil
	}
	return o.Le
}

func (o *CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryIngestedAt2) GetLte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Lte
}

type IngestedAtType string

const (
	IngestedAtTypeDateTime                                                                  IngestedAtType = "date-time"
	IngestedAtTypeCreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryIngestedAt2 IngestedAtType = "createRequestBulkRetry_BulkRetryRequests_request_requestBody_query_ingested_at_2"
)

type IngestedAt struct {
	DateTime                                                                  *time.Time
	CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryIngestedAt2 *CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryIngestedAt2

	Type IngestedAtType
}

func CreateIngestedAtDateTime(dateTime time.Time) IngestedAt {
	typ := IngestedAtTypeDateTime

	return IngestedAt{
		DateTime: &dateTime,
		Type:     typ,
	}
}

func CreateIngestedAtCreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryIngestedAt2(createRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryIngestedAt2 CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryIngestedAt2) IngestedAt {
	typ := IngestedAtTypeCreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryIngestedAt2

	return IngestedAt{
		CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryIngestedAt2: &createRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryIngestedAt2,
		Type: typ,
	}
}

func (u *IngestedAt) UnmarshalJSON(data []byte) error {

	createRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryIngestedAt2 := CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryIngestedAt2{}
	if err := utils.UnmarshalJSON(data, &createRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryIngestedAt2, "", true, true); err == nil {
		u.CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryIngestedAt2 = &createRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryIngestedAt2
		u.Type = IngestedAtTypeCreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryIngestedAt2
		return nil
	}

	dateTime := time.Time{}
	if err := utils.UnmarshalJSON(data, &dateTime, "", true, true); err == nil {
		u.DateTime = &dateTime
		u.Type = IngestedAtTypeDateTime
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u IngestedAt) MarshalJSON() ([]byte, error) {
	if u.DateTime != nil {
		return utils.MarshalJSON(u.DateTime, "", true)
	}

	if u.CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryIngestedAt2 != nil {
		return utils.MarshalJSON(u.CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryIngestedAt2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryParsedQuery2 - URL Encoded string of the JSON to match to the parsed query (JSON representation of the query)
type CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryParsedQuery2 struct {
}

type CreateRequestBulkRetryParsedQueryType string

const (
	CreateRequestBulkRetryParsedQueryTypeStr                                                                        CreateRequestBulkRetryParsedQueryType = "str"
	CreateRequestBulkRetryParsedQueryTypeCreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryParsedQuery2 CreateRequestBulkRetryParsedQueryType = "createRequestBulkRetry_BulkRetryRequests_request_requestBody_query_parsed_query_2"
)

type CreateRequestBulkRetryParsedQuery struct {
	Str                                                                        *string
	CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryParsedQuery2 *CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryParsedQuery2

	Type CreateRequestBulkRetryParsedQueryType
}

func CreateCreateRequestBulkRetryParsedQueryStr(str string) CreateRequestBulkRetryParsedQuery {
	typ := CreateRequestBulkRetryParsedQueryTypeStr

	return CreateRequestBulkRetryParsedQuery{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreateRequestBulkRetryParsedQueryCreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryParsedQuery2(createRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryParsedQuery2 CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryParsedQuery2) CreateRequestBulkRetryParsedQuery {
	typ := CreateRequestBulkRetryParsedQueryTypeCreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryParsedQuery2

	return CreateRequestBulkRetryParsedQuery{
		CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryParsedQuery2: &createRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryParsedQuery2,
		Type: typ,
	}
}

func (u *CreateRequestBulkRetryParsedQuery) UnmarshalJSON(data []byte) error {

	createRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryParsedQuery2 := CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryParsedQuery2{}
	if err := utils.UnmarshalJSON(data, &createRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryParsedQuery2, "", true, true); err == nil {
		u.CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryParsedQuery2 = &createRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryParsedQuery2
		u.Type = CreateRequestBulkRetryParsedQueryTypeCreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryParsedQuery2
		return nil
	}

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CreateRequestBulkRetryParsedQueryTypeStr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateRequestBulkRetryParsedQuery) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryParsedQuery2 != nil {
		return utils.MarshalJSON(u.CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryParsedQuery2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryRejectionCause2 - Filter by rejection cause
type CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryRejectionCause2 struct {
	Any      *bool                             `json:"any,omitempty"`
	Contains *components.RequestRejectionCause `json:"contains,omitempty"`
	Gt       *components.RequestRejectionCause `json:"gt,omitempty"`
	Gte      *components.RequestRejectionCause `json:"gte,omitempty"`
	Le       *components.RequestRejectionCause `json:"le,omitempty"`
	Lte      *components.RequestRejectionCause `json:"lte,omitempty"`
}

func (o *CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryRejectionCause2) GetAny() *bool {
	if o == nil {
		return nil
	}
	return o.Any
}

func (o *CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryRejectionCause2) GetContains() *components.RequestRejectionCause {
	if o == nil {
		return nil
	}
	return o.Contains
}

func (o *CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryRejectionCause2) GetGt() *components.RequestRejectionCause {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryRejectionCause2) GetGte() *components.RequestRejectionCause {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryRejectionCause2) GetLe() *components.RequestRejectionCause {
	if o == nil {
		return nil
	}
	return o.Le
}

func (o *CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryRejectionCause2) GetLte() *components.RequestRejectionCause {
	if o == nil {
		return nil
	}
	return o.Lte
}

// RequestRejectionCauseSchemas - Filter by rejection cause
type RequestRejectionCauseSchemas string

const (
	RequestRejectionCauseSchemasSourceArchived         RequestRejectionCauseSchemas = "SOURCE_ARCHIVED"
	RequestRejectionCauseSchemasNoWebhook              RequestRejectionCauseSchemas = "NO_WEBHOOK"
	RequestRejectionCauseSchemasVerificationFailed     RequestRejectionCauseSchemas = "VERIFICATION_FAILED"
	RequestRejectionCauseSchemasUnsupportedHTTPMethod  RequestRejectionCauseSchemas = "UNSUPPORTED_HTTP_METHOD"
	RequestRejectionCauseSchemasUnsupportedContentType RequestRejectionCauseSchemas = "UNSUPPORTED_CONTENT_TYPE"
	RequestRejectionCauseSchemasUnparsableJSON         RequestRejectionCauseSchemas = "UNPARSABLE_JSON"
	RequestRejectionCauseSchemasPayloadTooLarge        RequestRejectionCauseSchemas = "PAYLOAD_TOO_LARGE"
	RequestRejectionCauseSchemasIngestionFatal         RequestRejectionCauseSchemas = "INGESTION_FATAL"
	RequestRejectionCauseSchemasUnknown                RequestRejectionCauseSchemas = "UNKNOWN"
)

func (e RequestRejectionCauseSchemas) ToPointer() *RequestRejectionCauseSchemas {
	return &e
}

func (e *RequestRejectionCauseSchemas) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SOURCE_ARCHIVED":
		fallthrough
	case "NO_WEBHOOK":
		fallthrough
	case "VERIFICATION_FAILED":
		fallthrough
	case "UNSUPPORTED_HTTP_METHOD":
		fallthrough
	case "UNSUPPORTED_CONTENT_TYPE":
		fallthrough
	case "UNPARSABLE_JSON":
		fallthrough
	case "PAYLOAD_TOO_LARGE":
		fallthrough
	case "INGESTION_FATAL":
		fallthrough
	case "UNKNOWN":
		*e = RequestRejectionCauseSchemas(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RequestRejectionCauseSchemas: %v", v)
	}
}

type RejectionCauseType string

const (
	RejectionCauseTypeRequestRejectionCauseSchemas                                                  RejectionCauseType = "RequestRejectionCause_Schemas"
	RejectionCauseTypeCreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryRejectionCause2 RejectionCauseType = "createRequestBulkRetry_BulkRetryRequests_request_requestBody_query_rejection_cause_2"
	RejectionCauseTypeArrayOfRequestRejectionCause                                                  RejectionCauseType = "arrayOfRequestRejectionCause"
)

type RejectionCause struct {
	RequestRejectionCauseSchemas                                                  *RequestRejectionCauseSchemas
	CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryRejectionCause2 *CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryRejectionCause2
	ArrayOfRequestRejectionCause                                                  []components.RequestRejectionCause

	Type RejectionCauseType
}

func CreateRejectionCauseRequestRejectionCauseSchemas(requestRejectionCauseSchemas RequestRejectionCauseSchemas) RejectionCause {
	typ := RejectionCauseTypeRequestRejectionCauseSchemas

	return RejectionCause{
		RequestRejectionCauseSchemas: &requestRejectionCauseSchemas,
		Type:                         typ,
	}
}

func CreateRejectionCauseCreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryRejectionCause2(createRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryRejectionCause2 CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryRejectionCause2) RejectionCause {
	typ := RejectionCauseTypeCreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryRejectionCause2

	return RejectionCause{
		CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryRejectionCause2: &createRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryRejectionCause2,
		Type: typ,
	}
}

func CreateRejectionCauseArrayOfRequestRejectionCause(arrayOfRequestRejectionCause []components.RequestRejectionCause) RejectionCause {
	typ := RejectionCauseTypeArrayOfRequestRejectionCause

	return RejectionCause{
		ArrayOfRequestRejectionCause: arrayOfRequestRejectionCause,
		Type:                         typ,
	}
}

func (u *RejectionCause) UnmarshalJSON(data []byte) error {

	createRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryRejectionCause2 := CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryRejectionCause2{}
	if err := utils.UnmarshalJSON(data, &createRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryRejectionCause2, "", true, true); err == nil {
		u.CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryRejectionCause2 = &createRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryRejectionCause2
		u.Type = RejectionCauseTypeCreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryRejectionCause2
		return nil
	}

	requestRejectionCauseSchemas := RequestRejectionCauseSchemas("")
	if err := utils.UnmarshalJSON(data, &requestRejectionCauseSchemas, "", true, true); err == nil {
		u.RequestRejectionCauseSchemas = &requestRejectionCauseSchemas
		u.Type = RejectionCauseTypeRequestRejectionCauseSchemas
		return nil
	}

	arrayOfRequestRejectionCause := []components.RequestRejectionCause{}
	if err := utils.UnmarshalJSON(data, &arrayOfRequestRejectionCause, "", true, true); err == nil {
		u.ArrayOfRequestRejectionCause = arrayOfRequestRejectionCause
		u.Type = RejectionCauseTypeArrayOfRequestRejectionCause
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u RejectionCause) MarshalJSON() ([]byte, error) {
	if u.RequestRejectionCauseSchemas != nil {
		return utils.MarshalJSON(u.RequestRejectionCauseSchemas, "", true)
	}

	if u.CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryRejectionCause2 != nil {
		return utils.MarshalJSON(u.CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryRejectionCause2, "", true)
	}

	if u.ArrayOfRequestRejectionCause != nil {
		return utils.MarshalJSON(u.ArrayOfRequestRejectionCause, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateRequestBulkRetrySourceIDType string

const (
	CreateRequestBulkRetrySourceIDTypeStr        CreateRequestBulkRetrySourceIDType = "str"
	CreateRequestBulkRetrySourceIDTypeArrayOfstr CreateRequestBulkRetrySourceIDType = "arrayOfstr"
)

type CreateRequestBulkRetrySourceID struct {
	Str        *string
	ArrayOfstr []string

	Type CreateRequestBulkRetrySourceIDType
}

func CreateCreateRequestBulkRetrySourceIDStr(str string) CreateRequestBulkRetrySourceID {
	typ := CreateRequestBulkRetrySourceIDTypeStr

	return CreateRequestBulkRetrySourceID{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreateRequestBulkRetrySourceIDArrayOfstr(arrayOfstr []string) CreateRequestBulkRetrySourceID {
	typ := CreateRequestBulkRetrySourceIDTypeArrayOfstr

	return CreateRequestBulkRetrySourceID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *CreateRequestBulkRetrySourceID) UnmarshalJSON(data []byte) error {

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CreateRequestBulkRetrySourceIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = CreateRequestBulkRetrySourceIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateRequestBulkRetrySourceID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateRequestBulkRetryStatus string

const (
	CreateRequestBulkRetryStatusAccepted CreateRequestBulkRetryStatus = "accepted"
	CreateRequestBulkRetryStatusRejected CreateRequestBulkRetryStatus = "rejected"
)

func (e CreateRequestBulkRetryStatus) ToPointer() *CreateRequestBulkRetryStatus {
	return &e
}

func (e *CreateRequestBulkRetryStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "accepted":
		fallthrough
	case "rejected":
		*e = CreateRequestBulkRetryStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateRequestBulkRetryStatus: %v", v)
	}
}

// CreateRequestBulkRetryQuery - Filter properties for the events to be included in the bulk retry, use query parameters of [Requests](#requests)
type CreateRequestBulkRetryQuery struct {
	// URL Encoded string of the JSON to match to the data body
	Body        *CreateRequestBulkRetryBody        `json:"body,omitempty"`
	BulkRetryID *CreateRequestBulkRetryBulkRetryID `json:"bulk_retry_id,omitempty"`
	CreatedAt   *CreateRequestBulkRetryCreatedAt   `json:"created_at,omitempty"`
	EventsCount *EventsCount                       `json:"events_count,omitempty"`
	// URL Encoded string of the JSON to match to the data headers
	Headers *CreateRequestBulkRetryHeaders `json:"headers,omitempty"`
	// Filter by requests IDs
	ID           *CreateRequestBulkRetryID `json:"id,omitempty"`
	IgnoredCount *IgnoredCount             `json:"ignored_count,omitempty"`
	IngestedAt   *IngestedAt               `json:"ingested_at,omitempty"`
	// URL Encoded string of the JSON to match to the parsed query (JSON representation of the query)
	ParsedQuery *CreateRequestBulkRetryParsedQuery `json:"parsed_query,omitempty"`
	// URL Encoded string of the string to match partially to the path
	Path *string `json:"path,omitempty"`
	// Filter by rejection cause
	RejectionCause *RejectionCause `json:"rejection_cause,omitempty"`
	// URL Encoded string of the string to match partially to the body, headers, parsed_query or path
	SearchTerm *string `json:"search_term,omitempty"`
	// Filter by source IDs
	SourceID *CreateRequestBulkRetrySourceID `json:"source_id,omitempty"`
	Status   *CreateRequestBulkRetryStatus   `json:"status,omitempty"`
	// Filter by verification status
	Verified *bool `json:"verified,omitempty"`
}

func (o *CreateRequestBulkRetryQuery) GetBody() *CreateRequestBulkRetryBody {
	if o == nil {
		return nil
	}
	return o.Body
}

func (o *CreateRequestBulkRetryQuery) GetBulkRetryID() *CreateRequestBulkRetryBulkRetryID {
	if o == nil {
		return nil
	}
	return o.BulkRetryID
}

func (o *CreateRequestBulkRetryQuery) GetCreatedAt() *CreateRequestBulkRetryCreatedAt {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *CreateRequestBulkRetryQuery) GetEventsCount() *EventsCount {
	if o == nil {
		return nil
	}
	return o.EventsCount
}

func (o *CreateRequestBulkRetryQuery) GetHeaders() *CreateRequestBulkRetryHeaders {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *CreateRequestBulkRetryQuery) GetID() *CreateRequestBulkRetryID {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *CreateRequestBulkRetryQuery) GetIgnoredCount() *IgnoredCount {
	if o == nil {
		return nil
	}
	return o.IgnoredCount
}

func (o *CreateRequestBulkRetryQuery) GetIngestedAt() *IngestedAt {
	if o == nil {
		return nil
	}
	return o.IngestedAt
}

func (o *CreateRequestBulkRetryQuery) GetParsedQuery() *CreateRequestBulkRetryParsedQuery {
	if o == nil {
		return nil
	}
	return o.ParsedQuery
}

func (o *CreateRequestBulkRetryQuery) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

func (o *CreateRequestBulkRetryQuery) GetRejectionCause() *RejectionCause {
	if o == nil {
		return nil
	}
	return o.RejectionCause
}

func (o *CreateRequestBulkRetryQuery) GetSearchTerm() *string {
	if o == nil {
		return nil
	}
	return o.SearchTerm
}

func (o *CreateRequestBulkRetryQuery) GetSourceID() *CreateRequestBulkRetrySourceID {
	if o == nil {
		return nil
	}
	return o.SourceID
}

func (o *CreateRequestBulkRetryQuery) GetStatus() *CreateRequestBulkRetryStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *CreateRequestBulkRetryQuery) GetVerified() *bool {
	if o == nil {
		return nil
	}
	return o.Verified
}

type CreateRequestBulkRetryRequestBody struct {
	// Filter properties for the events to be included in the bulk retry, use query parameters of [Requests](#requests)
	Query *CreateRequestBulkRetryQuery `json:"query,omitempty"`
}

func (o *CreateRequestBulkRetryRequestBody) GetQuery() *CreateRequestBulkRetryQuery {
	if o == nil {
		return nil
	}
	return o.Query
}

type CreateRequestBulkRetryResponse struct {
	// A single requests bulk retry
	BatchOperation *components.BatchOperation
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *CreateRequestBulkRetryResponse) GetBatchOperation() *components.BatchOperation {
	if o == nil {
		return nil
	}
	return o.BatchOperation
}

func (o *CreateRequestBulkRetryResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *CreateRequestBulkRetryResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *CreateRequestBulkRetryResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
