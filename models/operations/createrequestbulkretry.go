// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/speakeasy-sdks/hookdeck-go/internal/utils"
	"github.com/speakeasy-sdks/hookdeck-go/models/components"
	"net/http"
	"time"
)

// CreateRequestBulkRetry2 - URL Encoded string of the JSON to match to the data body
type CreateRequestBulkRetry2 struct {
}

type CreateRequestBulkRetryBodyType string

const (
	CreateRequestBulkRetryBodyTypeStr                     CreateRequestBulkRetryBodyType = "str"
	CreateRequestBulkRetryBodyTypeCreateRequestBulkRetry2 CreateRequestBulkRetryBodyType = "createRequestBulkRetry_2"
)

type CreateRequestBulkRetryBody struct {
	Str                     *string
	CreateRequestBulkRetry2 *CreateRequestBulkRetry2

	Type CreateRequestBulkRetryBodyType
}

func CreateCreateRequestBulkRetryBodyStr(str string) CreateRequestBulkRetryBody {
	typ := CreateRequestBulkRetryBodyTypeStr

	return CreateRequestBulkRetryBody{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreateRequestBulkRetryBodyCreateRequestBulkRetry2(createRequestBulkRetry2 CreateRequestBulkRetry2) CreateRequestBulkRetryBody {
	typ := CreateRequestBulkRetryBodyTypeCreateRequestBulkRetry2

	return CreateRequestBulkRetryBody{
		CreateRequestBulkRetry2: &createRequestBulkRetry2,
		Type:                    typ,
	}
}

func (u *CreateRequestBulkRetryBody) UnmarshalJSON(data []byte) error {

	createRequestBulkRetry2 := CreateRequestBulkRetry2{}
	if err := utils.UnmarshalJSON(data, &createRequestBulkRetry2, "", true, true); err == nil {
		u.CreateRequestBulkRetry2 = &createRequestBulkRetry2
		u.Type = CreateRequestBulkRetryBodyTypeCreateRequestBulkRetry2
		return nil
	}

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CreateRequestBulkRetryBodyTypeStr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateRequestBulkRetryBody) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.CreateRequestBulkRetry2 != nil {
		return utils.MarshalJSON(u.CreateRequestBulkRetry2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateRequestBulkRetryBulkRetryIDType string

const (
	CreateRequestBulkRetryBulkRetryIDTypeStr        CreateRequestBulkRetryBulkRetryIDType = "str"
	CreateRequestBulkRetryBulkRetryIDTypeArrayOfstr CreateRequestBulkRetryBulkRetryIDType = "arrayOfstr"
)

type CreateRequestBulkRetryBulkRetryID struct {
	Str        *string
	ArrayOfstr []string

	Type CreateRequestBulkRetryBulkRetryIDType
}

func CreateCreateRequestBulkRetryBulkRetryIDStr(str string) CreateRequestBulkRetryBulkRetryID {
	typ := CreateRequestBulkRetryBulkRetryIDTypeStr

	return CreateRequestBulkRetryBulkRetryID{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreateRequestBulkRetryBulkRetryIDArrayOfstr(arrayOfstr []string) CreateRequestBulkRetryBulkRetryID {
	typ := CreateRequestBulkRetryBulkRetryIDTypeArrayOfstr

	return CreateRequestBulkRetryBulkRetryID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *CreateRequestBulkRetryBulkRetryID) UnmarshalJSON(data []byte) error {

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CreateRequestBulkRetryBulkRetryIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = CreateRequestBulkRetryBulkRetryIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateRequestBulkRetryBulkRetryID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateRequestBulkRetryBulkRetryRequests2 struct {
	Any *bool      `json:"any,omitempty"`
	Gt  *time.Time `json:"gt,omitempty"`
	Gte *time.Time `json:"gte,omitempty"`
	Le  *time.Time `json:"le,omitempty"`
	Lte *time.Time `json:"lte,omitempty"`
}

func (c CreateRequestBulkRetryBulkRetryRequests2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateRequestBulkRetryBulkRetryRequests2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateRequestBulkRetryBulkRetryRequests2) GetAny() *bool {
	if o == nil {
		return nil
	}
	return o.Any
}

func (o *CreateRequestBulkRetryBulkRetryRequests2) GetGt() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *CreateRequestBulkRetryBulkRetryRequests2) GetGte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *CreateRequestBulkRetryBulkRetryRequests2) GetLe() *time.Time {
	if o == nil {
		return nil
	}
	return o.Le
}

func (o *CreateRequestBulkRetryBulkRetryRequests2) GetLte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Lte
}

type CreateRequestBulkRetryCreatedAtType string

const (
	CreateRequestBulkRetryCreatedAtTypeDateTime                                 CreateRequestBulkRetryCreatedAtType = "date-time"
	CreateRequestBulkRetryCreatedAtTypeCreateRequestBulkRetryBulkRetryRequests2 CreateRequestBulkRetryCreatedAtType = "createRequestBulkRetry_BulkRetryRequests_2"
)

type CreateRequestBulkRetryCreatedAt struct {
	DateTime                                 *time.Time
	CreateRequestBulkRetryBulkRetryRequests2 *CreateRequestBulkRetryBulkRetryRequests2

	Type CreateRequestBulkRetryCreatedAtType
}

func CreateCreateRequestBulkRetryCreatedAtDateTime(dateTime time.Time) CreateRequestBulkRetryCreatedAt {
	typ := CreateRequestBulkRetryCreatedAtTypeDateTime

	return CreateRequestBulkRetryCreatedAt{
		DateTime: &dateTime,
		Type:     typ,
	}
}

func CreateCreateRequestBulkRetryCreatedAtCreateRequestBulkRetryBulkRetryRequests2(createRequestBulkRetryBulkRetryRequests2 CreateRequestBulkRetryBulkRetryRequests2) CreateRequestBulkRetryCreatedAt {
	typ := CreateRequestBulkRetryCreatedAtTypeCreateRequestBulkRetryBulkRetryRequests2

	return CreateRequestBulkRetryCreatedAt{
		CreateRequestBulkRetryBulkRetryRequests2: &createRequestBulkRetryBulkRetryRequests2,
		Type:                                     typ,
	}
}

func (u *CreateRequestBulkRetryCreatedAt) UnmarshalJSON(data []byte) error {

	createRequestBulkRetryBulkRetryRequests2 := CreateRequestBulkRetryBulkRetryRequests2{}
	if err := utils.UnmarshalJSON(data, &createRequestBulkRetryBulkRetryRequests2, "", true, true); err == nil {
		u.CreateRequestBulkRetryBulkRetryRequests2 = &createRequestBulkRetryBulkRetryRequests2
		u.Type = CreateRequestBulkRetryCreatedAtTypeCreateRequestBulkRetryBulkRetryRequests2
		return nil
	}

	dateTime := time.Time{}
	if err := utils.UnmarshalJSON(data, &dateTime, "", true, true); err == nil {
		u.DateTime = &dateTime
		u.Type = CreateRequestBulkRetryCreatedAtTypeDateTime
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateRequestBulkRetryCreatedAt) MarshalJSON() ([]byte, error) {
	if u.DateTime != nil {
		return utils.MarshalJSON(u.DateTime, "", true)
	}

	if u.CreateRequestBulkRetryBulkRetryRequests2 != nil {
		return utils.MarshalJSON(u.CreateRequestBulkRetryBulkRetryRequests2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateRequestBulkRetryBulkRetryRequestsRequest2 struct {
	Any      *bool  `json:"any,omitempty"`
	Contains *int64 `json:"contains,omitempty"`
	Gt       *int64 `json:"gt,omitempty"`
	Gte      *int64 `json:"gte,omitempty"`
	Le       *int64 `json:"le,omitempty"`
	Lte      *int64 `json:"lte,omitempty"`
}

func (o *CreateRequestBulkRetryBulkRetryRequestsRequest2) GetAny() *bool {
	if o == nil {
		return nil
	}
	return o.Any
}

func (o *CreateRequestBulkRetryBulkRetryRequestsRequest2) GetContains() *int64 {
	if o == nil {
		return nil
	}
	return o.Contains
}

func (o *CreateRequestBulkRetryBulkRetryRequestsRequest2) GetGt() *int64 {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *CreateRequestBulkRetryBulkRetryRequestsRequest2) GetGte() *int64 {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *CreateRequestBulkRetryBulkRetryRequestsRequest2) GetLe() *int64 {
	if o == nil {
		return nil
	}
	return o.Le
}

func (o *CreateRequestBulkRetryBulkRetryRequestsRequest2) GetLte() *int64 {
	if o == nil {
		return nil
	}
	return o.Lte
}

type EventsCountType string

const (
	EventsCountTypeInteger                                         EventsCountType = "integer"
	EventsCountTypeCreateRequestBulkRetryBulkRetryRequestsRequest2 EventsCountType = "createRequestBulkRetry_BulkRetryRequests_request_2"
	EventsCountTypeArrayOfinteger                                  EventsCountType = "arrayOfinteger"
)

type EventsCount struct {
	Integer                                         *int64
	CreateRequestBulkRetryBulkRetryRequestsRequest2 *CreateRequestBulkRetryBulkRetryRequestsRequest2
	ArrayOfinteger                                  []int64

	Type EventsCountType
}

func CreateEventsCountInteger(integer int64) EventsCount {
	typ := EventsCountTypeInteger

	return EventsCount{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateEventsCountCreateRequestBulkRetryBulkRetryRequestsRequest2(createRequestBulkRetryBulkRetryRequestsRequest2 CreateRequestBulkRetryBulkRetryRequestsRequest2) EventsCount {
	typ := EventsCountTypeCreateRequestBulkRetryBulkRetryRequestsRequest2

	return EventsCount{
		CreateRequestBulkRetryBulkRetryRequestsRequest2: &createRequestBulkRetryBulkRetryRequestsRequest2,
		Type: typ,
	}
}

func CreateEventsCountArrayOfinteger(arrayOfinteger []int64) EventsCount {
	typ := EventsCountTypeArrayOfinteger

	return EventsCount{
		ArrayOfinteger: arrayOfinteger,
		Type:           typ,
	}
}

func (u *EventsCount) UnmarshalJSON(data []byte) error {

	createRequestBulkRetryBulkRetryRequestsRequest2 := CreateRequestBulkRetryBulkRetryRequestsRequest2{}
	if err := utils.UnmarshalJSON(data, &createRequestBulkRetryBulkRetryRequestsRequest2, "", true, true); err == nil {
		u.CreateRequestBulkRetryBulkRetryRequestsRequest2 = &createRequestBulkRetryBulkRetryRequestsRequest2
		u.Type = EventsCountTypeCreateRequestBulkRetryBulkRetryRequestsRequest2
		return nil
	}

	integer := int64(0)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = &integer
		u.Type = EventsCountTypeInteger
		return nil
	}

	arrayOfinteger := []int64{}
	if err := utils.UnmarshalJSON(data, &arrayOfinteger, "", true, true); err == nil {
		u.ArrayOfinteger = arrayOfinteger
		u.Type = EventsCountTypeArrayOfinteger
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u EventsCount) MarshalJSON() ([]byte, error) {
	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.CreateRequestBulkRetryBulkRetryRequestsRequest2 != nil {
		return utils.MarshalJSON(u.CreateRequestBulkRetryBulkRetryRequestsRequest2, "", true)
	}

	if u.ArrayOfinteger != nil {
		return utils.MarshalJSON(u.ArrayOfinteger, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// CreateRequestBulkRetryBulkRetryRequestsRequestRequestBody2 - URL Encoded string of the JSON to match to the data headers
type CreateRequestBulkRetryBulkRetryRequestsRequestRequestBody2 struct {
}

type CreateRequestBulkRetryHeadersType string

const (
	CreateRequestBulkRetryHeadersTypeStr                                                        CreateRequestBulkRetryHeadersType = "str"
	CreateRequestBulkRetryHeadersTypeCreateRequestBulkRetryBulkRetryRequestsRequestRequestBody2 CreateRequestBulkRetryHeadersType = "createRequestBulkRetry_BulkRetryRequests_request_requestBody_2"
)

type CreateRequestBulkRetryHeaders struct {
	Str                                                        *string
	CreateRequestBulkRetryBulkRetryRequestsRequestRequestBody2 *CreateRequestBulkRetryBulkRetryRequestsRequestRequestBody2

	Type CreateRequestBulkRetryHeadersType
}

func CreateCreateRequestBulkRetryHeadersStr(str string) CreateRequestBulkRetryHeaders {
	typ := CreateRequestBulkRetryHeadersTypeStr

	return CreateRequestBulkRetryHeaders{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreateRequestBulkRetryHeadersCreateRequestBulkRetryBulkRetryRequestsRequestRequestBody2(createRequestBulkRetryBulkRetryRequestsRequestRequestBody2 CreateRequestBulkRetryBulkRetryRequestsRequestRequestBody2) CreateRequestBulkRetryHeaders {
	typ := CreateRequestBulkRetryHeadersTypeCreateRequestBulkRetryBulkRetryRequestsRequestRequestBody2

	return CreateRequestBulkRetryHeaders{
		CreateRequestBulkRetryBulkRetryRequestsRequestRequestBody2: &createRequestBulkRetryBulkRetryRequestsRequestRequestBody2,
		Type: typ,
	}
}

func (u *CreateRequestBulkRetryHeaders) UnmarshalJSON(data []byte) error {

	createRequestBulkRetryBulkRetryRequestsRequestRequestBody2 := CreateRequestBulkRetryBulkRetryRequestsRequestRequestBody2{}
	if err := utils.UnmarshalJSON(data, &createRequestBulkRetryBulkRetryRequestsRequestRequestBody2, "", true, true); err == nil {
		u.CreateRequestBulkRetryBulkRetryRequestsRequestRequestBody2 = &createRequestBulkRetryBulkRetryRequestsRequestRequestBody2
		u.Type = CreateRequestBulkRetryHeadersTypeCreateRequestBulkRetryBulkRetryRequestsRequestRequestBody2
		return nil
	}

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CreateRequestBulkRetryHeadersTypeStr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateRequestBulkRetryHeaders) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.CreateRequestBulkRetryBulkRetryRequestsRequestRequestBody2 != nil {
		return utils.MarshalJSON(u.CreateRequestBulkRetryBulkRetryRequestsRequestRequestBody2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateRequestBulkRetryIDType string

const (
	CreateRequestBulkRetryIDTypeStr        CreateRequestBulkRetryIDType = "str"
	CreateRequestBulkRetryIDTypeArrayOfstr CreateRequestBulkRetryIDType = "arrayOfstr"
)

type CreateRequestBulkRetryID struct {
	Str        *string
	ArrayOfstr []string

	Type CreateRequestBulkRetryIDType
}

func CreateCreateRequestBulkRetryIDStr(str string) CreateRequestBulkRetryID {
	typ := CreateRequestBulkRetryIDTypeStr

	return CreateRequestBulkRetryID{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreateRequestBulkRetryIDArrayOfstr(arrayOfstr []string) CreateRequestBulkRetryID {
	typ := CreateRequestBulkRetryIDTypeArrayOfstr

	return CreateRequestBulkRetryID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *CreateRequestBulkRetryID) UnmarshalJSON(data []byte) error {

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CreateRequestBulkRetryIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = CreateRequestBulkRetryIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateRequestBulkRetryID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQuery2 struct {
	Any      *bool  `json:"any,omitempty"`
	Contains *int64 `json:"contains,omitempty"`
	Gt       *int64 `json:"gt,omitempty"`
	Gte      *int64 `json:"gte,omitempty"`
	Le       *int64 `json:"le,omitempty"`
	Lte      *int64 `json:"lte,omitempty"`
}

func (o *CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQuery2) GetAny() *bool {
	if o == nil {
		return nil
	}
	return o.Any
}

func (o *CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQuery2) GetContains() *int64 {
	if o == nil {
		return nil
	}
	return o.Contains
}

func (o *CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQuery2) GetGt() *int64 {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQuery2) GetGte() *int64 {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQuery2) GetLe() *int64 {
	if o == nil {
		return nil
	}
	return o.Le
}

func (o *CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQuery2) GetLte() *int64 {
	if o == nil {
		return nil
	}
	return o.Lte
}

type IgnoredCountType string

const (
	IgnoredCountTypeInteger                                                         IgnoredCountType = "integer"
	IgnoredCountTypeCreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQuery2 IgnoredCountType = "createRequestBulkRetry_BulkRetryRequests_request_requestBody_query_2"
	IgnoredCountTypeArrayOfinteger                                                  IgnoredCountType = "arrayOfinteger"
)

type IgnoredCount struct {
	Integer                                                         *int64
	CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQuery2 *CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQuery2
	ArrayOfinteger                                                  []int64

	Type IgnoredCountType
}

func CreateIgnoredCountInteger(integer int64) IgnoredCount {
	typ := IgnoredCountTypeInteger

	return IgnoredCount{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateIgnoredCountCreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQuery2(createRequestBulkRetryBulkRetryRequestsRequestRequestBodyQuery2 CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQuery2) IgnoredCount {
	typ := IgnoredCountTypeCreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQuery2

	return IgnoredCount{
		CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQuery2: &createRequestBulkRetryBulkRetryRequestsRequestRequestBodyQuery2,
		Type: typ,
	}
}

func CreateIgnoredCountArrayOfinteger(arrayOfinteger []int64) IgnoredCount {
	typ := IgnoredCountTypeArrayOfinteger

	return IgnoredCount{
		ArrayOfinteger: arrayOfinteger,
		Type:           typ,
	}
}

func (u *IgnoredCount) UnmarshalJSON(data []byte) error {

	createRequestBulkRetryBulkRetryRequestsRequestRequestBodyQuery2 := CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQuery2{}
	if err := utils.UnmarshalJSON(data, &createRequestBulkRetryBulkRetryRequestsRequestRequestBodyQuery2, "", true, true); err == nil {
		u.CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQuery2 = &createRequestBulkRetryBulkRetryRequestsRequestRequestBodyQuery2
		u.Type = IgnoredCountTypeCreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQuery2
		return nil
	}

	integer := int64(0)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = &integer
		u.Type = IgnoredCountTypeInteger
		return nil
	}

	arrayOfinteger := []int64{}
	if err := utils.UnmarshalJSON(data, &arrayOfinteger, "", true, true); err == nil {
		u.ArrayOfinteger = arrayOfinteger
		u.Type = IgnoredCountTypeArrayOfinteger
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u IgnoredCount) MarshalJSON() ([]byte, error) {
	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQuery2 != nil {
		return utils.MarshalJSON(u.CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQuery2, "", true)
	}

	if u.ArrayOfinteger != nil {
		return utils.MarshalJSON(u.ArrayOfinteger, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryIngestedAt2 struct {
	Any *bool      `json:"any,omitempty"`
	Gt  *time.Time `json:"gt,omitempty"`
	Gte *time.Time `json:"gte,omitempty"`
	Le  *time.Time `json:"le,omitempty"`
	Lte *time.Time `json:"lte,omitempty"`
}

func (c CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryIngestedAt2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryIngestedAt2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryIngestedAt2) GetAny() *bool {
	if o == nil {
		return nil
	}
	return o.Any
}

func (o *CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryIngestedAt2) GetGt() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryIngestedAt2) GetGte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryIngestedAt2) GetLe() *time.Time {
	if o == nil {
		return nil
	}
	return o.Le
}

func (o *CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryIngestedAt2) GetLte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Lte
}

type IngestedAtType string

const (
	IngestedAtTypeDateTime                                                                  IngestedAtType = "date-time"
	IngestedAtTypeCreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryIngestedAt2 IngestedAtType = "createRequestBulkRetry_BulkRetryRequests_request_requestBody_query_ingested_at_2"
)

type IngestedAt struct {
	DateTime                                                                  *time.Time
	CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryIngestedAt2 *CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryIngestedAt2

	Type IngestedAtType
}

func CreateIngestedAtDateTime(dateTime time.Time) IngestedAt {
	typ := IngestedAtTypeDateTime

	return IngestedAt{
		DateTime: &dateTime,
		Type:     typ,
	}
}

func CreateIngestedAtCreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryIngestedAt2(createRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryIngestedAt2 CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryIngestedAt2) IngestedAt {
	typ := IngestedAtTypeCreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryIngestedAt2

	return IngestedAt{
		CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryIngestedAt2: &createRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryIngestedAt2,
		Type: typ,
	}
}

func (u *IngestedAt) UnmarshalJSON(data []byte) error {

	createRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryIngestedAt2 := CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryIngestedAt2{}
	if err := utils.UnmarshalJSON(data, &createRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryIngestedAt2, "", true, true); err == nil {
		u.CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryIngestedAt2 = &createRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryIngestedAt2
		u.Type = IngestedAtTypeCreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryIngestedAt2
		return nil
	}

	dateTime := time.Time{}
	if err := utils.UnmarshalJSON(data, &dateTime, "", true, true); err == nil {
		u.DateTime = &dateTime
		u.Type = IngestedAtTypeDateTime
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u IngestedAt) MarshalJSON() ([]byte, error) {
	if u.DateTime != nil {
		return utils.MarshalJSON(u.DateTime, "", true)
	}

	if u.CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryIngestedAt2 != nil {
		return utils.MarshalJSON(u.CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryIngestedAt2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryParsedQuery2 - URL Encoded string of the JSON to match to the parsed query (JSON representation of the query)
type CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryParsedQuery2 struct {
}

type CreateRequestBulkRetryParsedQueryType string

const (
	CreateRequestBulkRetryParsedQueryTypeStr                                                                        CreateRequestBulkRetryParsedQueryType = "str"
	CreateRequestBulkRetryParsedQueryTypeCreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryParsedQuery2 CreateRequestBulkRetryParsedQueryType = "createRequestBulkRetry_BulkRetryRequests_request_requestBody_query_parsed_query_2"
)

type CreateRequestBulkRetryParsedQuery struct {
	Str                                                                        *string
	CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryParsedQuery2 *CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryParsedQuery2

	Type CreateRequestBulkRetryParsedQueryType
}

func CreateCreateRequestBulkRetryParsedQueryStr(str string) CreateRequestBulkRetryParsedQuery {
	typ := CreateRequestBulkRetryParsedQueryTypeStr

	return CreateRequestBulkRetryParsedQuery{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreateRequestBulkRetryParsedQueryCreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryParsedQuery2(createRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryParsedQuery2 CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryParsedQuery2) CreateRequestBulkRetryParsedQuery {
	typ := CreateRequestBulkRetryParsedQueryTypeCreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryParsedQuery2

	return CreateRequestBulkRetryParsedQuery{
		CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryParsedQuery2: &createRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryParsedQuery2,
		Type: typ,
	}
}

func (u *CreateRequestBulkRetryParsedQuery) UnmarshalJSON(data []byte) error {

	createRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryParsedQuery2 := CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryParsedQuery2{}
	if err := utils.UnmarshalJSON(data, &createRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryParsedQuery2, "", true, true); err == nil {
		u.CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryParsedQuery2 = &createRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryParsedQuery2
		u.Type = CreateRequestBulkRetryParsedQueryTypeCreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryParsedQuery2
		return nil
	}

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CreateRequestBulkRetryParsedQueryTypeStr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateRequestBulkRetryParsedQuery) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryParsedQuery2 != nil {
		return utils.MarshalJSON(u.CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryParsedQuery2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryRejectionCause2 - Filter by rejection cause
type CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryRejectionCause2 struct {
	Any      *bool                             `json:"any,omitempty"`
	Contains *components.RequestRejectionCause `json:"contains,omitempty"`
	Gt       *components.RequestRejectionCause `json:"gt,omitempty"`
	Gte      *components.RequestRejectionCause `json:"gte,omitempty"`
	Le       *components.RequestRejectionCause `json:"le,omitempty"`
	Lte      *components.RequestRejectionCause `json:"lte,omitempty"`
}

func (o *CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryRejectionCause2) GetAny() *bool {
	if o == nil {
		return nil
	}
	return o.Any
}

func (o *CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryRejectionCause2) GetContains() *components.RequestRejectionCause {
	if o == nil {
		return nil
	}
	return o.Contains
}

func (o *CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryRejectionCause2) GetGt() *components.RequestRejectionCause {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryRejectionCause2) GetGte() *components.RequestRejectionCause {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryRejectionCause2) GetLe() *components.RequestRejectionCause {
	if o == nil {
		return nil
	}
	return o.Le
}

func (o *CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryRejectionCause2) GetLte() *components.RequestRejectionCause {
	if o == nil {
		return nil
	}
	return o.Lte
}

// RequestRejectionCauseSchemas - Filter by rejection cause
type RequestRejectionCauseSchemas string

const (
	RequestRejectionCauseSchemasSourceArchived         RequestRejectionCauseSchemas = "SOURCE_ARCHIVED"
	RequestRejectionCauseSchemasNoWebhook              RequestRejectionCauseSchemas = "NO_WEBHOOK"
	RequestRejectionCauseSchemasVerificationFailed     RequestRejectionCauseSchemas = "VERIFICATION_FAILED"
	RequestRejectionCauseSchemasUnsupportedHTTPMethod  RequestRejectionCauseSchemas = "UNSUPPORTED_HTTP_METHOD"
	RequestRejectionCauseSchemasUnsupportedContentType RequestRejectionCauseSchemas = "UNSUPPORTED_CONTENT_TYPE"
	RequestRejectionCauseSchemasUnparsableJSON         RequestRejectionCauseSchemas = "UNPARSABLE_JSON"
	RequestRejectionCauseSchemasPayloadTooLarge        RequestRejectionCauseSchemas = "PAYLOAD_TOO_LARGE"
	RequestRejectionCauseSchemasIngestionFatal         RequestRejectionCauseSchemas = "INGESTION_FATAL"
	RequestRejectionCauseSchemasUnknown                RequestRejectionCauseSchemas = "UNKNOWN"
)

func (e RequestRejectionCauseSchemas) ToPointer() *RequestRejectionCauseSchemas {
	return &e
}

func (e *RequestRejectionCauseSchemas) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SOURCE_ARCHIVED":
		fallthrough
	case "NO_WEBHOOK":
		fallthrough
	case "VERIFICATION_FAILED":
		fallthrough
	case "UNSUPPORTED_HTTP_METHOD":
		fallthrough
	case "UNSUPPORTED_CONTENT_TYPE":
		fallthrough
	case "UNPARSABLE_JSON":
		fallthrough
	case "PAYLOAD_TOO_LARGE":
		fallthrough
	case "INGESTION_FATAL":
		fallthrough
	case "UNKNOWN":
		*e = RequestRejectionCauseSchemas(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RequestRejectionCauseSchemas: %v", v)
	}
}

type RejectionCauseType string

const (
	RejectionCauseTypeRequestRejectionCauseSchemas                                                  RejectionCauseType = "RequestRejectionCause_Schemas"
	RejectionCauseTypeCreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryRejectionCause2 RejectionCauseType = "createRequestBulkRetry_BulkRetryRequests_request_requestBody_query_rejection_cause_2"
	RejectionCauseTypeArrayOfRequestRejectionCause                                                  RejectionCauseType = "arrayOfRequestRejectionCause"
)

type RejectionCause struct {
	RequestRejectionCauseSchemas                                                  *RequestRejectionCauseSchemas
	CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryRejectionCause2 *CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryRejectionCause2
	ArrayOfRequestRejectionCause                                                  []components.RequestRejectionCause

	Type RejectionCauseType
}

func CreateRejectionCauseRequestRejectionCauseSchemas(requestRejectionCauseSchemas RequestRejectionCauseSchemas) RejectionCause {
	typ := RejectionCauseTypeRequestRejectionCauseSchemas

	return RejectionCause{
		RequestRejectionCauseSchemas: &requestRejectionCauseSchemas,
		Type:                         typ,
	}
}

func CreateRejectionCauseCreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryRejectionCause2(createRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryRejectionCause2 CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryRejectionCause2) RejectionCause {
	typ := RejectionCauseTypeCreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryRejectionCause2

	return RejectionCause{
		CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryRejectionCause2: &createRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryRejectionCause2,
		Type: typ,
	}
}

func CreateRejectionCauseArrayOfRequestRejectionCause(arrayOfRequestRejectionCause []components.RequestRejectionCause) RejectionCause {
	typ := RejectionCauseTypeArrayOfRequestRejectionCause

	return RejectionCause{
		ArrayOfRequestRejectionCause: arrayOfRequestRejectionCause,
		Type:                         typ,
	}
}

func (u *RejectionCause) UnmarshalJSON(data []byte) error {

	createRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryRejectionCause2 := CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryRejectionCause2{}
	if err := utils.UnmarshalJSON(data, &createRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryRejectionCause2, "", true, true); err == nil {
		u.CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryRejectionCause2 = &createRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryRejectionCause2
		u.Type = RejectionCauseTypeCreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryRejectionCause2
		return nil
	}

	requestRejectionCauseSchemas := RequestRejectionCauseSchemas("")
	if err := utils.UnmarshalJSON(data, &requestRejectionCauseSchemas, "", true, true); err == nil {
		u.RequestRejectionCauseSchemas = &requestRejectionCauseSchemas
		u.Type = RejectionCauseTypeRequestRejectionCauseSchemas
		return nil
	}

	arrayOfRequestRejectionCause := []components.RequestRejectionCause{}
	if err := utils.UnmarshalJSON(data, &arrayOfRequestRejectionCause, "", true, true); err == nil {
		u.ArrayOfRequestRejectionCause = arrayOfRequestRejectionCause
		u.Type = RejectionCauseTypeArrayOfRequestRejectionCause
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u RejectionCause) MarshalJSON() ([]byte, error) {
	if u.RequestRejectionCauseSchemas != nil {
		return utils.MarshalJSON(u.RequestRejectionCauseSchemas, "", true)
	}

	if u.CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryRejectionCause2 != nil {
		return utils.MarshalJSON(u.CreateRequestBulkRetryBulkRetryRequestsRequestRequestBodyQueryRejectionCause2, "", true)
	}

	if u.ArrayOfRequestRejectionCause != nil {
		return utils.MarshalJSON(u.ArrayOfRequestRejectionCause, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateRequestBulkRetrySourceIDType string

const (
	CreateRequestBulkRetrySourceIDTypeStr        CreateRequestBulkRetrySourceIDType = "str"
	CreateRequestBulkRetrySourceIDTypeArrayOfstr CreateRequestBulkRetrySourceIDType = "arrayOfstr"
)

type CreateRequestBulkRetrySourceID struct {
	Str        *string
	ArrayOfstr []string

	Type CreateRequestBulkRetrySourceIDType
}

func CreateCreateRequestBulkRetrySourceIDStr(str string) CreateRequestBulkRetrySourceID {
	typ := CreateRequestBulkRetrySourceIDTypeStr

	return CreateRequestBulkRetrySourceID{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreateRequestBulkRetrySourceIDArrayOfstr(arrayOfstr []string) CreateRequestBulkRetrySourceID {
	typ := CreateRequestBulkRetrySourceIDTypeArrayOfstr

	return CreateRequestBulkRetrySourceID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *CreateRequestBulkRetrySourceID) UnmarshalJSON(data []byte) error {

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CreateRequestBulkRetrySourceIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = CreateRequestBulkRetrySourceIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateRequestBulkRetrySourceID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateRequestBulkRetryStatus string

const (
	CreateRequestBulkRetryStatusAccepted CreateRequestBulkRetryStatus = "accepted"
	CreateRequestBulkRetryStatusRejected CreateRequestBulkRetryStatus = "rejected"
)

func (e CreateRequestBulkRetryStatus) ToPointer() *CreateRequestBulkRetryStatus {
	return &e
}

func (e *CreateRequestBulkRetryStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "accepted":
		fallthrough
	case "rejected":
		*e = CreateRequestBulkRetryStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateRequestBulkRetryStatus: %v", v)
	}
}

// CreateRequestBulkRetryQuery - Filter properties for the events to be included in the bulk retry, use query parameters of [Requests](#requests)
type CreateRequestBulkRetryQuery struct {
	// URL Encoded string of the JSON to match to the data body
	Body        *CreateRequestBulkRetryBody        `json:"body,omitempty"`
	BulkRetryID *CreateRequestBulkRetryBulkRetryID `json:"bulk_retry_id,omitempty"`
	CreatedAt   *CreateRequestBulkRetryCreatedAt   `json:"created_at,omitempty"`
	EventsCount *EventsCount                       `json:"events_count,omitempty"`
	// URL Encoded string of the JSON to match to the data headers
	Headers *CreateRequestBulkRetryHeaders `json:"headers,omitempty"`
	// Filter by requests IDs
	ID           *CreateRequestBulkRetryID `json:"id,omitempty"`
	IgnoredCount *IgnoredCount             `json:"ignored_count,omitempty"`
	IngestedAt   *IngestedAt               `json:"ingested_at,omitempty"`
	// URL Encoded string of the JSON to match to the parsed query (JSON representation of the query)
	ParsedQuery *CreateRequestBulkRetryParsedQuery `json:"parsed_query,omitempty"`
	// URL Encoded string of the string to match partially to the path
	Path *string `json:"path,omitempty"`
	// Filter by rejection cause
	RejectionCause *RejectionCause `json:"rejection_cause,omitempty"`
	// URL Encoded string of the string to match partially to the body, headers, parsed_query or path
	SearchTerm *string `json:"search_term,omitempty"`
	// Filter by source IDs
	SourceID *CreateRequestBulkRetrySourceID `json:"source_id,omitempty"`
	Status   *CreateRequestBulkRetryStatus   `json:"status,omitempty"`
	// Filter by verification status
	Verified *bool `json:"verified,omitempty"`
}

func (o *CreateRequestBulkRetryQuery) GetBody() *CreateRequestBulkRetryBody {
	if o == nil {
		return nil
	}
	return o.Body
}

func (o *CreateRequestBulkRetryQuery) GetBulkRetryID() *CreateRequestBulkRetryBulkRetryID {
	if o == nil {
		return nil
	}
	return o.BulkRetryID
}

func (o *CreateRequestBulkRetryQuery) GetCreatedAt() *CreateRequestBulkRetryCreatedAt {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *CreateRequestBulkRetryQuery) GetEventsCount() *EventsCount {
	if o == nil {
		return nil
	}
	return o.EventsCount
}

func (o *CreateRequestBulkRetryQuery) GetHeaders() *CreateRequestBulkRetryHeaders {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *CreateRequestBulkRetryQuery) GetID() *CreateRequestBulkRetryID {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *CreateRequestBulkRetryQuery) GetIgnoredCount() *IgnoredCount {
	if o == nil {
		return nil
	}
	return o.IgnoredCount
}

func (o *CreateRequestBulkRetryQuery) GetIngestedAt() *IngestedAt {
	if o == nil {
		return nil
	}
	return o.IngestedAt
}

func (o *CreateRequestBulkRetryQuery) GetParsedQuery() *CreateRequestBulkRetryParsedQuery {
	if o == nil {
		return nil
	}
	return o.ParsedQuery
}

func (o *CreateRequestBulkRetryQuery) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

func (o *CreateRequestBulkRetryQuery) GetRejectionCause() *RejectionCause {
	if o == nil {
		return nil
	}
	return o.RejectionCause
}

func (o *CreateRequestBulkRetryQuery) GetSearchTerm() *string {
	if o == nil {
		return nil
	}
	return o.SearchTerm
}

func (o *CreateRequestBulkRetryQuery) GetSourceID() *CreateRequestBulkRetrySourceID {
	if o == nil {
		return nil
	}
	return o.SourceID
}

func (o *CreateRequestBulkRetryQuery) GetStatus() *CreateRequestBulkRetryStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *CreateRequestBulkRetryQuery) GetVerified() *bool {
	if o == nil {
		return nil
	}
	return o.Verified
}

type CreateRequestBulkRetryRequestBody struct {
	// Filter properties for the events to be included in the bulk retry, use query parameters of [Requests](#requests)
	Query *CreateRequestBulkRetryQuery `json:"query,omitempty"`
}

func (o *CreateRequestBulkRetryRequestBody) GetQuery() *CreateRequestBulkRetryQuery {
	if o == nil {
		return nil
	}
	return o.Query
}

type CreateRequestBulkRetryResponse struct {
	// A single requests bulk retry
	BatchOperation *components.BatchOperation
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *CreateRequestBulkRetryResponse) GetBatchOperation() *components.BatchOperation {
	if o == nil {
		return nil
	}
	return o.BatchOperation
}

func (o *CreateRequestBulkRetryResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *CreateRequestBulkRetryResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *CreateRequestBulkRetryResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

// GetRequestsQueryParam2 - URL Encoded string of the JSON to match to the data body
type GetRequestsQueryParam2 struct {
}

type GetRequestsQueryParamBodyType string

const (
	GetRequestsQueryParamBodyTypeStr                    GetRequestsQueryParamBodyType = "str"
	GetRequestsQueryParamBodyTypeGetRequestsQueryParam2 GetRequestsQueryParamBodyType = "getRequests_queryParam_2"
)

type GetRequestsQueryParamBody struct {
	Str                    *string
	GetRequestsQueryParam2 *GetRequestsQueryParam2

	Type GetRequestsQueryParamBodyType
}

func CreateGetRequestsQueryParamBodyStr(str string) GetRequestsQueryParamBody {
	typ := GetRequestsQueryParamBodyTypeStr

	return GetRequestsQueryParamBody{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetRequestsQueryParamBodyGetRequestsQueryParam2(getRequestsQueryParam2 GetRequestsQueryParam2) GetRequestsQueryParamBody {
	typ := GetRequestsQueryParamBodyTypeGetRequestsQueryParam2

	return GetRequestsQueryParamBody{
		GetRequestsQueryParam2: &getRequestsQueryParam2,
		Type:                   typ,
	}
}

func (u *GetRequestsQueryParamBody) UnmarshalJSON(data []byte) error {

	getRequestsQueryParam2 := GetRequestsQueryParam2{}
	if err := utils.UnmarshalJSON(data, &getRequestsQueryParam2, "", true, true); err == nil {
		u.GetRequestsQueryParam2 = &getRequestsQueryParam2
		u.Type = GetRequestsQueryParamBodyTypeGetRequestsQueryParam2
		return nil
	}

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GetRequestsQueryParamBodyTypeStr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetRequestsQueryParamBody) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.GetRequestsQueryParam2 != nil {
		return utils.MarshalJSON(u.GetRequestsQueryParam2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetRequestsQueryParamBulkRetryIDType string

const (
	GetRequestsQueryParamBulkRetryIDTypeStr        GetRequestsQueryParamBulkRetryIDType = "str"
	GetRequestsQueryParamBulkRetryIDTypeArrayOfstr GetRequestsQueryParamBulkRetryIDType = "arrayOfstr"
)

type GetRequestsQueryParamBulkRetryID struct {
	Str        *string
	ArrayOfstr []string

	Type GetRequestsQueryParamBulkRetryIDType
}

func CreateGetRequestsQueryParamBulkRetryIDStr(str string) GetRequestsQueryParamBulkRetryID {
	typ := GetRequestsQueryParamBulkRetryIDTypeStr

	return GetRequestsQueryParamBulkRetryID{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetRequestsQueryParamBulkRetryIDArrayOfstr(arrayOfstr []string) GetRequestsQueryParamBulkRetryID {
	typ := GetRequestsQueryParamBulkRetryIDTypeArrayOfstr

	return GetRequestsQueryParamBulkRetryID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *GetRequestsQueryParamBulkRetryID) UnmarshalJSON(data []byte) error {

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GetRequestsQueryParamBulkRetryIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = GetRequestsQueryParamBulkRetryIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetRequestsQueryParamBulkRetryID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetRequestsQueryParamRequests2 struct {
	Any *bool      `queryParam:"name=any"`
	Gt  *time.Time `queryParam:"name=gt"`
	Gte *time.Time `queryParam:"name=gte"`
	Le  *time.Time `queryParam:"name=le"`
	Lte *time.Time `queryParam:"name=lte"`
}

func (g GetRequestsQueryParamRequests2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetRequestsQueryParamRequests2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetRequestsQueryParamRequests2) GetAny() *bool {
	if o == nil {
		return nil
	}
	return o.Any
}

func (o *GetRequestsQueryParamRequests2) GetGt() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *GetRequestsQueryParamRequests2) GetGte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *GetRequestsQueryParamRequests2) GetLe() *time.Time {
	if o == nil {
		return nil
	}
	return o.Le
}

func (o *GetRequestsQueryParamRequests2) GetLte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Lte
}

type GetRequestsQueryParamCreatedAtType string

const (
	GetRequestsQueryParamCreatedAtTypeDateTime                       GetRequestsQueryParamCreatedAtType = "date-time"
	GetRequestsQueryParamCreatedAtTypeGetRequestsQueryParamRequests2 GetRequestsQueryParamCreatedAtType = "getRequests_queryParam_Requests_2"
)

type GetRequestsQueryParamCreatedAt struct {
	DateTime                       *time.Time
	GetRequestsQueryParamRequests2 *GetRequestsQueryParamRequests2

	Type GetRequestsQueryParamCreatedAtType
}

func CreateGetRequestsQueryParamCreatedAtDateTime(dateTime time.Time) GetRequestsQueryParamCreatedAt {
	typ := GetRequestsQueryParamCreatedAtTypeDateTime

	return GetRequestsQueryParamCreatedAt{
		DateTime: &dateTime,
		Type:     typ,
	}
}

func CreateGetRequestsQueryParamCreatedAtGetRequestsQueryParamRequests2(getRequestsQueryParamRequests2 GetRequestsQueryParamRequests2) GetRequestsQueryParamCreatedAt {
	typ := GetRequestsQueryParamCreatedAtTypeGetRequestsQueryParamRequests2

	return GetRequestsQueryParamCreatedAt{
		GetRequestsQueryParamRequests2: &getRequestsQueryParamRequests2,
		Type:                           typ,
	}
}

func (u *GetRequestsQueryParamCreatedAt) UnmarshalJSON(data []byte) error {

	getRequestsQueryParamRequests2 := GetRequestsQueryParamRequests2{}
	if err := utils.UnmarshalJSON(data, &getRequestsQueryParamRequests2, "", true, true); err == nil {
		u.GetRequestsQueryParamRequests2 = &getRequestsQueryParamRequests2
		u.Type = GetRequestsQueryParamCreatedAtTypeGetRequestsQueryParamRequests2
		return nil
	}

	dateTime := time.Time{}
	if err := utils.UnmarshalJSON(data, &dateTime, "", true, true); err == nil {
		u.DateTime = &dateTime
		u.Type = GetRequestsQueryParamCreatedAtTypeDateTime
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetRequestsQueryParamCreatedAt) MarshalJSON() ([]byte, error) {
	if u.DateTime != nil {
		return utils.MarshalJSON(u.DateTime, "", true)
	}

	if u.GetRequestsQueryParamRequests2 != nil {
		return utils.MarshalJSON(u.GetRequestsQueryParamRequests2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetRequestsQueryParamRequestsDir2 string

const (
	GetRequestsQueryParamRequestsDir2Asc  GetRequestsQueryParamRequestsDir2 = "asc"
	GetRequestsQueryParamRequestsDir2Desc GetRequestsQueryParamRequestsDir2 = "desc"
)

func (e GetRequestsQueryParamRequestsDir2) ToPointer() *GetRequestsQueryParamRequestsDir2 {
	return &e
}

func (e *GetRequestsQueryParamRequestsDir2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = GetRequestsQueryParamRequestsDir2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRequestsQueryParamRequestsDir2: %v", v)
	}
}

// GetRequestsQueryParam1 - Sort direction
type GetRequestsQueryParam1 string

const (
	GetRequestsQueryParam1Asc  GetRequestsQueryParam1 = "asc"
	GetRequestsQueryParam1Desc GetRequestsQueryParam1 = "desc"
)

func (e GetRequestsQueryParam1) ToPointer() *GetRequestsQueryParam1 {
	return &e
}

func (e *GetRequestsQueryParam1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = GetRequestsQueryParam1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRequestsQueryParam1: %v", v)
	}
}

type GetRequestsQueryParamDirType string

const (
	GetRequestsQueryParamDirTypeGetRequestsQueryParam1                   GetRequestsQueryParamDirType = "getRequests_queryParam_1"
	GetRequestsQueryParamDirTypeArrayOfgetRequestsQueryParamRequestsDir2 GetRequestsQueryParamDirType = "arrayOfgetRequests_queryParam_Requests_dir_2"
)

type GetRequestsQueryParamDir struct {
	GetRequestsQueryParam1                   *GetRequestsQueryParam1
	ArrayOfgetRequestsQueryParamRequestsDir2 []GetRequestsQueryParamRequestsDir2

	Type GetRequestsQueryParamDirType
}

func CreateGetRequestsQueryParamDirGetRequestsQueryParam1(getRequestsQueryParam1 GetRequestsQueryParam1) GetRequestsQueryParamDir {
	typ := GetRequestsQueryParamDirTypeGetRequestsQueryParam1

	return GetRequestsQueryParamDir{
		GetRequestsQueryParam1: &getRequestsQueryParam1,
		Type:                   typ,
	}
}

func CreateGetRequestsQueryParamDirArrayOfgetRequestsQueryParamRequestsDir2(arrayOfgetRequestsQueryParamRequestsDir2 []GetRequestsQueryParamRequestsDir2) GetRequestsQueryParamDir {
	typ := GetRequestsQueryParamDirTypeArrayOfgetRequestsQueryParamRequestsDir2

	return GetRequestsQueryParamDir{
		ArrayOfgetRequestsQueryParamRequestsDir2: arrayOfgetRequestsQueryParamRequestsDir2,
		Type:                                     typ,
	}
}

func (u *GetRequestsQueryParamDir) UnmarshalJSON(data []byte) error {

	getRequestsQueryParam1 := GetRequestsQueryParam1("")
	if err := utils.UnmarshalJSON(data, &getRequestsQueryParam1, "", true, true); err == nil {
		u.GetRequestsQueryParam1 = &getRequestsQueryParam1
		u.Type = GetRequestsQueryParamDirTypeGetRequestsQueryParam1
		return nil
	}

	arrayOfgetRequestsQueryParamRequestsDir2 := []GetRequestsQueryParamRequestsDir2{}
	if err := utils.UnmarshalJSON(data, &arrayOfgetRequestsQueryParamRequestsDir2, "", true, true); err == nil {
		u.ArrayOfgetRequestsQueryParamRequestsDir2 = arrayOfgetRequestsQueryParamRequestsDir2
		u.Type = GetRequestsQueryParamDirTypeArrayOfgetRequestsQueryParamRequestsDir2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetRequestsQueryParamDir) MarshalJSON() ([]byte, error) {
	if u.GetRequestsQueryParam1 != nil {
		return utils.MarshalJSON(u.GetRequestsQueryParam1, "", true)
	}

	if u.ArrayOfgetRequestsQueryParamRequestsDir2 != nil {
		return utils.MarshalJSON(u.ArrayOfgetRequestsQueryParamRequestsDir2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetRequestsQueryParamRequestsEventsCount2 struct {
	Any      *bool  `queryParam:"name=any"`
	Contains *int64 `queryParam:"name=contains"`
	Gt       *int64 `queryParam:"name=gt"`
	Gte      *int64 `queryParam:"name=gte"`
	Le       *int64 `queryParam:"name=le"`
	Lte      *int64 `queryParam:"name=lte"`
}

func (o *GetRequestsQueryParamRequestsEventsCount2) GetAny() *bool {
	if o == nil {
		return nil
	}
	return o.Any
}

func (o *GetRequestsQueryParamRequestsEventsCount2) GetContains() *int64 {
	if o == nil {
		return nil
	}
	return o.Contains
}

func (o *GetRequestsQueryParamRequestsEventsCount2) GetGt() *int64 {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *GetRequestsQueryParamRequestsEventsCount2) GetGte() *int64 {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *GetRequestsQueryParamRequestsEventsCount2) GetLe() *int64 {
	if o == nil {
		return nil
	}
	return o.Le
}

func (o *GetRequestsQueryParamRequestsEventsCount2) GetLte() *int64 {
	if o == nil {
		return nil
	}
	return o.Lte
}

type QueryParamEventsCountType string

const (
	QueryParamEventsCountTypeInteger                                   QueryParamEventsCountType = "integer"
	QueryParamEventsCountTypeGetRequestsQueryParamRequestsEventsCount2 QueryParamEventsCountType = "getRequests_queryParam_Requests_events_count_2"
	QueryParamEventsCountTypeArrayOfinteger                            QueryParamEventsCountType = "arrayOfinteger"
)

type QueryParamEventsCount struct {
	Integer                                   *int64
	GetRequestsQueryParamRequestsEventsCount2 *GetRequestsQueryParamRequestsEventsCount2
	ArrayOfinteger                            []int64

	Type QueryParamEventsCountType
}

func CreateQueryParamEventsCountInteger(integer int64) QueryParamEventsCount {
	typ := QueryParamEventsCountTypeInteger

	return QueryParamEventsCount{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateQueryParamEventsCountGetRequestsQueryParamRequestsEventsCount2(getRequestsQueryParamRequestsEventsCount2 GetRequestsQueryParamRequestsEventsCount2) QueryParamEventsCount {
	typ := QueryParamEventsCountTypeGetRequestsQueryParamRequestsEventsCount2

	return QueryParamEventsCount{
		GetRequestsQueryParamRequestsEventsCount2: &getRequestsQueryParamRequestsEventsCount2,
		Type: typ,
	}
}

func CreateQueryParamEventsCountArrayOfinteger(arrayOfinteger []int64) QueryParamEventsCount {
	typ := QueryParamEventsCountTypeArrayOfinteger

	return QueryParamEventsCount{
		ArrayOfinteger: arrayOfinteger,
		Type:           typ,
	}
}

func (u *QueryParamEventsCount) UnmarshalJSON(data []byte) error {

	getRequestsQueryParamRequestsEventsCount2 := GetRequestsQueryParamRequestsEventsCount2{}
	if err := utils.UnmarshalJSON(data, &getRequestsQueryParamRequestsEventsCount2, "", true, true); err == nil {
		u.GetRequestsQueryParamRequestsEventsCount2 = &getRequestsQueryParamRequestsEventsCount2
		u.Type = QueryParamEventsCountTypeGetRequestsQueryParamRequestsEventsCount2
		return nil
	}

	integer := int64(0)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = &integer
		u.Type = QueryParamEventsCountTypeInteger
		return nil
	}

	arrayOfinteger := []int64{}
	if err := utils.UnmarshalJSON(data, &arrayOfinteger, "", true, true); err == nil {
		u.ArrayOfinteger = arrayOfinteger
		u.Type = QueryParamEventsCountTypeArrayOfinteger
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u QueryParamEventsCount) MarshalJSON() ([]byte, error) {
	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.GetRequestsQueryParamRequestsEventsCount2 != nil {
		return utils.MarshalJSON(u.GetRequestsQueryParamRequestsEventsCount2, "", true)
	}

	if u.ArrayOfinteger != nil {
		return utils.MarshalJSON(u.ArrayOfinteger, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// GetRequestsQueryParamRequestsHeaders2 - URL Encoded string of the JSON to match to the data headers
type GetRequestsQueryParamRequestsHeaders2 struct {
}

type GetRequestsQueryParamHeadersType string

const (
	GetRequestsQueryParamHeadersTypeStr                                   GetRequestsQueryParamHeadersType = "str"
	GetRequestsQueryParamHeadersTypeGetRequestsQueryParamRequestsHeaders2 GetRequestsQueryParamHeadersType = "getRequests_queryParam_Requests_headers_2"
)

type GetRequestsQueryParamHeaders struct {
	Str                                   *string
	GetRequestsQueryParamRequestsHeaders2 *GetRequestsQueryParamRequestsHeaders2

	Type GetRequestsQueryParamHeadersType
}

func CreateGetRequestsQueryParamHeadersStr(str string) GetRequestsQueryParamHeaders {
	typ := GetRequestsQueryParamHeadersTypeStr

	return GetRequestsQueryParamHeaders{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetRequestsQueryParamHeadersGetRequestsQueryParamRequestsHeaders2(getRequestsQueryParamRequestsHeaders2 GetRequestsQueryParamRequestsHeaders2) GetRequestsQueryParamHeaders {
	typ := GetRequestsQueryParamHeadersTypeGetRequestsQueryParamRequestsHeaders2

	return GetRequestsQueryParamHeaders{
		GetRequestsQueryParamRequestsHeaders2: &getRequestsQueryParamRequestsHeaders2,
		Type:                                  typ,
	}
}

func (u *GetRequestsQueryParamHeaders) UnmarshalJSON(data []byte) error {

	getRequestsQueryParamRequestsHeaders2 := GetRequestsQueryParamRequestsHeaders2{}
	if err := utils.UnmarshalJSON(data, &getRequestsQueryParamRequestsHeaders2, "", true, true); err == nil {
		u.GetRequestsQueryParamRequestsHeaders2 = &getRequestsQueryParamRequestsHeaders2
		u.Type = GetRequestsQueryParamHeadersTypeGetRequestsQueryParamRequestsHeaders2
		return nil
	}

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GetRequestsQueryParamHeadersTypeStr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetRequestsQueryParamHeaders) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.GetRequestsQueryParamRequestsHeaders2 != nil {
		return utils.MarshalJSON(u.GetRequestsQueryParamRequestsHeaders2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetRequestsQueryParamIDType string

const (
	GetRequestsQueryParamIDTypeStr        GetRequestsQueryParamIDType = "str"
	GetRequestsQueryParamIDTypeArrayOfstr GetRequestsQueryParamIDType = "arrayOfstr"
)

type GetRequestsQueryParamID struct {
	Str        *string
	ArrayOfstr []string

	Type GetRequestsQueryParamIDType
}

func CreateGetRequestsQueryParamIDStr(str string) GetRequestsQueryParamID {
	typ := GetRequestsQueryParamIDTypeStr

	return GetRequestsQueryParamID{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetRequestsQueryParamIDArrayOfstr(arrayOfstr []string) GetRequestsQueryParamID {
	typ := GetRequestsQueryParamIDTypeArrayOfstr

	return GetRequestsQueryParamID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *GetRequestsQueryParamID) UnmarshalJSON(data []byte) error {

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GetRequestsQueryParamIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = GetRequestsQueryParamIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetRequestsQueryParamID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetRequestsQueryParamRequestsIgnoredCount2 struct {
	Any      *bool  `queryParam:"name=any"`
	Contains *int64 `queryParam:"name=contains"`
	Gt       *int64 `queryParam:"name=gt"`
	Gte      *int64 `queryParam:"name=gte"`
	Le       *int64 `queryParam:"name=le"`
	Lte      *int64 `queryParam:"name=lte"`
}

func (o *GetRequestsQueryParamRequestsIgnoredCount2) GetAny() *bool {
	if o == nil {
		return nil
	}
	return o.Any
}

func (o *GetRequestsQueryParamRequestsIgnoredCount2) GetContains() *int64 {
	if o == nil {
		return nil
	}
	return o.Contains
}

func (o *GetRequestsQueryParamRequestsIgnoredCount2) GetGt() *int64 {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *GetRequestsQueryParamRequestsIgnoredCount2) GetGte() *int64 {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *GetRequestsQueryParamRequestsIgnoredCount2) GetLe() *int64 {
	if o == nil {
		return nil
	}
	return o.Le
}

func (o *GetRequestsQueryParamRequestsIgnoredCount2) GetLte() *int64 {
	if o == nil {
		return nil
	}
	return o.Lte
}

type QueryParamIgnoredCountType string

const (
	QueryParamIgnoredCountTypeInteger                                    QueryParamIgnoredCountType = "integer"
	QueryParamIgnoredCountTypeGetRequestsQueryParamRequestsIgnoredCount2 QueryParamIgnoredCountType = "getRequests_queryParam_Requests_ignored_count_2"
	QueryParamIgnoredCountTypeArrayOfinteger                             QueryParamIgnoredCountType = "arrayOfinteger"
)

type QueryParamIgnoredCount struct {
	Integer                                    *int64
	GetRequestsQueryParamRequestsIgnoredCount2 *GetRequestsQueryParamRequestsIgnoredCount2
	ArrayOfinteger                             []int64

	Type QueryParamIgnoredCountType
}

func CreateQueryParamIgnoredCountInteger(integer int64) QueryParamIgnoredCount {
	typ := QueryParamIgnoredCountTypeInteger

	return QueryParamIgnoredCount{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateQueryParamIgnoredCountGetRequestsQueryParamRequestsIgnoredCount2(getRequestsQueryParamRequestsIgnoredCount2 GetRequestsQueryParamRequestsIgnoredCount2) QueryParamIgnoredCount {
	typ := QueryParamIgnoredCountTypeGetRequestsQueryParamRequestsIgnoredCount2

	return QueryParamIgnoredCount{
		GetRequestsQueryParamRequestsIgnoredCount2: &getRequestsQueryParamRequestsIgnoredCount2,
		Type: typ,
	}
}

func CreateQueryParamIgnoredCountArrayOfinteger(arrayOfinteger []int64) QueryParamIgnoredCount {
	typ := QueryParamIgnoredCountTypeArrayOfinteger

	return QueryParamIgnoredCount{
		ArrayOfinteger: arrayOfinteger,
		Type:           typ,
	}
}

func (u *QueryParamIgnoredCount) UnmarshalJSON(data []byte) error {

	getRequestsQueryParamRequestsIgnoredCount2 := GetRequestsQueryParamRequestsIgnoredCount2{}
	if err := utils.UnmarshalJSON(data, &getRequestsQueryParamRequestsIgnoredCount2, "", true, true); err == nil {
		u.GetRequestsQueryParamRequestsIgnoredCount2 = &getRequestsQueryParamRequestsIgnoredCount2
		u.Type = QueryParamIgnoredCountTypeGetRequestsQueryParamRequestsIgnoredCount2
		return nil
	}

	integer := int64(0)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = &integer
		u.Type = QueryParamIgnoredCountTypeInteger
		return nil
	}

	arrayOfinteger := []int64{}
	if err := utils.UnmarshalJSON(data, &arrayOfinteger, "", true, true); err == nil {
		u.ArrayOfinteger = arrayOfinteger
		u.Type = QueryParamIgnoredCountTypeArrayOfinteger
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u QueryParamIgnoredCount) MarshalJSON() ([]byte, error) {
	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.GetRequestsQueryParamRequestsIgnoredCount2 != nil {
		return utils.MarshalJSON(u.GetRequestsQueryParamRequestsIgnoredCount2, "", true)
	}

	if u.ArrayOfinteger != nil {
		return utils.MarshalJSON(u.ArrayOfinteger, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetRequestsQueryParamInclude string

const (
	GetRequestsQueryParamIncludeData GetRequestsQueryParamInclude = "data"
)

func (e GetRequestsQueryParamInclude) ToPointer() *GetRequestsQueryParamInclude {
	return &e
}

func (e *GetRequestsQueryParamInclude) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "data":
		*e = GetRequestsQueryParamInclude(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRequestsQueryParamInclude: %v", v)
	}
}

type GetRequestsQueryParamRequestsIngestedAt2 struct {
	Any *bool      `queryParam:"name=any"`
	Gt  *time.Time `queryParam:"name=gt"`
	Gte *time.Time `queryParam:"name=gte"`
	Le  *time.Time `queryParam:"name=le"`
	Lte *time.Time `queryParam:"name=lte"`
}

func (g GetRequestsQueryParamRequestsIngestedAt2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetRequestsQueryParamRequestsIngestedAt2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetRequestsQueryParamRequestsIngestedAt2) GetAny() *bool {
	if o == nil {
		return nil
	}
	return o.Any
}

func (o *GetRequestsQueryParamRequestsIngestedAt2) GetGt() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *GetRequestsQueryParamRequestsIngestedAt2) GetGte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *GetRequestsQueryParamRequestsIngestedAt2) GetLe() *time.Time {
	if o == nil {
		return nil
	}
	return o.Le
}

func (o *GetRequestsQueryParamRequestsIngestedAt2) GetLte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Lte
}

type QueryParamIngestedAtType string

const (
	QueryParamIngestedAtTypeDateTime                                 QueryParamIngestedAtType = "date-time"
	QueryParamIngestedAtTypeGetRequestsQueryParamRequestsIngestedAt2 QueryParamIngestedAtType = "getRequests_queryParam_Requests_ingested_at_2"
)

type QueryParamIngestedAt struct {
	DateTime                                 *time.Time
	GetRequestsQueryParamRequestsIngestedAt2 *GetRequestsQueryParamRequestsIngestedAt2

	Type QueryParamIngestedAtType
}

func CreateQueryParamIngestedAtDateTime(dateTime time.Time) QueryParamIngestedAt {
	typ := QueryParamIngestedAtTypeDateTime

	return QueryParamIngestedAt{
		DateTime: &dateTime,
		Type:     typ,
	}
}

func CreateQueryParamIngestedAtGetRequestsQueryParamRequestsIngestedAt2(getRequestsQueryParamRequestsIngestedAt2 GetRequestsQueryParamRequestsIngestedAt2) QueryParamIngestedAt {
	typ := QueryParamIngestedAtTypeGetRequestsQueryParamRequestsIngestedAt2

	return QueryParamIngestedAt{
		GetRequestsQueryParamRequestsIngestedAt2: &getRequestsQueryParamRequestsIngestedAt2,
		Type:                                     typ,
	}
}

func (u *QueryParamIngestedAt) UnmarshalJSON(data []byte) error {

	getRequestsQueryParamRequestsIngestedAt2 := GetRequestsQueryParamRequestsIngestedAt2{}
	if err := utils.UnmarshalJSON(data, &getRequestsQueryParamRequestsIngestedAt2, "", true, true); err == nil {
		u.GetRequestsQueryParamRequestsIngestedAt2 = &getRequestsQueryParamRequestsIngestedAt2
		u.Type = QueryParamIngestedAtTypeGetRequestsQueryParamRequestsIngestedAt2
		return nil
	}

	dateTime := time.Time{}
	if err := utils.UnmarshalJSON(data, &dateTime, "", true, true); err == nil {
		u.DateTime = &dateTime
		u.Type = QueryParamIngestedAtTypeDateTime
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u QueryParamIngestedAt) MarshalJSON() ([]byte, error) {
	if u.DateTime != nil {
		return utils.MarshalJSON(u.DateTime, "", true)
	}

	if u.GetRequestsQueryParamRequestsIngestedAt2 != nil {
		return utils.MarshalJSON(u.GetRequestsQueryParamRequestsIngestedAt2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetRequestsQueryParamRequestsOrderBy2 string

const (
	GetRequestsQueryParamRequestsOrderBy2IngestedAt GetRequestsQueryParamRequestsOrderBy2 = "ingested_at"
	GetRequestsQueryParamRequestsOrderBy2CreatedAt  GetRequestsQueryParamRequestsOrderBy2 = "created_at"
)

func (e GetRequestsQueryParamRequestsOrderBy2) ToPointer() *GetRequestsQueryParamRequestsOrderBy2 {
	return &e
}

func (e *GetRequestsQueryParamRequestsOrderBy2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ingested_at":
		fallthrough
	case "created_at":
		*e = GetRequestsQueryParamRequestsOrderBy2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRequestsQueryParamRequestsOrderBy2: %v", v)
	}
}

// GetRequestsQueryParamRequests1 - Sort key(s)
type GetRequestsQueryParamRequests1 string

const (
	GetRequestsQueryParamRequests1IngestedAt GetRequestsQueryParamRequests1 = "ingested_at"
	GetRequestsQueryParamRequests1CreatedAt  GetRequestsQueryParamRequests1 = "created_at"
)

func (e GetRequestsQueryParamRequests1) ToPointer() *GetRequestsQueryParamRequests1 {
	return &e
}

func (e *GetRequestsQueryParamRequests1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ingested_at":
		fallthrough
	case "created_at":
		*e = GetRequestsQueryParamRequests1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRequestsQueryParamRequests1: %v", v)
	}
}

type GetRequestsQueryParamOrderByType string

const (
	GetRequestsQueryParamOrderByTypeGetRequestsQueryParamRequests1               GetRequestsQueryParamOrderByType = "getRequests_queryParam_Requests_1"
	GetRequestsQueryParamOrderByTypeArrayOfgetRequestsQueryParamRequestsOrderBy2 GetRequestsQueryParamOrderByType = "arrayOfgetRequests_queryParam_Requests_order_by_2"
)

type GetRequestsQueryParamOrderBy struct {
	GetRequestsQueryParamRequests1               *GetRequestsQueryParamRequests1
	ArrayOfgetRequestsQueryParamRequestsOrderBy2 []GetRequestsQueryParamRequestsOrderBy2

	Type GetRequestsQueryParamOrderByType
}

func CreateGetRequestsQueryParamOrderByGetRequestsQueryParamRequests1(getRequestsQueryParamRequests1 GetRequestsQueryParamRequests1) GetRequestsQueryParamOrderBy {
	typ := GetRequestsQueryParamOrderByTypeGetRequestsQueryParamRequests1

	return GetRequestsQueryParamOrderBy{
		GetRequestsQueryParamRequests1: &getRequestsQueryParamRequests1,
		Type:                           typ,
	}
}

func CreateGetRequestsQueryParamOrderByArrayOfgetRequestsQueryParamRequestsOrderBy2(arrayOfgetRequestsQueryParamRequestsOrderBy2 []GetRequestsQueryParamRequestsOrderBy2) GetRequestsQueryParamOrderBy {
	typ := GetRequestsQueryParamOrderByTypeArrayOfgetRequestsQueryParamRequestsOrderBy2

	return GetRequestsQueryParamOrderBy{
		ArrayOfgetRequestsQueryParamRequestsOrderBy2: arrayOfgetRequestsQueryParamRequestsOrderBy2,
		Type: typ,
	}
}

func (u *GetRequestsQueryParamOrderBy) UnmarshalJSON(data []byte) error {

	getRequestsQueryParamRequests1 := GetRequestsQueryParamRequests1("")
	if err := utils.UnmarshalJSON(data, &getRequestsQueryParamRequests1, "", true, true); err == nil {
		u.GetRequestsQueryParamRequests1 = &getRequestsQueryParamRequests1
		u.Type = GetRequestsQueryParamOrderByTypeGetRequestsQueryParamRequests1
		return nil
	}

	arrayOfgetRequestsQueryParamRequestsOrderBy2 := []GetRequestsQueryParamRequestsOrderBy2{}
	if err := utils.UnmarshalJSON(data, &arrayOfgetRequestsQueryParamRequestsOrderBy2, "", true, true); err == nil {
		u.ArrayOfgetRequestsQueryParamRequestsOrderBy2 = arrayOfgetRequestsQueryParamRequestsOrderBy2
		u.Type = GetRequestsQueryParamOrderByTypeArrayOfgetRequestsQueryParamRequestsOrderBy2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetRequestsQueryParamOrderBy) MarshalJSON() ([]byte, error) {
	if u.GetRequestsQueryParamRequests1 != nil {
		return utils.MarshalJSON(u.GetRequestsQueryParamRequests1, "", true)
	}

	if u.ArrayOfgetRequestsQueryParamRequestsOrderBy2 != nil {
		return utils.MarshalJSON(u.ArrayOfgetRequestsQueryParamRequestsOrderBy2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// GetRequestsQueryParamRequestsParsedQuery2 - URL Encoded string of the JSON to match to the parsed query (JSON representation of the query)
type GetRequestsQueryParamRequestsParsedQuery2 struct {
}

type GetRequestsQueryParamParsedQueryType string

const (
	GetRequestsQueryParamParsedQueryTypeStr                                       GetRequestsQueryParamParsedQueryType = "str"
	GetRequestsQueryParamParsedQueryTypeGetRequestsQueryParamRequestsParsedQuery2 GetRequestsQueryParamParsedQueryType = "getRequests_queryParam_Requests_parsed_query_2"
)

type GetRequestsQueryParamParsedQuery struct {
	Str                                       *string
	GetRequestsQueryParamRequestsParsedQuery2 *GetRequestsQueryParamRequestsParsedQuery2

	Type GetRequestsQueryParamParsedQueryType
}

func CreateGetRequestsQueryParamParsedQueryStr(str string) GetRequestsQueryParamParsedQuery {
	typ := GetRequestsQueryParamParsedQueryTypeStr

	return GetRequestsQueryParamParsedQuery{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetRequestsQueryParamParsedQueryGetRequestsQueryParamRequestsParsedQuery2(getRequestsQueryParamRequestsParsedQuery2 GetRequestsQueryParamRequestsParsedQuery2) GetRequestsQueryParamParsedQuery {
	typ := GetRequestsQueryParamParsedQueryTypeGetRequestsQueryParamRequestsParsedQuery2

	return GetRequestsQueryParamParsedQuery{
		GetRequestsQueryParamRequestsParsedQuery2: &getRequestsQueryParamRequestsParsedQuery2,
		Type: typ,
	}
}

func (u *GetRequestsQueryParamParsedQuery) UnmarshalJSON(data []byte) error {

	getRequestsQueryParamRequestsParsedQuery2 := GetRequestsQueryParamRequestsParsedQuery2{}
	if err := utils.UnmarshalJSON(data, &getRequestsQueryParamRequestsParsedQuery2, "", true, true); err == nil {
		u.GetRequestsQueryParamRequestsParsedQuery2 = &getRequestsQueryParamRequestsParsedQuery2
		u.Type = GetRequestsQueryParamParsedQueryTypeGetRequestsQueryParamRequestsParsedQuery2
		return nil
	}

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GetRequestsQueryParamParsedQueryTypeStr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetRequestsQueryParamParsedQuery) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.GetRequestsQueryParamRequestsParsedQuery2 != nil {
		return utils.MarshalJSON(u.GetRequestsQueryParamRequestsParsedQuery2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// GetRequestsQueryParamRequestsRejectionCause2 - Filter by rejection cause
type GetRequestsQueryParamRequestsRejectionCause2 struct {
	Any      *bool                             `queryParam:"name=any"`
	Contains *components.RequestRejectionCause `queryParam:"name=contains"`
	Gt       *components.RequestRejectionCause `queryParam:"name=gt"`
	Gte      *components.RequestRejectionCause `queryParam:"name=gte"`
	Le       *components.RequestRejectionCause `queryParam:"name=le"`
	Lte      *components.RequestRejectionCause `queryParam:"name=lte"`
}

func (o *GetRequestsQueryParamRequestsRejectionCause2) GetAny() *bool {
	if o == nil {
		return nil
	}
	return o.Any
}

func (o *GetRequestsQueryParamRequestsRejectionCause2) GetContains() *components.RequestRejectionCause {
	if o == nil {
		return nil
	}
	return o.Contains
}

func (o *GetRequestsQueryParamRequestsRejectionCause2) GetGt() *components.RequestRejectionCause {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *GetRequestsQueryParamRequestsRejectionCause2) GetGte() *components.RequestRejectionCause {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *GetRequestsQueryParamRequestsRejectionCause2) GetLe() *components.RequestRejectionCause {
	if o == nil {
		return nil
	}
	return o.Le
}

func (o *GetRequestsQueryParamRequestsRejectionCause2) GetLte() *components.RequestRejectionCause {
	if o == nil {
		return nil
	}
	return o.Lte
}

type QueryParamRejectionCauseType string

const (
	QueryParamRejectionCauseTypeRequestRejectionCauseSchemas                 QueryParamRejectionCauseType = "RequestRejectionCause_Schemas"
	QueryParamRejectionCauseTypeGetRequestsQueryParamRequestsRejectionCause2 QueryParamRejectionCauseType = "getRequests_queryParam_Requests_rejection_cause_2"
	QueryParamRejectionCauseTypeArrayOfRequestRejectionCause                 QueryParamRejectionCauseType = "arrayOfRequestRejectionCause"
)

type QueryParamRejectionCause struct {
	RequestRejectionCauseSchemas                 *RequestRejectionCauseSchemas
	GetRequestsQueryParamRequestsRejectionCause2 *GetRequestsQueryParamRequestsRejectionCause2
	ArrayOfRequestRejectionCause                 []components.RequestRejectionCause

	Type QueryParamRejectionCauseType
}

func CreateQueryParamRejectionCauseRequestRejectionCauseSchemas(requestRejectionCauseSchemas RequestRejectionCauseSchemas) QueryParamRejectionCause {
	typ := QueryParamRejectionCauseTypeRequestRejectionCauseSchemas

	return QueryParamRejectionCause{
		RequestRejectionCauseSchemas: &requestRejectionCauseSchemas,
		Type:                         typ,
	}
}

func CreateQueryParamRejectionCauseGetRequestsQueryParamRequestsRejectionCause2(getRequestsQueryParamRequestsRejectionCause2 GetRequestsQueryParamRequestsRejectionCause2) QueryParamRejectionCause {
	typ := QueryParamRejectionCauseTypeGetRequestsQueryParamRequestsRejectionCause2

	return QueryParamRejectionCause{
		GetRequestsQueryParamRequestsRejectionCause2: &getRequestsQueryParamRequestsRejectionCause2,
		Type: typ,
	}
}

func CreateQueryParamRejectionCauseArrayOfRequestRejectionCause(arrayOfRequestRejectionCause []components.RequestRejectionCause) QueryParamRejectionCause {
	typ := QueryParamRejectionCauseTypeArrayOfRequestRejectionCause

	return QueryParamRejectionCause{
		ArrayOfRequestRejectionCause: arrayOfRequestRejectionCause,
		Type:                         typ,
	}
}

func (u *QueryParamRejectionCause) UnmarshalJSON(data []byte) error {

	getRequestsQueryParamRequestsRejectionCause2 := GetRequestsQueryParamRequestsRejectionCause2{}
	if err := utils.UnmarshalJSON(data, &getRequestsQueryParamRequestsRejectionCause2, "", true, true); err == nil {
		u.GetRequestsQueryParamRequestsRejectionCause2 = &getRequestsQueryParamRequestsRejectionCause2
		u.Type = QueryParamRejectionCauseTypeGetRequestsQueryParamRequestsRejectionCause2
		return nil
	}

	requestRejectionCauseSchemas := RequestRejectionCauseSchemas("")
	if err := utils.UnmarshalJSON(data, &requestRejectionCauseSchemas, "", true, true); err == nil {
		u.RequestRejectionCauseSchemas = &requestRejectionCauseSchemas
		u.Type = QueryParamRejectionCauseTypeRequestRejectionCauseSchemas
		return nil
	}

	arrayOfRequestRejectionCause := []components.RequestRejectionCause{}
	if err := utils.UnmarshalJSON(data, &arrayOfRequestRejectionCause, "", true, true); err == nil {
		u.ArrayOfRequestRejectionCause = arrayOfRequestRejectionCause
		u.Type = QueryParamRejectionCauseTypeArrayOfRequestRejectionCause
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u QueryParamRejectionCause) MarshalJSON() ([]byte, error) {
	if u.RequestRejectionCauseSchemas != nil {
		return utils.MarshalJSON(u.RequestRejectionCauseSchemas, "", true)
	}

	if u.GetRequestsQueryParamRequestsRejectionCause2 != nil {
		return utils.MarshalJSON(u.GetRequestsQueryParamRequestsRejectionCause2, "", true)
	}

	if u.ArrayOfRequestRejectionCause != nil {
		return utils.MarshalJSON(u.ArrayOfRequestRejectionCause, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetRequestsQueryParamSourceIDType string

const (
	GetRequestsQueryParamSourceIDTypeStr        GetRequestsQueryParamSourceIDType = "str"
	GetRequestsQueryParamSourceIDTypeArrayOfstr GetRequestsQueryParamSourceIDType = "arrayOfstr"
)

type GetRequestsQueryParamSourceID struct {
	Str        *string
	ArrayOfstr []string

	Type GetRequestsQueryParamSourceIDType
}

func CreateGetRequestsQueryParamSourceIDStr(str string) GetRequestsQueryParamSourceID {
	typ := GetRequestsQueryParamSourceIDTypeStr

	return GetRequestsQueryParamSourceID{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetRequestsQueryParamSourceIDArrayOfstr(arrayOfstr []string) GetRequestsQueryParamSourceID {
	typ := GetRequestsQueryParamSourceIDTypeArrayOfstr

	return GetRequestsQueryParamSourceID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *GetRequestsQueryParamSourceID) UnmarshalJSON(data []byte) error {

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GetRequestsQueryParamSourceIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = GetRequestsQueryParamSourceIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetRequestsQueryParamSourceID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetRequestsQueryParamStatus string

const (
	GetRequestsQueryParamStatusAccepted GetRequestsQueryParamStatus = "accepted"
	GetRequestsQueryParamStatusRejected GetRequestsQueryParamStatus = "rejected"
)

func (e GetRequestsQueryParamStatus) ToPointer() *GetRequestsQueryParamStatus {
	return &e
}

func (e *GetRequestsQueryParamStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "accepted":
		fallthrough
	case "rejected":
		*e = GetRequestsQueryParamStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRequestsQueryParamStatus: %v", v)
	}
}

type GetRequestsRequest struct {
	Body           *GetRequestsQueryParamBody        `queryParam:"style=form,explode=true,name=body"`
	BulkRetryID    *GetRequestsQueryParamBulkRetryID `queryParam:"style=form,explode=true,name=bulk_retry_id"`
	CreatedAt      *GetRequestsQueryParamCreatedAt   `queryParam:"style=form,explode=true,name=created_at"`
	Dir            *GetRequestsQueryParamDir         `queryParam:"style=form,explode=true,name=dir"`
	EventsCount    *QueryParamEventsCount            `queryParam:"style=form,explode=true,name=events_count"`
	Headers        *GetRequestsQueryParamHeaders     `queryParam:"style=form,explode=true,name=headers"`
	ID             *GetRequestsQueryParamID          `queryParam:"style=form,explode=true,name=id"`
	IgnoredCount   *QueryParamIgnoredCount           `queryParam:"style=form,explode=true,name=ignored_count"`
	Include        *GetRequestsQueryParamInclude     `queryParam:"style=form,explode=true,name=include"`
	IngestedAt     *QueryParamIngestedAt             `queryParam:"style=form,explode=true,name=ingested_at"`
	Limit          *int64                            `queryParam:"style=form,explode=true,name=limit"`
	Next           *string                           `queryParam:"style=form,explode=true,name=next"`
	OrderBy        *GetRequestsQueryParamOrderBy     `queryParam:"style=form,explode=true,name=order_by"`
	ParsedQuery    *GetRequestsQueryParamParsedQuery `queryParam:"style=form,explode=true,name=parsed_query"`
	Path           *string                           `queryParam:"style=form,explode=true,name=path"`
	Prev           *string                           `queryParam:"style=form,explode=true,name=prev"`
	RejectionCause *QueryParamRejectionCause         `queryParam:"style=form,explode=true,name=rejection_cause"`
	SearchTerm     *string                           `queryParam:"style=form,explode=true,name=search_term"`
	SourceID       *GetRequestsQueryParamSourceID    `queryParam:"style=form,explode=true,name=source_id"`
	Status         *GetRequestsQueryParamStatus      `queryParam:"style=form,explode=true,name=status"`
	Verified       *bool                             `queryParam:"style=form,explode=true,name=verified"`
}

func (o *GetRequestsRequest) GetBody() *GetRequestsQueryParamBody {
	if o == nil {
		return nil
	}
	return o.Body
}

func (o *GetRequestsRequest) GetBulkRetryID() *GetRequestsQueryParamBulkRetryID {
	if o == nil {
		return nil
	}
	return o.BulkRetryID
}

func (o *GetRequestsRequest) GetCreatedAt() *GetRequestsQueryParamCreatedAt {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetRequestsRequest) GetDir() *GetRequestsQueryParamDir {
	if o == nil {
		return nil
	}
	return o.Dir
}

func (o *GetRequestsRequest) GetEventsCount() *QueryParamEventsCount {
	if o == nil {
		return nil
	}
	return o.EventsCount
}

func (o *GetRequestsRequest) GetHeaders() *GetRequestsQueryParamHeaders {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *GetRequestsRequest) GetID() *GetRequestsQueryParamID {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *GetRequestsRequest) GetIgnoredCount() *QueryParamIgnoredCount {
	if o == nil {
		return nil
	}
	return o.IgnoredCount
}

func (o *GetRequestsRequest) GetInclude() *GetRequestsQueryParamInclude {
	if o == nil {
		return nil
	}
	return o.Include
}

func (o *GetRequestsRequest) GetIngestedAt() *QueryParamIngestedAt {
	if o == nil {
		return nil
	}
	return o.IngestedAt
}

func (o *GetRequestsRequest) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *GetRequestsRequest) GetNext() *string {
	if o == nil {
		return nil
	}
	return o.Next
}

func (o *GetRequestsRequest) GetOrderBy() *GetRequestsQueryParamOrderBy {
	if o == nil {
		return nil
	}
	return o.OrderBy
}

func (o *GetRequestsRequest) GetParsedQuery() *GetRequestsQueryParamParsedQuery {
	if o == nil {
		return nil
	}
	return o.ParsedQuery
}

func (o *GetRequestsRequest) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

func (o *GetRequestsRequest) GetPrev() *string {
	if o == nil {
		return nil
	}
	return o.Prev
}

func (o *GetRequestsRequest) GetRejectionCause() *QueryParamRejectionCause {
	if o == nil {
		return nil
	}
	return o.RejectionCause
}

func (o *GetRequestsRequest) GetSearchTerm() *string {
	if o == nil {
		return nil
	}
	return o.SearchTerm
}

func (o *GetRequestsRequest) GetSourceID() *GetRequestsQueryParamSourceID {
	if o == nil {
		return nil
	}
	return o.SourceID
}

func (o *GetRequestsRequest) GetStatus() *GetRequestsQueryParamStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *GetRequestsRequest) GetVerified() *bool {
	if o == nil {
		return nil
	}
	return o.Verified
}

type GetRequestsResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// List of requests
	RequestPaginatedResult *components.RequestPaginatedResult
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *GetRequestsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetRequestsResponse) GetRequestPaginatedResult() *components.RequestPaginatedResult {
	if o == nil {
		return nil
	}
	return o.RequestPaginatedResult
}

func (o *GetRequestsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetRequestsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
