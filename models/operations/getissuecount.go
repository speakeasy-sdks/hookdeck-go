// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/speakeasy-sdks/hookdeck-go/internal/utils"
	"github.com/speakeasy-sdks/hookdeck-go/models/components"
	"net/http"
	"time"
)

type GetIssueCountQueryParamErrorCodeType string

const (
	GetIssueCountQueryParamErrorCodeTypeAttemptErrorCode        GetIssueCountQueryParamErrorCodeType = "AttemptErrorCode"
	GetIssueCountQueryParamErrorCodeTypeArrayOfAttemptErrorCode GetIssueCountQueryParamErrorCodeType = "arrayOfAttemptErrorCode"
)

type GetIssueCountQueryParamErrorCode struct {
	AttemptErrorCode        *components.AttemptErrorCode
	ArrayOfAttemptErrorCode []components.AttemptErrorCode

	Type GetIssueCountQueryParamErrorCodeType
}

func CreateGetIssueCountQueryParamErrorCodeAttemptErrorCode(attemptErrorCode components.AttemptErrorCode) GetIssueCountQueryParamErrorCode {
	typ := GetIssueCountQueryParamErrorCodeTypeAttemptErrorCode

	return GetIssueCountQueryParamErrorCode{
		AttemptErrorCode: &attemptErrorCode,
		Type:             typ,
	}
}

func CreateGetIssueCountQueryParamErrorCodeArrayOfAttemptErrorCode(arrayOfAttemptErrorCode []components.AttemptErrorCode) GetIssueCountQueryParamErrorCode {
	typ := GetIssueCountQueryParamErrorCodeTypeArrayOfAttemptErrorCode

	return GetIssueCountQueryParamErrorCode{
		ArrayOfAttemptErrorCode: arrayOfAttemptErrorCode,
		Type:                    typ,
	}
}

func (u *GetIssueCountQueryParamErrorCode) UnmarshalJSON(data []byte) error {

	attemptErrorCode := components.AttemptErrorCode("")
	if err := utils.UnmarshalJSON(data, &attemptErrorCode, "", true, true); err == nil {
		u.AttemptErrorCode = &attemptErrorCode
		u.Type = GetIssueCountQueryParamErrorCodeTypeAttemptErrorCode
		return nil
	}

	arrayOfAttemptErrorCode := []components.AttemptErrorCode{}
	if err := utils.UnmarshalJSON(data, &arrayOfAttemptErrorCode, "", true, true); err == nil {
		u.ArrayOfAttemptErrorCode = arrayOfAttemptErrorCode
		u.Type = GetIssueCountQueryParamErrorCodeTypeArrayOfAttemptErrorCode
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetIssueCountQueryParamErrorCode) MarshalJSON() ([]byte, error) {
	if u.AttemptErrorCode != nil {
		return utils.MarshalJSON(u.AttemptErrorCode, "", true)
	}

	if u.ArrayOfAttemptErrorCode != nil {
		return utils.MarshalJSON(u.ArrayOfAttemptErrorCode, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetIssueCountQueryParamResponseStatusType string

const (
	GetIssueCountQueryParamResponseStatusTypeFloat32        GetIssueCountQueryParamResponseStatusType = "float32"
	GetIssueCountQueryParamResponseStatusTypeArrayOffloat32 GetIssueCountQueryParamResponseStatusType = "arrayOffloat32"
)

type GetIssueCountQueryParamResponseStatus struct {
	Float32        *float32
	ArrayOffloat32 []float32

	Type GetIssueCountQueryParamResponseStatusType
}

func CreateGetIssueCountQueryParamResponseStatusFloat32(float32T float32) GetIssueCountQueryParamResponseStatus {
	typ := GetIssueCountQueryParamResponseStatusTypeFloat32

	return GetIssueCountQueryParamResponseStatus{
		Float32: &float32T,
		Type:    typ,
	}
}

func CreateGetIssueCountQueryParamResponseStatusArrayOffloat32(arrayOffloat32 []float32) GetIssueCountQueryParamResponseStatus {
	typ := GetIssueCountQueryParamResponseStatusTypeArrayOffloat32

	return GetIssueCountQueryParamResponseStatus{
		ArrayOffloat32: arrayOffloat32,
		Type:           typ,
	}
}

func (u *GetIssueCountQueryParamResponseStatus) UnmarshalJSON(data []byte) error {

	float32Var := float32(0)
	if err := utils.UnmarshalJSON(data, &float32Var, "", true, true); err == nil {
		u.Float32 = &float32Var
		u.Type = GetIssueCountQueryParamResponseStatusTypeFloat32
		return nil
	}

	arrayOffloat32 := []float32{}
	if err := utils.UnmarshalJSON(data, &arrayOffloat32, "", true, true); err == nil {
		u.ArrayOffloat32 = arrayOffloat32
		u.Type = GetIssueCountQueryParamResponseStatusTypeArrayOffloat32
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetIssueCountQueryParamResponseStatus) MarshalJSON() ([]byte, error) {
	if u.Float32 != nil {
		return utils.MarshalJSON(u.Float32, "", true)
	}

	if u.ArrayOffloat32 != nil {
		return utils.MarshalJSON(u.ArrayOffloat32, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetIssueCountQueryParamWebhookIDType string

const (
	GetIssueCountQueryParamWebhookIDTypeStr        GetIssueCountQueryParamWebhookIDType = "str"
	GetIssueCountQueryParamWebhookIDTypeArrayOfstr GetIssueCountQueryParamWebhookIDType = "arrayOfstr"
)

type GetIssueCountQueryParamWebhookID struct {
	Str        *string
	ArrayOfstr []string

	Type GetIssueCountQueryParamWebhookIDType
}

func CreateGetIssueCountQueryParamWebhookIDStr(str string) GetIssueCountQueryParamWebhookID {
	typ := GetIssueCountQueryParamWebhookIDTypeStr

	return GetIssueCountQueryParamWebhookID{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetIssueCountQueryParamWebhookIDArrayOfstr(arrayOfstr []string) GetIssueCountQueryParamWebhookID {
	typ := GetIssueCountQueryParamWebhookIDTypeArrayOfstr

	return GetIssueCountQueryParamWebhookID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *GetIssueCountQueryParamWebhookID) UnmarshalJSON(data []byte) error {

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GetIssueCountQueryParamWebhookIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = GetIssueCountQueryParamWebhookIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetIssueCountQueryParamWebhookID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// QueryParamAggregationKeys - Filter by aggregation keys
type QueryParamAggregationKeys struct {
	ErrorCode      *GetIssueCountQueryParamErrorCode      `queryParam:"name=error_code"`
	ResponseStatus *GetIssueCountQueryParamResponseStatus `queryParam:"name=response_status"`
	WebhookID      *GetIssueCountQueryParamWebhookID      `queryParam:"name=webhook_id"`
}

func (o *QueryParamAggregationKeys) GetErrorCode() *GetIssueCountQueryParamErrorCode {
	if o == nil {
		return nil
	}
	return o.ErrorCode
}

func (o *QueryParamAggregationKeys) GetResponseStatus() *GetIssueCountQueryParamResponseStatus {
	if o == nil {
		return nil
	}
	return o.ResponseStatus
}

func (o *QueryParamAggregationKeys) GetWebhookID() *GetIssueCountQueryParamWebhookID {
	if o == nil {
		return nil
	}
	return o.WebhookID
}

type GetIssueCountQueryParam2 struct {
	Any *bool      `queryParam:"name=any"`
	Gt  *time.Time `queryParam:"name=gt"`
	Gte *time.Time `queryParam:"name=gte"`
	Le  *time.Time `queryParam:"name=le"`
	Lte *time.Time `queryParam:"name=lte"`
}

func (g GetIssueCountQueryParam2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetIssueCountQueryParam2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetIssueCountQueryParam2) GetAny() *bool {
	if o == nil {
		return nil
	}
	return o.Any
}

func (o *GetIssueCountQueryParam2) GetGt() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *GetIssueCountQueryParam2) GetGte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *GetIssueCountQueryParam2) GetLe() *time.Time {
	if o == nil {
		return nil
	}
	return o.Le
}

func (o *GetIssueCountQueryParam2) GetLte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Lte
}

type GetIssueCountQueryParamCreatedAtType string

const (
	GetIssueCountQueryParamCreatedAtTypeDateTime                 GetIssueCountQueryParamCreatedAtType = "date-time"
	GetIssueCountQueryParamCreatedAtTypeGetIssueCountQueryParam2 GetIssueCountQueryParamCreatedAtType = "getIssueCount_queryParam_2"
)

// GetIssueCountQueryParamCreatedAt - Filter by created dates
type GetIssueCountQueryParamCreatedAt struct {
	DateTime                 *time.Time
	GetIssueCountQueryParam2 *GetIssueCountQueryParam2

	Type GetIssueCountQueryParamCreatedAtType
}

func CreateGetIssueCountQueryParamCreatedAtDateTime(dateTime time.Time) GetIssueCountQueryParamCreatedAt {
	typ := GetIssueCountQueryParamCreatedAtTypeDateTime

	return GetIssueCountQueryParamCreatedAt{
		DateTime: &dateTime,
		Type:     typ,
	}
}

func CreateGetIssueCountQueryParamCreatedAtGetIssueCountQueryParam2(getIssueCountQueryParam2 GetIssueCountQueryParam2) GetIssueCountQueryParamCreatedAt {
	typ := GetIssueCountQueryParamCreatedAtTypeGetIssueCountQueryParam2

	return GetIssueCountQueryParamCreatedAt{
		GetIssueCountQueryParam2: &getIssueCountQueryParam2,
		Type:                     typ,
	}
}

func (u *GetIssueCountQueryParamCreatedAt) UnmarshalJSON(data []byte) error {

	getIssueCountQueryParam2 := GetIssueCountQueryParam2{}
	if err := utils.UnmarshalJSON(data, &getIssueCountQueryParam2, "", true, true); err == nil {
		u.GetIssueCountQueryParam2 = &getIssueCountQueryParam2
		u.Type = GetIssueCountQueryParamCreatedAtTypeGetIssueCountQueryParam2
		return nil
	}

	dateTime := time.Time{}
	if err := utils.UnmarshalJSON(data, &dateTime, "", true, true); err == nil {
		u.DateTime = &dateTime
		u.Type = GetIssueCountQueryParamCreatedAtTypeDateTime
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetIssueCountQueryParamCreatedAt) MarshalJSON() ([]byte, error) {
	if u.DateTime != nil {
		return utils.MarshalJSON(u.DateTime, "", true)
	}

	if u.GetIssueCountQueryParam2 != nil {
		return utils.MarshalJSON(u.GetIssueCountQueryParam2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetIssueCountQueryParamIssuesCount2 string

const (
	GetIssueCountQueryParamIssuesCount2Asc  GetIssueCountQueryParamIssuesCount2 = "asc"
	GetIssueCountQueryParamIssuesCount2Desc GetIssueCountQueryParamIssuesCount2 = "desc"
)

func (e GetIssueCountQueryParamIssuesCount2) ToPointer() *GetIssueCountQueryParamIssuesCount2 {
	return &e
}

func (e *GetIssueCountQueryParamIssuesCount2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = GetIssueCountQueryParamIssuesCount2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetIssueCountQueryParamIssuesCount2: %v", v)
	}
}

type GetIssueCountQueryParam1 string

const (
	GetIssueCountQueryParam1Asc  GetIssueCountQueryParam1 = "asc"
	GetIssueCountQueryParam1Desc GetIssueCountQueryParam1 = "desc"
)

func (e GetIssueCountQueryParam1) ToPointer() *GetIssueCountQueryParam1 {
	return &e
}

func (e *GetIssueCountQueryParam1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = GetIssueCountQueryParam1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetIssueCountQueryParam1: %v", v)
	}
}

type GetIssueCountQueryParamDirType string

const (
	GetIssueCountQueryParamDirTypeGetIssueCountQueryParam1                   GetIssueCountQueryParamDirType = "getIssueCount_queryParam_1"
	GetIssueCountQueryParamDirTypeArrayOfgetIssueCountQueryParamIssuesCount2 GetIssueCountQueryParamDirType = "arrayOfgetIssueCount_queryParam_IssuesCount_2"
)

// GetIssueCountQueryParamDir - Sort direction
type GetIssueCountQueryParamDir struct {
	GetIssueCountQueryParam1                   *GetIssueCountQueryParam1
	ArrayOfgetIssueCountQueryParamIssuesCount2 []GetIssueCountQueryParamIssuesCount2

	Type GetIssueCountQueryParamDirType
}

func CreateGetIssueCountQueryParamDirGetIssueCountQueryParam1(getIssueCountQueryParam1 GetIssueCountQueryParam1) GetIssueCountQueryParamDir {
	typ := GetIssueCountQueryParamDirTypeGetIssueCountQueryParam1

	return GetIssueCountQueryParamDir{
		GetIssueCountQueryParam1: &getIssueCountQueryParam1,
		Type:                     typ,
	}
}

func CreateGetIssueCountQueryParamDirArrayOfgetIssueCountQueryParamIssuesCount2(arrayOfgetIssueCountQueryParamIssuesCount2 []GetIssueCountQueryParamIssuesCount2) GetIssueCountQueryParamDir {
	typ := GetIssueCountQueryParamDirTypeArrayOfgetIssueCountQueryParamIssuesCount2

	return GetIssueCountQueryParamDir{
		ArrayOfgetIssueCountQueryParamIssuesCount2: arrayOfgetIssueCountQueryParamIssuesCount2,
		Type: typ,
	}
}

func (u *GetIssueCountQueryParamDir) UnmarshalJSON(data []byte) error {

	getIssueCountQueryParam1 := GetIssueCountQueryParam1("")
	if err := utils.UnmarshalJSON(data, &getIssueCountQueryParam1, "", true, true); err == nil {
		u.GetIssueCountQueryParam1 = &getIssueCountQueryParam1
		u.Type = GetIssueCountQueryParamDirTypeGetIssueCountQueryParam1
		return nil
	}

	arrayOfgetIssueCountQueryParamIssuesCount2 := []GetIssueCountQueryParamIssuesCount2{}
	if err := utils.UnmarshalJSON(data, &arrayOfgetIssueCountQueryParamIssuesCount2, "", true, true); err == nil {
		u.ArrayOfgetIssueCountQueryParamIssuesCount2 = arrayOfgetIssueCountQueryParamIssuesCount2
		u.Type = GetIssueCountQueryParamDirTypeArrayOfgetIssueCountQueryParamIssuesCount2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetIssueCountQueryParamDir) MarshalJSON() ([]byte, error) {
	if u.GetIssueCountQueryParam1 != nil {
		return utils.MarshalJSON(u.GetIssueCountQueryParam1, "", true)
	}

	if u.ArrayOfgetIssueCountQueryParamIssuesCount2 != nil {
		return utils.MarshalJSON(u.ArrayOfgetIssueCountQueryParamIssuesCount2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetIssueCountQueryParamIssuesCountDismissedAt2 struct {
	Any *bool      `queryParam:"name=any"`
	Gt  *time.Time `queryParam:"name=gt"`
	Gte *time.Time `queryParam:"name=gte"`
	Le  *time.Time `queryParam:"name=le"`
	Lte *time.Time `queryParam:"name=lte"`
}

func (g GetIssueCountQueryParamIssuesCountDismissedAt2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetIssueCountQueryParamIssuesCountDismissedAt2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetIssueCountQueryParamIssuesCountDismissedAt2) GetAny() *bool {
	if o == nil {
		return nil
	}
	return o.Any
}

func (o *GetIssueCountQueryParamIssuesCountDismissedAt2) GetGt() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *GetIssueCountQueryParamIssuesCountDismissedAt2) GetGte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *GetIssueCountQueryParamIssuesCountDismissedAt2) GetLe() *time.Time {
	if o == nil {
		return nil
	}
	return o.Le
}

func (o *GetIssueCountQueryParamIssuesCountDismissedAt2) GetLte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Lte
}

type QueryParamDismissedAtType string

const (
	QueryParamDismissedAtTypeDateTime                                       QueryParamDismissedAtType = "date-time"
	QueryParamDismissedAtTypeGetIssueCountQueryParamIssuesCountDismissedAt2 QueryParamDismissedAtType = "getIssueCount_queryParam_IssuesCount_dismissed_at_2"
)

// QueryParamDismissedAt - Filter by dismissed dates
type QueryParamDismissedAt struct {
	DateTime                                       *time.Time
	GetIssueCountQueryParamIssuesCountDismissedAt2 *GetIssueCountQueryParamIssuesCountDismissedAt2

	Type QueryParamDismissedAtType
}

func CreateQueryParamDismissedAtDateTime(dateTime time.Time) QueryParamDismissedAt {
	typ := QueryParamDismissedAtTypeDateTime

	return QueryParamDismissedAt{
		DateTime: &dateTime,
		Type:     typ,
	}
}

func CreateQueryParamDismissedAtGetIssueCountQueryParamIssuesCountDismissedAt2(getIssueCountQueryParamIssuesCountDismissedAt2 GetIssueCountQueryParamIssuesCountDismissedAt2) QueryParamDismissedAt {
	typ := QueryParamDismissedAtTypeGetIssueCountQueryParamIssuesCountDismissedAt2

	return QueryParamDismissedAt{
		GetIssueCountQueryParamIssuesCountDismissedAt2: &getIssueCountQueryParamIssuesCountDismissedAt2,
		Type: typ,
	}
}

func (u *QueryParamDismissedAt) UnmarshalJSON(data []byte) error {

	getIssueCountQueryParamIssuesCountDismissedAt2 := GetIssueCountQueryParamIssuesCountDismissedAt2{}
	if err := utils.UnmarshalJSON(data, &getIssueCountQueryParamIssuesCountDismissedAt2, "", true, true); err == nil {
		u.GetIssueCountQueryParamIssuesCountDismissedAt2 = &getIssueCountQueryParamIssuesCountDismissedAt2
		u.Type = QueryParamDismissedAtTypeGetIssueCountQueryParamIssuesCountDismissedAt2
		return nil
	}

	dateTime := time.Time{}
	if err := utils.UnmarshalJSON(data, &dateTime, "", true, true); err == nil {
		u.DateTime = &dateTime
		u.Type = QueryParamDismissedAtTypeDateTime
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u QueryParamDismissedAt) MarshalJSON() ([]byte, error) {
	if u.DateTime != nil {
		return utils.MarshalJSON(u.DateTime, "", true)
	}

	if u.GetIssueCountQueryParamIssuesCountDismissedAt2 != nil {
		return utils.MarshalJSON(u.GetIssueCountQueryParamIssuesCountDismissedAt2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetIssueCountQueryParamIssuesCountFirstSeenAt2 struct {
	Any *bool      `queryParam:"name=any"`
	Gt  *time.Time `queryParam:"name=gt"`
	Gte *time.Time `queryParam:"name=gte"`
	Le  *time.Time `queryParam:"name=le"`
	Lte *time.Time `queryParam:"name=lte"`
}

func (g GetIssueCountQueryParamIssuesCountFirstSeenAt2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetIssueCountQueryParamIssuesCountFirstSeenAt2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetIssueCountQueryParamIssuesCountFirstSeenAt2) GetAny() *bool {
	if o == nil {
		return nil
	}
	return o.Any
}

func (o *GetIssueCountQueryParamIssuesCountFirstSeenAt2) GetGt() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *GetIssueCountQueryParamIssuesCountFirstSeenAt2) GetGte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *GetIssueCountQueryParamIssuesCountFirstSeenAt2) GetLe() *time.Time {
	if o == nil {
		return nil
	}
	return o.Le
}

func (o *GetIssueCountQueryParamIssuesCountFirstSeenAt2) GetLte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Lte
}

type QueryParamFirstSeenAtType string

const (
	QueryParamFirstSeenAtTypeDateTime                                       QueryParamFirstSeenAtType = "date-time"
	QueryParamFirstSeenAtTypeGetIssueCountQueryParamIssuesCountFirstSeenAt2 QueryParamFirstSeenAtType = "getIssueCount_queryParam_IssuesCount_first_seen_at_2"
)

// QueryParamFirstSeenAt - Filter by first seen dates
type QueryParamFirstSeenAt struct {
	DateTime                                       *time.Time
	GetIssueCountQueryParamIssuesCountFirstSeenAt2 *GetIssueCountQueryParamIssuesCountFirstSeenAt2

	Type QueryParamFirstSeenAtType
}

func CreateQueryParamFirstSeenAtDateTime(dateTime time.Time) QueryParamFirstSeenAt {
	typ := QueryParamFirstSeenAtTypeDateTime

	return QueryParamFirstSeenAt{
		DateTime: &dateTime,
		Type:     typ,
	}
}

func CreateQueryParamFirstSeenAtGetIssueCountQueryParamIssuesCountFirstSeenAt2(getIssueCountQueryParamIssuesCountFirstSeenAt2 GetIssueCountQueryParamIssuesCountFirstSeenAt2) QueryParamFirstSeenAt {
	typ := QueryParamFirstSeenAtTypeGetIssueCountQueryParamIssuesCountFirstSeenAt2

	return QueryParamFirstSeenAt{
		GetIssueCountQueryParamIssuesCountFirstSeenAt2: &getIssueCountQueryParamIssuesCountFirstSeenAt2,
		Type: typ,
	}
}

func (u *QueryParamFirstSeenAt) UnmarshalJSON(data []byte) error {

	getIssueCountQueryParamIssuesCountFirstSeenAt2 := GetIssueCountQueryParamIssuesCountFirstSeenAt2{}
	if err := utils.UnmarshalJSON(data, &getIssueCountQueryParamIssuesCountFirstSeenAt2, "", true, true); err == nil {
		u.GetIssueCountQueryParamIssuesCountFirstSeenAt2 = &getIssueCountQueryParamIssuesCountFirstSeenAt2
		u.Type = QueryParamFirstSeenAtTypeGetIssueCountQueryParamIssuesCountFirstSeenAt2
		return nil
	}

	dateTime := time.Time{}
	if err := utils.UnmarshalJSON(data, &dateTime, "", true, true); err == nil {
		u.DateTime = &dateTime
		u.Type = QueryParamFirstSeenAtTypeDateTime
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u QueryParamFirstSeenAt) MarshalJSON() ([]byte, error) {
	if u.DateTime != nil {
		return utils.MarshalJSON(u.DateTime, "", true)
	}

	if u.GetIssueCountQueryParamIssuesCountFirstSeenAt2 != nil {
		return utils.MarshalJSON(u.GetIssueCountQueryParamIssuesCountFirstSeenAt2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetIssueCountQueryParamIDType string

const (
	GetIssueCountQueryParamIDTypeStr        GetIssueCountQueryParamIDType = "str"
	GetIssueCountQueryParamIDTypeArrayOfstr GetIssueCountQueryParamIDType = "arrayOfstr"
)

// GetIssueCountQueryParamID - Filter by Issue IDs
type GetIssueCountQueryParamID struct {
	Str        *string
	ArrayOfstr []string

	Type GetIssueCountQueryParamIDType
}

func CreateGetIssueCountQueryParamIDStr(str string) GetIssueCountQueryParamID {
	typ := GetIssueCountQueryParamIDTypeStr

	return GetIssueCountQueryParamID{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetIssueCountQueryParamIDArrayOfstr(arrayOfstr []string) GetIssueCountQueryParamID {
	typ := GetIssueCountQueryParamIDTypeArrayOfstr

	return GetIssueCountQueryParamID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *GetIssueCountQueryParamID) UnmarshalJSON(data []byte) error {

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GetIssueCountQueryParamIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = GetIssueCountQueryParamIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetIssueCountQueryParamID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type QueryParamIssueTriggerIDType string

const (
	QueryParamIssueTriggerIDTypeStr        QueryParamIssueTriggerIDType = "str"
	QueryParamIssueTriggerIDTypeArrayOfstr QueryParamIssueTriggerIDType = "arrayOfstr"
)

// QueryParamIssueTriggerID - Filter by Issue trigger IDs
type QueryParamIssueTriggerID struct {
	Str        *string
	ArrayOfstr []string

	Type QueryParamIssueTriggerIDType
}

func CreateQueryParamIssueTriggerIDStr(str string) QueryParamIssueTriggerID {
	typ := QueryParamIssueTriggerIDTypeStr

	return QueryParamIssueTriggerID{
		Str:  &str,
		Type: typ,
	}
}

func CreateQueryParamIssueTriggerIDArrayOfstr(arrayOfstr []string) QueryParamIssueTriggerID {
	typ := QueryParamIssueTriggerIDTypeArrayOfstr

	return QueryParamIssueTriggerID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *QueryParamIssueTriggerID) UnmarshalJSON(data []byte) error {

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = QueryParamIssueTriggerIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = QueryParamIssueTriggerIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u QueryParamIssueTriggerID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetIssueCountQueryParamIssuesCountLastSeenAt2 struct {
	Any *bool      `queryParam:"name=any"`
	Gt  *time.Time `queryParam:"name=gt"`
	Gte *time.Time `queryParam:"name=gte"`
	Le  *time.Time `queryParam:"name=le"`
	Lte *time.Time `queryParam:"name=lte"`
}

func (g GetIssueCountQueryParamIssuesCountLastSeenAt2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetIssueCountQueryParamIssuesCountLastSeenAt2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetIssueCountQueryParamIssuesCountLastSeenAt2) GetAny() *bool {
	if o == nil {
		return nil
	}
	return o.Any
}

func (o *GetIssueCountQueryParamIssuesCountLastSeenAt2) GetGt() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *GetIssueCountQueryParamIssuesCountLastSeenAt2) GetGte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *GetIssueCountQueryParamIssuesCountLastSeenAt2) GetLe() *time.Time {
	if o == nil {
		return nil
	}
	return o.Le
}

func (o *GetIssueCountQueryParamIssuesCountLastSeenAt2) GetLte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Lte
}

type QueryParamLastSeenAtType string

const (
	QueryParamLastSeenAtTypeDateTime                                      QueryParamLastSeenAtType = "date-time"
	QueryParamLastSeenAtTypeGetIssueCountQueryParamIssuesCountLastSeenAt2 QueryParamLastSeenAtType = "getIssueCount_queryParam_IssuesCount_last_seen_at_2"
)

// QueryParamLastSeenAt - Filter by last seen dates
type QueryParamLastSeenAt struct {
	DateTime                                      *time.Time
	GetIssueCountQueryParamIssuesCountLastSeenAt2 *GetIssueCountQueryParamIssuesCountLastSeenAt2

	Type QueryParamLastSeenAtType
}

func CreateQueryParamLastSeenAtDateTime(dateTime time.Time) QueryParamLastSeenAt {
	typ := QueryParamLastSeenAtTypeDateTime

	return QueryParamLastSeenAt{
		DateTime: &dateTime,
		Type:     typ,
	}
}

func CreateQueryParamLastSeenAtGetIssueCountQueryParamIssuesCountLastSeenAt2(getIssueCountQueryParamIssuesCountLastSeenAt2 GetIssueCountQueryParamIssuesCountLastSeenAt2) QueryParamLastSeenAt {
	typ := QueryParamLastSeenAtTypeGetIssueCountQueryParamIssuesCountLastSeenAt2

	return QueryParamLastSeenAt{
		GetIssueCountQueryParamIssuesCountLastSeenAt2: &getIssueCountQueryParamIssuesCountLastSeenAt2,
		Type: typ,
	}
}

func (u *QueryParamLastSeenAt) UnmarshalJSON(data []byte) error {

	getIssueCountQueryParamIssuesCountLastSeenAt2 := GetIssueCountQueryParamIssuesCountLastSeenAt2{}
	if err := utils.UnmarshalJSON(data, &getIssueCountQueryParamIssuesCountLastSeenAt2, "", true, true); err == nil {
		u.GetIssueCountQueryParamIssuesCountLastSeenAt2 = &getIssueCountQueryParamIssuesCountLastSeenAt2
		u.Type = QueryParamLastSeenAtTypeGetIssueCountQueryParamIssuesCountLastSeenAt2
		return nil
	}

	dateTime := time.Time{}
	if err := utils.UnmarshalJSON(data, &dateTime, "", true, true); err == nil {
		u.DateTime = &dateTime
		u.Type = QueryParamLastSeenAtTypeDateTime
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u QueryParamLastSeenAt) MarshalJSON() ([]byte, error) {
	if u.DateTime != nil {
		return utils.MarshalJSON(u.DateTime, "", true)
	}

	if u.GetIssueCountQueryParamIssuesCountLastSeenAt2 != nil {
		return utils.MarshalJSON(u.GetIssueCountQueryParamIssuesCountLastSeenAt2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type QueryParamMergedWithType string

const (
	QueryParamMergedWithTypeStr        QueryParamMergedWithType = "str"
	QueryParamMergedWithTypeArrayOfstr QueryParamMergedWithType = "arrayOfstr"
)

// QueryParamMergedWith - Filter by Merged Issue IDs
type QueryParamMergedWith struct {
	Str        *string
	ArrayOfstr []string

	Type QueryParamMergedWithType
}

func CreateQueryParamMergedWithStr(str string) QueryParamMergedWith {
	typ := QueryParamMergedWithTypeStr

	return QueryParamMergedWith{
		Str:  &str,
		Type: typ,
	}
}

func CreateQueryParamMergedWithArrayOfstr(arrayOfstr []string) QueryParamMergedWith {
	typ := QueryParamMergedWithTypeArrayOfstr

	return QueryParamMergedWith{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *QueryParamMergedWith) UnmarshalJSON(data []byte) error {

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = QueryParamMergedWithTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = QueryParamMergedWithTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u QueryParamMergedWith) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetIssueCountQueryParamIssuesCountOrderBy2 string

const (
	GetIssueCountQueryParamIssuesCountOrderBy2CreatedAt   GetIssueCountQueryParamIssuesCountOrderBy2 = "created_at"
	GetIssueCountQueryParamIssuesCountOrderBy2FirstSeenAt GetIssueCountQueryParamIssuesCountOrderBy2 = "first_seen_at"
	GetIssueCountQueryParamIssuesCountOrderBy2LastSeenAt  GetIssueCountQueryParamIssuesCountOrderBy2 = "last_seen_at"
	GetIssueCountQueryParamIssuesCountOrderBy2OpenedAt    GetIssueCountQueryParamIssuesCountOrderBy2 = "opened_at"
	GetIssueCountQueryParamIssuesCountOrderBy2Status      GetIssueCountQueryParamIssuesCountOrderBy2 = "status"
)

func (e GetIssueCountQueryParamIssuesCountOrderBy2) ToPointer() *GetIssueCountQueryParamIssuesCountOrderBy2 {
	return &e
}

func (e *GetIssueCountQueryParamIssuesCountOrderBy2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "created_at":
		fallthrough
	case "first_seen_at":
		fallthrough
	case "last_seen_at":
		fallthrough
	case "opened_at":
		fallthrough
	case "status":
		*e = GetIssueCountQueryParamIssuesCountOrderBy2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetIssueCountQueryParamIssuesCountOrderBy2: %v", v)
	}
}

type GetIssueCountQueryParamIssuesCount1 string

const (
	GetIssueCountQueryParamIssuesCount1CreatedAt   GetIssueCountQueryParamIssuesCount1 = "created_at"
	GetIssueCountQueryParamIssuesCount1FirstSeenAt GetIssueCountQueryParamIssuesCount1 = "first_seen_at"
	GetIssueCountQueryParamIssuesCount1LastSeenAt  GetIssueCountQueryParamIssuesCount1 = "last_seen_at"
	GetIssueCountQueryParamIssuesCount1OpenedAt    GetIssueCountQueryParamIssuesCount1 = "opened_at"
	GetIssueCountQueryParamIssuesCount1Status      GetIssueCountQueryParamIssuesCount1 = "status"
)

func (e GetIssueCountQueryParamIssuesCount1) ToPointer() *GetIssueCountQueryParamIssuesCount1 {
	return &e
}

func (e *GetIssueCountQueryParamIssuesCount1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "created_at":
		fallthrough
	case "first_seen_at":
		fallthrough
	case "last_seen_at":
		fallthrough
	case "opened_at":
		fallthrough
	case "status":
		*e = GetIssueCountQueryParamIssuesCount1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetIssueCountQueryParamIssuesCount1: %v", v)
	}
}

type GetIssueCountQueryParamOrderByType string

const (
	GetIssueCountQueryParamOrderByTypeGetIssueCountQueryParamIssuesCount1               GetIssueCountQueryParamOrderByType = "getIssueCount_queryParam_IssuesCount_1"
	GetIssueCountQueryParamOrderByTypeArrayOfgetIssueCountQueryParamIssuesCountOrderBy2 GetIssueCountQueryParamOrderByType = "arrayOfgetIssueCount_queryParam_IssuesCount_order_by_2"
)

// GetIssueCountQueryParamOrderBy - Sort key(s)
type GetIssueCountQueryParamOrderBy struct {
	GetIssueCountQueryParamIssuesCount1               *GetIssueCountQueryParamIssuesCount1
	ArrayOfgetIssueCountQueryParamIssuesCountOrderBy2 []GetIssueCountQueryParamIssuesCountOrderBy2

	Type GetIssueCountQueryParamOrderByType
}

func CreateGetIssueCountQueryParamOrderByGetIssueCountQueryParamIssuesCount1(getIssueCountQueryParamIssuesCount1 GetIssueCountQueryParamIssuesCount1) GetIssueCountQueryParamOrderBy {
	typ := GetIssueCountQueryParamOrderByTypeGetIssueCountQueryParamIssuesCount1

	return GetIssueCountQueryParamOrderBy{
		GetIssueCountQueryParamIssuesCount1: &getIssueCountQueryParamIssuesCount1,
		Type:                                typ,
	}
}

func CreateGetIssueCountQueryParamOrderByArrayOfgetIssueCountQueryParamIssuesCountOrderBy2(arrayOfgetIssueCountQueryParamIssuesCountOrderBy2 []GetIssueCountQueryParamIssuesCountOrderBy2) GetIssueCountQueryParamOrderBy {
	typ := GetIssueCountQueryParamOrderByTypeArrayOfgetIssueCountQueryParamIssuesCountOrderBy2

	return GetIssueCountQueryParamOrderBy{
		ArrayOfgetIssueCountQueryParamIssuesCountOrderBy2: arrayOfgetIssueCountQueryParamIssuesCountOrderBy2,
		Type: typ,
	}
}

func (u *GetIssueCountQueryParamOrderBy) UnmarshalJSON(data []byte) error {

	getIssueCountQueryParamIssuesCount1 := GetIssueCountQueryParamIssuesCount1("")
	if err := utils.UnmarshalJSON(data, &getIssueCountQueryParamIssuesCount1, "", true, true); err == nil {
		u.GetIssueCountQueryParamIssuesCount1 = &getIssueCountQueryParamIssuesCount1
		u.Type = GetIssueCountQueryParamOrderByTypeGetIssueCountQueryParamIssuesCount1
		return nil
	}

	arrayOfgetIssueCountQueryParamIssuesCountOrderBy2 := []GetIssueCountQueryParamIssuesCountOrderBy2{}
	if err := utils.UnmarshalJSON(data, &arrayOfgetIssueCountQueryParamIssuesCountOrderBy2, "", true, true); err == nil {
		u.ArrayOfgetIssueCountQueryParamIssuesCountOrderBy2 = arrayOfgetIssueCountQueryParamIssuesCountOrderBy2
		u.Type = GetIssueCountQueryParamOrderByTypeArrayOfgetIssueCountQueryParamIssuesCountOrderBy2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetIssueCountQueryParamOrderBy) MarshalJSON() ([]byte, error) {
	if u.GetIssueCountQueryParamIssuesCount1 != nil {
		return utils.MarshalJSON(u.GetIssueCountQueryParamIssuesCount1, "", true)
	}

	if u.ArrayOfgetIssueCountQueryParamIssuesCountOrderBy2 != nil {
		return utils.MarshalJSON(u.ArrayOfgetIssueCountQueryParamIssuesCountOrderBy2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// GetIssueCountQueryParamIssuesCountStatus2 - Issue status
type GetIssueCountQueryParamIssuesCountStatus2 string

const (
	GetIssueCountQueryParamIssuesCountStatus2Opened       GetIssueCountQueryParamIssuesCountStatus2 = "OPENED"
	GetIssueCountQueryParamIssuesCountStatus2Ignored      GetIssueCountQueryParamIssuesCountStatus2 = "IGNORED"
	GetIssueCountQueryParamIssuesCountStatus2Acknowledged GetIssueCountQueryParamIssuesCountStatus2 = "ACKNOWLEDGED"
	GetIssueCountQueryParamIssuesCountStatus2Resolved     GetIssueCountQueryParamIssuesCountStatus2 = "RESOLVED"
)

func (e GetIssueCountQueryParamIssuesCountStatus2) ToPointer() *GetIssueCountQueryParamIssuesCountStatus2 {
	return &e
}

func (e *GetIssueCountQueryParamIssuesCountStatus2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OPENED":
		fallthrough
	case "IGNORED":
		fallthrough
	case "ACKNOWLEDGED":
		fallthrough
	case "RESOLVED":
		*e = GetIssueCountQueryParamIssuesCountStatus2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetIssueCountQueryParamIssuesCountStatus2: %v", v)
	}
}

// GetIssueCountQueryParamIssuesCountStatus1 - Issue status
type GetIssueCountQueryParamIssuesCountStatus1 string

const (
	GetIssueCountQueryParamIssuesCountStatus1Opened       GetIssueCountQueryParamIssuesCountStatus1 = "OPENED"
	GetIssueCountQueryParamIssuesCountStatus1Ignored      GetIssueCountQueryParamIssuesCountStatus1 = "IGNORED"
	GetIssueCountQueryParamIssuesCountStatus1Acknowledged GetIssueCountQueryParamIssuesCountStatus1 = "ACKNOWLEDGED"
	GetIssueCountQueryParamIssuesCountStatus1Resolved     GetIssueCountQueryParamIssuesCountStatus1 = "RESOLVED"
)

func (e GetIssueCountQueryParamIssuesCountStatus1) ToPointer() *GetIssueCountQueryParamIssuesCountStatus1 {
	return &e
}

func (e *GetIssueCountQueryParamIssuesCountStatus1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OPENED":
		fallthrough
	case "IGNORED":
		fallthrough
	case "ACKNOWLEDGED":
		fallthrough
	case "RESOLVED":
		*e = GetIssueCountQueryParamIssuesCountStatus1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetIssueCountQueryParamIssuesCountStatus1: %v", v)
	}
}

type GetIssueCountQueryParamStatusType string

const (
	GetIssueCountQueryParamStatusTypeGetIssueCountQueryParamIssuesCountStatus1        GetIssueCountQueryParamStatusType = "getIssueCount_queryParam_IssuesCount_status_1"
	GetIssueCountQueryParamStatusTypeArrayOfgetIssueCountQueryParamIssuesCountStatus2 GetIssueCountQueryParamStatusType = "arrayOfgetIssueCount_queryParam_IssuesCount_status_2"
)

// GetIssueCountQueryParamStatus - Filter by Issue statuses
type GetIssueCountQueryParamStatus struct {
	GetIssueCountQueryParamIssuesCountStatus1        *GetIssueCountQueryParamIssuesCountStatus1
	ArrayOfgetIssueCountQueryParamIssuesCountStatus2 []GetIssueCountQueryParamIssuesCountStatus2

	Type GetIssueCountQueryParamStatusType
}

func CreateGetIssueCountQueryParamStatusGetIssueCountQueryParamIssuesCountStatus1(getIssueCountQueryParamIssuesCountStatus1 GetIssueCountQueryParamIssuesCountStatus1) GetIssueCountQueryParamStatus {
	typ := GetIssueCountQueryParamStatusTypeGetIssueCountQueryParamIssuesCountStatus1

	return GetIssueCountQueryParamStatus{
		GetIssueCountQueryParamIssuesCountStatus1: &getIssueCountQueryParamIssuesCountStatus1,
		Type: typ,
	}
}

func CreateGetIssueCountQueryParamStatusArrayOfgetIssueCountQueryParamIssuesCountStatus2(arrayOfgetIssueCountQueryParamIssuesCountStatus2 []GetIssueCountQueryParamIssuesCountStatus2) GetIssueCountQueryParamStatus {
	typ := GetIssueCountQueryParamStatusTypeArrayOfgetIssueCountQueryParamIssuesCountStatus2

	return GetIssueCountQueryParamStatus{
		ArrayOfgetIssueCountQueryParamIssuesCountStatus2: arrayOfgetIssueCountQueryParamIssuesCountStatus2,
		Type: typ,
	}
}

func (u *GetIssueCountQueryParamStatus) UnmarshalJSON(data []byte) error {

	getIssueCountQueryParamIssuesCountStatus1 := GetIssueCountQueryParamIssuesCountStatus1("")
	if err := utils.UnmarshalJSON(data, &getIssueCountQueryParamIssuesCountStatus1, "", true, true); err == nil {
		u.GetIssueCountQueryParamIssuesCountStatus1 = &getIssueCountQueryParamIssuesCountStatus1
		u.Type = GetIssueCountQueryParamStatusTypeGetIssueCountQueryParamIssuesCountStatus1
		return nil
	}

	arrayOfgetIssueCountQueryParamIssuesCountStatus2 := []GetIssueCountQueryParamIssuesCountStatus2{}
	if err := utils.UnmarshalJSON(data, &arrayOfgetIssueCountQueryParamIssuesCountStatus2, "", true, true); err == nil {
		u.ArrayOfgetIssueCountQueryParamIssuesCountStatus2 = arrayOfgetIssueCountQueryParamIssuesCountStatus2
		u.Type = GetIssueCountQueryParamStatusTypeArrayOfgetIssueCountQueryParamIssuesCountStatus2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetIssueCountQueryParamStatus) MarshalJSON() ([]byte, error) {
	if u.GetIssueCountQueryParamIssuesCountStatus1 != nil {
		return utils.MarshalJSON(u.GetIssueCountQueryParamIssuesCountStatus1, "", true)
	}

	if u.ArrayOfgetIssueCountQueryParamIssuesCountStatus2 != nil {
		return utils.MarshalJSON(u.ArrayOfgetIssueCountQueryParamIssuesCountStatus2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// GetIssueCountQueryParamIssuesCountType2 - Issue type
type GetIssueCountQueryParamIssuesCountType2 string

const (
	GetIssueCountQueryParamIssuesCountType2Delivery       GetIssueCountQueryParamIssuesCountType2 = "delivery"
	GetIssueCountQueryParamIssuesCountType2Transformation GetIssueCountQueryParamIssuesCountType2 = "transformation"
	GetIssueCountQueryParamIssuesCountType2Backpressure   GetIssueCountQueryParamIssuesCountType2 = "backpressure"
)

func (e GetIssueCountQueryParamIssuesCountType2) ToPointer() *GetIssueCountQueryParamIssuesCountType2 {
	return &e
}

func (e *GetIssueCountQueryParamIssuesCountType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "delivery":
		fallthrough
	case "transformation":
		fallthrough
	case "backpressure":
		*e = GetIssueCountQueryParamIssuesCountType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetIssueCountQueryParamIssuesCountType2: %v", v)
	}
}

// GetIssueCountQueryParamIssuesCountType1 - Issue type
type GetIssueCountQueryParamIssuesCountType1 string

const (
	GetIssueCountQueryParamIssuesCountType1Delivery       GetIssueCountQueryParamIssuesCountType1 = "delivery"
	GetIssueCountQueryParamIssuesCountType1Transformation GetIssueCountQueryParamIssuesCountType1 = "transformation"
	GetIssueCountQueryParamIssuesCountType1Backpressure   GetIssueCountQueryParamIssuesCountType1 = "backpressure"
)

func (e GetIssueCountQueryParamIssuesCountType1) ToPointer() *GetIssueCountQueryParamIssuesCountType1 {
	return &e
}

func (e *GetIssueCountQueryParamIssuesCountType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "delivery":
		fallthrough
	case "transformation":
		fallthrough
	case "backpressure":
		*e = GetIssueCountQueryParamIssuesCountType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetIssueCountQueryParamIssuesCountType1: %v", v)
	}
}

type QueryParamTypeType string

const (
	QueryParamTypeTypeGetIssueCountQueryParamIssuesCountType1        QueryParamTypeType = "getIssueCount_queryParam_IssuesCount_type_1"
	QueryParamTypeTypeArrayOfgetIssueCountQueryParamIssuesCountType2 QueryParamTypeType = "arrayOfgetIssueCount_queryParam_IssuesCount_type_2"
)

// QueryParamType - Filter by Issue types
type QueryParamType struct {
	GetIssueCountQueryParamIssuesCountType1        *GetIssueCountQueryParamIssuesCountType1
	ArrayOfgetIssueCountQueryParamIssuesCountType2 []GetIssueCountQueryParamIssuesCountType2

	Type QueryParamTypeType
}

func CreateQueryParamTypeGetIssueCountQueryParamIssuesCountType1(getIssueCountQueryParamIssuesCountType1 GetIssueCountQueryParamIssuesCountType1) QueryParamType {
	typ := QueryParamTypeTypeGetIssueCountQueryParamIssuesCountType1

	return QueryParamType{
		GetIssueCountQueryParamIssuesCountType1: &getIssueCountQueryParamIssuesCountType1,
		Type:                                    typ,
	}
}

func CreateQueryParamTypeArrayOfgetIssueCountQueryParamIssuesCountType2(arrayOfgetIssueCountQueryParamIssuesCountType2 []GetIssueCountQueryParamIssuesCountType2) QueryParamType {
	typ := QueryParamTypeTypeArrayOfgetIssueCountQueryParamIssuesCountType2

	return QueryParamType{
		ArrayOfgetIssueCountQueryParamIssuesCountType2: arrayOfgetIssueCountQueryParamIssuesCountType2,
		Type: typ,
	}
}

func (u *QueryParamType) UnmarshalJSON(data []byte) error {

	getIssueCountQueryParamIssuesCountType1 := GetIssueCountQueryParamIssuesCountType1("")
	if err := utils.UnmarshalJSON(data, &getIssueCountQueryParamIssuesCountType1, "", true, true); err == nil {
		u.GetIssueCountQueryParamIssuesCountType1 = &getIssueCountQueryParamIssuesCountType1
		u.Type = QueryParamTypeTypeGetIssueCountQueryParamIssuesCountType1
		return nil
	}

	arrayOfgetIssueCountQueryParamIssuesCountType2 := []GetIssueCountQueryParamIssuesCountType2{}
	if err := utils.UnmarshalJSON(data, &arrayOfgetIssueCountQueryParamIssuesCountType2, "", true, true); err == nil {
		u.ArrayOfgetIssueCountQueryParamIssuesCountType2 = arrayOfgetIssueCountQueryParamIssuesCountType2
		u.Type = QueryParamTypeTypeArrayOfgetIssueCountQueryParamIssuesCountType2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u QueryParamType) MarshalJSON() ([]byte, error) {
	if u.GetIssueCountQueryParamIssuesCountType1 != nil {
		return utils.MarshalJSON(u.GetIssueCountQueryParamIssuesCountType1, "", true)
	}

	if u.ArrayOfgetIssueCountQueryParamIssuesCountType2 != nil {
		return utils.MarshalJSON(u.ArrayOfgetIssueCountQueryParamIssuesCountType2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetIssueCountRequest struct {
	// Filter by aggregation keys
	AggregationKeys *QueryParamAggregationKeys `queryParam:"style=form,explode=true,name=aggregation_keys"`
	// Filter by created dates
	CreatedAt *GetIssueCountQueryParamCreatedAt `queryParam:"style=form,explode=true,name=created_at"`
	// Sort direction
	Dir *GetIssueCountQueryParamDir `queryParam:"style=form,explode=true,name=dir"`
	// Filter by dismissed dates
	DismissedAt *QueryParamDismissedAt `queryParam:"style=form,explode=true,name=dismissed_at"`
	// Filter by first seen dates
	FirstSeenAt *QueryParamFirstSeenAt `queryParam:"style=form,explode=true,name=first_seen_at"`
	// Filter by Issue IDs
	ID *GetIssueCountQueryParamID `queryParam:"style=form,explode=true,name=id"`
	// Filter by Issue trigger IDs
	IssueTriggerID *QueryParamIssueTriggerID `queryParam:"style=form,explode=true,name=issue_trigger_id"`
	// Filter by last seen dates
	LastSeenAt *QueryParamLastSeenAt `queryParam:"style=form,explode=true,name=last_seen_at"`
	Limit      *int64                `queryParam:"style=form,explode=true,name=limit"`
	// Filter by Merged Issue IDs
	MergedWith *QueryParamMergedWith `queryParam:"style=form,explode=true,name=merged_with"`
	Next       *string               `queryParam:"style=form,explode=true,name=next"`
	// Sort key(s)
	OrderBy *GetIssueCountQueryParamOrderBy `queryParam:"style=form,explode=true,name=order_by"`
	Prev    *string                         `queryParam:"style=form,explode=true,name=prev"`
	// Filter by Issue statuses
	Status *GetIssueCountQueryParamStatus `queryParam:"style=form,explode=true,name=status"`
	// Filter by Issue types
	Type *QueryParamType `queryParam:"style=form,explode=true,name=type"`
}

func (o *GetIssueCountRequest) GetAggregationKeys() *QueryParamAggregationKeys {
	if o == nil {
		return nil
	}
	return o.AggregationKeys
}

func (o *GetIssueCountRequest) GetCreatedAt() *GetIssueCountQueryParamCreatedAt {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetIssueCountRequest) GetDir() *GetIssueCountQueryParamDir {
	if o == nil {
		return nil
	}
	return o.Dir
}

func (o *GetIssueCountRequest) GetDismissedAt() *QueryParamDismissedAt {
	if o == nil {
		return nil
	}
	return o.DismissedAt
}

func (o *GetIssueCountRequest) GetFirstSeenAt() *QueryParamFirstSeenAt {
	if o == nil {
		return nil
	}
	return o.FirstSeenAt
}

func (o *GetIssueCountRequest) GetID() *GetIssueCountQueryParamID {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *GetIssueCountRequest) GetIssueTriggerID() *QueryParamIssueTriggerID {
	if o == nil {
		return nil
	}
	return o.IssueTriggerID
}

func (o *GetIssueCountRequest) GetLastSeenAt() *QueryParamLastSeenAt {
	if o == nil {
		return nil
	}
	return o.LastSeenAt
}

func (o *GetIssueCountRequest) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *GetIssueCountRequest) GetMergedWith() *QueryParamMergedWith {
	if o == nil {
		return nil
	}
	return o.MergedWith
}

func (o *GetIssueCountRequest) GetNext() *string {
	if o == nil {
		return nil
	}
	return o.Next
}

func (o *GetIssueCountRequest) GetOrderBy() *GetIssueCountQueryParamOrderBy {
	if o == nil {
		return nil
	}
	return o.OrderBy
}

func (o *GetIssueCountRequest) GetPrev() *string {
	if o == nil {
		return nil
	}
	return o.Prev
}

func (o *GetIssueCountRequest) GetStatus() *GetIssueCountQueryParamStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *GetIssueCountRequest) GetType() *QueryParamType {
	if o == nil {
		return nil
	}
	return o.Type
}

type GetIssueCountResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// Issue count
	IssueCount *components.IssueCount
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *GetIssueCountResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetIssueCountResponse) GetIssueCount() *components.IssueCount {
	if o == nil {
		return nil
	}
	return o.IssueCount
}

func (o *GetIssueCountResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetIssueCountResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
