// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"errors"
	"github.com/speakeasy-sdks/hookdeck-go/internal/utils"
	"github.com/speakeasy-sdks/hookdeck-go/models/components"
	"net/http"
	"time"
)

type Two struct {
	Any      *bool  `json:"any,omitempty"`
	Contains *int64 `json:"contains,omitempty"`
	Gt       *int64 `json:"gt,omitempty"`
	Gte      *int64 `json:"gte,omitempty"`
	Le       *int64 `json:"le,omitempty"`
	Lte      *int64 `json:"lte,omitempty"`
}

func (o *Two) GetAny() *bool {
	if o == nil {
		return nil
	}
	return o.Any
}

func (o *Two) GetContains() *int64 {
	if o == nil {
		return nil
	}
	return o.Contains
}

func (o *Two) GetGt() *int64 {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *Two) GetGte() *int64 {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *Two) GetLe() *int64 {
	if o == nil {
		return nil
	}
	return o.Le
}

func (o *Two) GetLte() *int64 {
	if o == nil {
		return nil
	}
	return o.Lte
}

type AttemptsType string

const (
	AttemptsTypeInteger AttemptsType = "integer"
	AttemptsTypeTwo     AttemptsType = "2"
)

// Attempts - Filter by number of attempts
type Attempts struct {
	Integer *int64
	Two     *Two

	Type AttemptsType
}

func CreateAttemptsInteger(integer int64) Attempts {
	typ := AttemptsTypeInteger

	return Attempts{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateAttemptsTwo(two Two) Attempts {
	typ := AttemptsTypeTwo

	return Attempts{
		Two:  &two,
		Type: typ,
	}
}

func (u *Attempts) UnmarshalJSON(data []byte) error {

	two := Two{}
	if err := utils.UnmarshalJSON(data, &two, "", true, true); err == nil {
		u.Two = &two
		u.Type = AttemptsTypeTwo
		return nil
	}

	integer := int64(0)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = &integer
		u.Type = AttemptsTypeInteger
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u Attempts) MarshalJSON() ([]byte, error) {
	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.Two != nil {
		return utils.MarshalJSON(u.Two, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateEventBulkRetry2 struct {
}

type BodyType string

const (
	BodyTypeStr                   BodyType = "str"
	BodyTypeCreateEventBulkRetry2 BodyType = "createEventBulkRetry_2"
)

// Body - URL Encoded string of the JSON to match to the data body
type Body struct {
	Str                   *string
	CreateEventBulkRetry2 *CreateEventBulkRetry2

	Type BodyType
}

func CreateBodyStr(str string) Body {
	typ := BodyTypeStr

	return Body{
		Str:  &str,
		Type: typ,
	}
}

func CreateBodyCreateEventBulkRetry2(createEventBulkRetry2 CreateEventBulkRetry2) Body {
	typ := BodyTypeCreateEventBulkRetry2

	return Body{
		CreateEventBulkRetry2: &createEventBulkRetry2,
		Type:                  typ,
	}
}

func (u *Body) UnmarshalJSON(data []byte) error {

	createEventBulkRetry2 := CreateEventBulkRetry2{}
	if err := utils.UnmarshalJSON(data, &createEventBulkRetry2, "", true, true); err == nil {
		u.CreateEventBulkRetry2 = &createEventBulkRetry2
		u.Type = BodyTypeCreateEventBulkRetry2
		return nil
	}

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = BodyTypeStr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u Body) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.CreateEventBulkRetry2 != nil {
		return utils.MarshalJSON(u.CreateEventBulkRetry2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type BulkRetryIDType string

const (
	BulkRetryIDTypeStr        BulkRetryIDType = "str"
	BulkRetryIDTypeArrayOfstr BulkRetryIDType = "arrayOfstr"
)

type BulkRetryID struct {
	Str        *string
	ArrayOfstr []string

	Type BulkRetryIDType
}

func CreateBulkRetryIDStr(str string) BulkRetryID {
	typ := BulkRetryIDTypeStr

	return BulkRetryID{
		Str:  &str,
		Type: typ,
	}
}

func CreateBulkRetryIDArrayOfstr(arrayOfstr []string) BulkRetryID {
	typ := BulkRetryIDTypeArrayOfstr

	return BulkRetryID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *BulkRetryID) UnmarshalJSON(data []byte) error {

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = BulkRetryIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = BulkRetryIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u BulkRetryID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateEventBulkRetryBulkRetryEvent2 struct {
	Any *bool `json:"any,omitempty"`
}

func (o *CreateEventBulkRetryBulkRetryEvent2) GetAny() *bool {
	if o == nil {
		return nil
	}
	return o.Any
}

type CliIDType string

const (
	CliIDTypeStr                                 CliIDType = "str"
	CliIDTypeCreateEventBulkRetryBulkRetryEvent2 CliIDType = "createEventBulkRetry_BulkRetryEvent_2"
	CliIDTypeArrayOfstr                          CliIDType = "arrayOfstr"
)

// CliID - Filter by CLI IDs. `?[any]=true` operator for any CLI.
type CliID struct {
	Str                                 *string
	CreateEventBulkRetryBulkRetryEvent2 *CreateEventBulkRetryBulkRetryEvent2
	ArrayOfstr                          []string

	Type CliIDType
}

func CreateCliIDStr(str string) CliID {
	typ := CliIDTypeStr

	return CliID{
		Str:  &str,
		Type: typ,
	}
}

func CreateCliIDCreateEventBulkRetryBulkRetryEvent2(createEventBulkRetryBulkRetryEvent2 CreateEventBulkRetryBulkRetryEvent2) CliID {
	typ := CliIDTypeCreateEventBulkRetryBulkRetryEvent2

	return CliID{
		CreateEventBulkRetryBulkRetryEvent2: &createEventBulkRetryBulkRetryEvent2,
		Type:                                typ,
	}
}

func CreateCliIDArrayOfstr(arrayOfstr []string) CliID {
	typ := CliIDTypeArrayOfstr

	return CliID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *CliID) UnmarshalJSON(data []byte) error {

	createEventBulkRetryBulkRetryEvent2 := CreateEventBulkRetryBulkRetryEvent2{}
	if err := utils.UnmarshalJSON(data, &createEventBulkRetryBulkRetryEvent2, "", true, true); err == nil {
		u.CreateEventBulkRetryBulkRetryEvent2 = &createEventBulkRetryBulkRetryEvent2
		u.Type = CliIDTypeCreateEventBulkRetryBulkRetryEvent2
		return nil
	}

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CliIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = CliIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CliID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.CreateEventBulkRetryBulkRetryEvent2 != nil {
		return utils.MarshalJSON(u.CreateEventBulkRetryBulkRetryEvent2, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CliUserIDType string

const (
	CliUserIDTypeStr        CliUserIDType = "str"
	CliUserIDTypeArrayOfstr CliUserIDType = "arrayOfstr"
)

type CliUserID struct {
	Str        *string
	ArrayOfstr []string

	Type CliUserIDType
}

func CreateCliUserIDStr(str string) CliUserID {
	typ := CliUserIDTypeStr

	return CliUserID{
		Str:  &str,
		Type: typ,
	}
}

func CreateCliUserIDArrayOfstr(arrayOfstr []string) CliUserID {
	typ := CliUserIDTypeArrayOfstr

	return CliUserID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *CliUserID) UnmarshalJSON(data []byte) error {

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CliUserIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = CliUserIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CliUserID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateEventBulkRetryBulkRetryEventRequest2 struct {
	Any *bool      `json:"any,omitempty"`
	Gt  *time.Time `json:"gt,omitempty"`
	Gte *time.Time `json:"gte,omitempty"`
	Le  *time.Time `json:"le,omitempty"`
	Lte *time.Time `json:"lte,omitempty"`
}

func (c CreateEventBulkRetryBulkRetryEventRequest2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateEventBulkRetryBulkRetryEventRequest2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateEventBulkRetryBulkRetryEventRequest2) GetAny() *bool {
	if o == nil {
		return nil
	}
	return o.Any
}

func (o *CreateEventBulkRetryBulkRetryEventRequest2) GetGt() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *CreateEventBulkRetryBulkRetryEventRequest2) GetGte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *CreateEventBulkRetryBulkRetryEventRequest2) GetLe() *time.Time {
	if o == nil {
		return nil
	}
	return o.Le
}

func (o *CreateEventBulkRetryBulkRetryEventRequest2) GetLte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Lte
}

type CreatedAtType string

const (
	CreatedAtTypeDateTime                                   CreatedAtType = "date-time"
	CreatedAtTypeCreateEventBulkRetryBulkRetryEventRequest2 CreatedAtType = "createEventBulkRetry_BulkRetryEvent_request_2"
)

// CreatedAt - Filter by `created_at` date using a date operator
type CreatedAt struct {
	DateTime                                   *time.Time
	CreateEventBulkRetryBulkRetryEventRequest2 *CreateEventBulkRetryBulkRetryEventRequest2

	Type CreatedAtType
}

func CreateCreatedAtDateTime(dateTime time.Time) CreatedAt {
	typ := CreatedAtTypeDateTime

	return CreatedAt{
		DateTime: &dateTime,
		Type:     typ,
	}
}

func CreateCreatedAtCreateEventBulkRetryBulkRetryEventRequest2(createEventBulkRetryBulkRetryEventRequest2 CreateEventBulkRetryBulkRetryEventRequest2) CreatedAt {
	typ := CreatedAtTypeCreateEventBulkRetryBulkRetryEventRequest2

	return CreatedAt{
		CreateEventBulkRetryBulkRetryEventRequest2: &createEventBulkRetryBulkRetryEventRequest2,
		Type: typ,
	}
}

func (u *CreatedAt) UnmarshalJSON(data []byte) error {

	createEventBulkRetryBulkRetryEventRequest2 := CreateEventBulkRetryBulkRetryEventRequest2{}
	if err := utils.UnmarshalJSON(data, &createEventBulkRetryBulkRetryEventRequest2, "", true, true); err == nil {
		u.CreateEventBulkRetryBulkRetryEventRequest2 = &createEventBulkRetryBulkRetryEventRequest2
		u.Type = CreatedAtTypeCreateEventBulkRetryBulkRetryEventRequest2
		return nil
	}

	dateTime := time.Time{}
	if err := utils.UnmarshalJSON(data, &dateTime, "", true, true); err == nil {
		u.DateTime = &dateTime
		u.Type = CreatedAtTypeDateTime
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreatedAt) MarshalJSON() ([]byte, error) {
	if u.DateTime != nil {
		return utils.MarshalJSON(u.DateTime, "", true)
	}

	if u.CreateEventBulkRetryBulkRetryEventRequest2 != nil {
		return utils.MarshalJSON(u.CreateEventBulkRetryBulkRetryEventRequest2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type DestinationIDType string

const (
	DestinationIDTypeStr        DestinationIDType = "str"
	DestinationIDTypeArrayOfstr DestinationIDType = "arrayOfstr"
)

// DestinationID - Filter by destination IDs
type DestinationID struct {
	Str        *string
	ArrayOfstr []string

	Type DestinationIDType
}

func CreateDestinationIDStr(str string) DestinationID {
	typ := DestinationIDTypeStr

	return DestinationID{
		Str:  &str,
		Type: typ,
	}
}

func CreateDestinationIDArrayOfstr(arrayOfstr []string) DestinationID {
	typ := DestinationIDTypeArrayOfstr

	return DestinationID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *DestinationID) UnmarshalJSON(data []byte) error {

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = DestinationIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = DestinationIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u DestinationID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type ErrorCodeType string

const (
	ErrorCodeTypeStr        ErrorCodeType = "str"
	ErrorCodeTypeArrayOfstr ErrorCodeType = "arrayOfstr"
)

type ErrorCode struct {
	Str        *string
	ArrayOfstr []string

	Type ErrorCodeType
}

func CreateErrorCodeStr(str string) ErrorCode {
	typ := ErrorCodeTypeStr

	return ErrorCode{
		Str:  &str,
		Type: typ,
	}
}

func CreateErrorCodeArrayOfstr(arrayOfstr []string) ErrorCode {
	typ := ErrorCodeTypeArrayOfstr

	return ErrorCode{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *ErrorCode) UnmarshalJSON(data []byte) error {

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = ErrorCodeTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = ErrorCodeTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ErrorCode) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type EventDataIDType string

const (
	EventDataIDTypeStr        EventDataIDType = "str"
	EventDataIDTypeArrayOfstr EventDataIDType = "arrayOfstr"
)

type EventDataID struct {
	Str        *string
	ArrayOfstr []string

	Type EventDataIDType
}

func CreateEventDataIDStr(str string) EventDataID {
	typ := EventDataIDTypeStr

	return EventDataID{
		Str:  &str,
		Type: typ,
	}
}

func CreateEventDataIDArrayOfstr(arrayOfstr []string) EventDataID {
	typ := EventDataIDTypeArrayOfstr

	return EventDataID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *EventDataID) UnmarshalJSON(data []byte) error {

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = EventDataIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = EventDataIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u EventDataID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateEventBulkRetryBulkRetryEventRequestRequestBody2 struct {
}

type HeadersType string

const (
	HeadersTypeStr                                                   HeadersType = "str"
	HeadersTypeCreateEventBulkRetryBulkRetryEventRequestRequestBody2 HeadersType = "createEventBulkRetry_BulkRetryEvent_request_requestBody_2"
)

// Headers - URL Encoded string of the JSON to match to the data headers
type Headers struct {
	Str                                                   *string
	CreateEventBulkRetryBulkRetryEventRequestRequestBody2 *CreateEventBulkRetryBulkRetryEventRequestRequestBody2

	Type HeadersType
}

func CreateHeadersStr(str string) Headers {
	typ := HeadersTypeStr

	return Headers{
		Str:  &str,
		Type: typ,
	}
}

func CreateHeadersCreateEventBulkRetryBulkRetryEventRequestRequestBody2(createEventBulkRetryBulkRetryEventRequestRequestBody2 CreateEventBulkRetryBulkRetryEventRequestRequestBody2) Headers {
	typ := HeadersTypeCreateEventBulkRetryBulkRetryEventRequestRequestBody2

	return Headers{
		CreateEventBulkRetryBulkRetryEventRequestRequestBody2: &createEventBulkRetryBulkRetryEventRequestRequestBody2,
		Type: typ,
	}
}

func (u *Headers) UnmarshalJSON(data []byte) error {

	createEventBulkRetryBulkRetryEventRequestRequestBody2 := CreateEventBulkRetryBulkRetryEventRequestRequestBody2{}
	if err := utils.UnmarshalJSON(data, &createEventBulkRetryBulkRetryEventRequestRequestBody2, "", true, true); err == nil {
		u.CreateEventBulkRetryBulkRetryEventRequestRequestBody2 = &createEventBulkRetryBulkRetryEventRequestRequestBody2
		u.Type = HeadersTypeCreateEventBulkRetryBulkRetryEventRequestRequestBody2
		return nil
	}

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = HeadersTypeStr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u Headers) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.CreateEventBulkRetryBulkRetryEventRequestRequestBody2 != nil {
		return utils.MarshalJSON(u.CreateEventBulkRetryBulkRetryEventRequestRequestBody2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type IDType string

const (
	IDTypeStr        IDType = "str"
	IDTypeArrayOfstr IDType = "arrayOfstr"
)

// ID - Filter by event IDs
type ID struct {
	Str        *string
	ArrayOfstr []string

	Type IDType
}

func CreateIDStr(str string) ID {
	typ := IDTypeStr

	return ID{
		Str:  &str,
		Type: typ,
	}
}

func CreateIDArrayOfstr(arrayOfstr []string) ID {
	typ := IDTypeArrayOfstr

	return ID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *ID) UnmarshalJSON(data []byte) error {

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = IDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = IDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type IssueIDType string

const (
	IssueIDTypeStr        IssueIDType = "str"
	IssueIDTypeArrayOfstr IssueIDType = "arrayOfstr"
)

type IssueID struct {
	Str        *string
	ArrayOfstr []string

	Type IssueIDType
}

func CreateIssueIDStr(str string) IssueID {
	typ := IssueIDTypeStr

	return IssueID{
		Str:  &str,
		Type: typ,
	}
}

func CreateIssueIDArrayOfstr(arrayOfstr []string) IssueID {
	typ := IssueIDTypeArrayOfstr

	return IssueID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *IssueID) UnmarshalJSON(data []byte) error {

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = IssueIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = IssueIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u IssueID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateEventBulkRetryBulkRetryEventRequestRequestBodyQuery2 struct {
	Any *bool      `json:"any,omitempty"`
	Gt  *time.Time `json:"gt,omitempty"`
	Gte *time.Time `json:"gte,omitempty"`
	Le  *time.Time `json:"le,omitempty"`
	Lte *time.Time `json:"lte,omitempty"`
}

func (c CreateEventBulkRetryBulkRetryEventRequestRequestBodyQuery2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateEventBulkRetryBulkRetryEventRequestRequestBodyQuery2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateEventBulkRetryBulkRetryEventRequestRequestBodyQuery2) GetAny() *bool {
	if o == nil {
		return nil
	}
	return o.Any
}

func (o *CreateEventBulkRetryBulkRetryEventRequestRequestBodyQuery2) GetGt() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *CreateEventBulkRetryBulkRetryEventRequestRequestBodyQuery2) GetGte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *CreateEventBulkRetryBulkRetryEventRequestRequestBodyQuery2) GetLe() *time.Time {
	if o == nil {
		return nil
	}
	return o.Le
}

func (o *CreateEventBulkRetryBulkRetryEventRequestRequestBodyQuery2) GetLte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Lte
}

type LastAttemptAtType string

const (
	LastAttemptAtTypeDateTime                                                   LastAttemptAtType = "date-time"
	LastAttemptAtTypeCreateEventBulkRetryBulkRetryEventRequestRequestBodyQuery2 LastAttemptAtType = "createEventBulkRetry_BulkRetryEvent_request_requestBody_query_2"
)

// LastAttemptAt - Filter by `last_attempt_at` date using a date operator
type LastAttemptAt struct {
	DateTime                                                   *time.Time
	CreateEventBulkRetryBulkRetryEventRequestRequestBodyQuery2 *CreateEventBulkRetryBulkRetryEventRequestRequestBodyQuery2

	Type LastAttemptAtType
}

func CreateLastAttemptAtDateTime(dateTime time.Time) LastAttemptAt {
	typ := LastAttemptAtTypeDateTime

	return LastAttemptAt{
		DateTime: &dateTime,
		Type:     typ,
	}
}

func CreateLastAttemptAtCreateEventBulkRetryBulkRetryEventRequestRequestBodyQuery2(createEventBulkRetryBulkRetryEventRequestRequestBodyQuery2 CreateEventBulkRetryBulkRetryEventRequestRequestBodyQuery2) LastAttemptAt {
	typ := LastAttemptAtTypeCreateEventBulkRetryBulkRetryEventRequestRequestBodyQuery2

	return LastAttemptAt{
		CreateEventBulkRetryBulkRetryEventRequestRequestBodyQuery2: &createEventBulkRetryBulkRetryEventRequestRequestBodyQuery2,
		Type: typ,
	}
}

func (u *LastAttemptAt) UnmarshalJSON(data []byte) error {

	createEventBulkRetryBulkRetryEventRequestRequestBodyQuery2 := CreateEventBulkRetryBulkRetryEventRequestRequestBodyQuery2{}
	if err := utils.UnmarshalJSON(data, &createEventBulkRetryBulkRetryEventRequestRequestBodyQuery2, "", true, true); err == nil {
		u.CreateEventBulkRetryBulkRetryEventRequestRequestBodyQuery2 = &createEventBulkRetryBulkRetryEventRequestRequestBodyQuery2
		u.Type = LastAttemptAtTypeCreateEventBulkRetryBulkRetryEventRequestRequestBodyQuery2
		return nil
	}

	dateTime := time.Time{}
	if err := utils.UnmarshalJSON(data, &dateTime, "", true, true); err == nil {
		u.DateTime = &dateTime
		u.Type = LastAttemptAtTypeDateTime
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u LastAttemptAt) MarshalJSON() ([]byte, error) {
	if u.DateTime != nil {
		return utils.MarshalJSON(u.DateTime, "", true)
	}

	if u.CreateEventBulkRetryBulkRetryEventRequestRequestBodyQuery2 != nil {
		return utils.MarshalJSON(u.CreateEventBulkRetryBulkRetryEventRequestRequestBodyQuery2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateEventBulkRetryBulkRetryEventRequestRequestBodyQueryParsedQuery2 struct {
}

type ParsedQueryType string

const (
	ParsedQueryTypeStr                                                                   ParsedQueryType = "str"
	ParsedQueryTypeCreateEventBulkRetryBulkRetryEventRequestRequestBodyQueryParsedQuery2 ParsedQueryType = "createEventBulkRetry_BulkRetryEvent_request_requestBody_query_parsed_query_2"
)

// ParsedQuery - URL Encoded string of the JSON to match to the parsed query (JSON representation of the query)
type ParsedQuery struct {
	Str                                                                   *string
	CreateEventBulkRetryBulkRetryEventRequestRequestBodyQueryParsedQuery2 *CreateEventBulkRetryBulkRetryEventRequestRequestBodyQueryParsedQuery2

	Type ParsedQueryType
}

func CreateParsedQueryStr(str string) ParsedQuery {
	typ := ParsedQueryTypeStr

	return ParsedQuery{
		Str:  &str,
		Type: typ,
	}
}

func CreateParsedQueryCreateEventBulkRetryBulkRetryEventRequestRequestBodyQueryParsedQuery2(createEventBulkRetryBulkRetryEventRequestRequestBodyQueryParsedQuery2 CreateEventBulkRetryBulkRetryEventRequestRequestBodyQueryParsedQuery2) ParsedQuery {
	typ := ParsedQueryTypeCreateEventBulkRetryBulkRetryEventRequestRequestBodyQueryParsedQuery2

	return ParsedQuery{
		CreateEventBulkRetryBulkRetryEventRequestRequestBodyQueryParsedQuery2: &createEventBulkRetryBulkRetryEventRequestRequestBodyQueryParsedQuery2,
		Type: typ,
	}
}

func (u *ParsedQuery) UnmarshalJSON(data []byte) error {

	createEventBulkRetryBulkRetryEventRequestRequestBodyQueryParsedQuery2 := CreateEventBulkRetryBulkRetryEventRequestRequestBodyQueryParsedQuery2{}
	if err := utils.UnmarshalJSON(data, &createEventBulkRetryBulkRetryEventRequestRequestBodyQueryParsedQuery2, "", true, true); err == nil {
		u.CreateEventBulkRetryBulkRetryEventRequestRequestBodyQueryParsedQuery2 = &createEventBulkRetryBulkRetryEventRequestRequestBodyQueryParsedQuery2
		u.Type = ParsedQueryTypeCreateEventBulkRetryBulkRetryEventRequestRequestBodyQueryParsedQuery2
		return nil
	}

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = ParsedQueryTypeStr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ParsedQuery) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.CreateEventBulkRetryBulkRetryEventRequestRequestBodyQueryParsedQuery2 != nil {
		return utils.MarshalJSON(u.CreateEventBulkRetryBulkRetryEventRequestRequestBodyQueryParsedQuery2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateEventBulkRetryBulkRetryEventRequestRequestBodyQueryResponseStatus2 struct {
	Any      *bool  `json:"any,omitempty"`
	Contains *int64 `json:"contains,omitempty"`
	Gt       *int64 `json:"gt,omitempty"`
	Gte      *int64 `json:"gte,omitempty"`
	Le       *int64 `json:"le,omitempty"`
	Lte      *int64 `json:"lte,omitempty"`
}

func (o *CreateEventBulkRetryBulkRetryEventRequestRequestBodyQueryResponseStatus2) GetAny() *bool {
	if o == nil {
		return nil
	}
	return o.Any
}

func (o *CreateEventBulkRetryBulkRetryEventRequestRequestBodyQueryResponseStatus2) GetContains() *int64 {
	if o == nil {
		return nil
	}
	return o.Contains
}

func (o *CreateEventBulkRetryBulkRetryEventRequestRequestBodyQueryResponseStatus2) GetGt() *int64 {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *CreateEventBulkRetryBulkRetryEventRequestRequestBodyQueryResponseStatus2) GetGte() *int64 {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *CreateEventBulkRetryBulkRetryEventRequestRequestBodyQueryResponseStatus2) GetLe() *int64 {
	if o == nil {
		return nil
	}
	return o.Le
}

func (o *CreateEventBulkRetryBulkRetryEventRequestRequestBodyQueryResponseStatus2) GetLte() *int64 {
	if o == nil {
		return nil
	}
	return o.Lte
}

type ResponseStatusType string

const (
	ResponseStatusTypeInteger                                                                  ResponseStatusType = "integer"
	ResponseStatusTypeCreateEventBulkRetryBulkRetryEventRequestRequestBodyQueryResponseStatus2 ResponseStatusType = "createEventBulkRetry_BulkRetryEvent_request_requestBody_query_response_status_2"
	ResponseStatusTypeArrayOfinteger                                                           ResponseStatusType = "arrayOfinteger"
)

// ResponseStatus - Filter by HTTP response status code
type ResponseStatus struct {
	Integer                                                                  *int64
	CreateEventBulkRetryBulkRetryEventRequestRequestBodyQueryResponseStatus2 *CreateEventBulkRetryBulkRetryEventRequestRequestBodyQueryResponseStatus2
	ArrayOfinteger                                                           []int64

	Type ResponseStatusType
}

func CreateResponseStatusInteger(integer int64) ResponseStatus {
	typ := ResponseStatusTypeInteger

	return ResponseStatus{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateResponseStatusCreateEventBulkRetryBulkRetryEventRequestRequestBodyQueryResponseStatus2(createEventBulkRetryBulkRetryEventRequestRequestBodyQueryResponseStatus2 CreateEventBulkRetryBulkRetryEventRequestRequestBodyQueryResponseStatus2) ResponseStatus {
	typ := ResponseStatusTypeCreateEventBulkRetryBulkRetryEventRequestRequestBodyQueryResponseStatus2

	return ResponseStatus{
		CreateEventBulkRetryBulkRetryEventRequestRequestBodyQueryResponseStatus2: &createEventBulkRetryBulkRetryEventRequestRequestBodyQueryResponseStatus2,
		Type: typ,
	}
}

func CreateResponseStatusArrayOfinteger(arrayOfinteger []int64) ResponseStatus {
	typ := ResponseStatusTypeArrayOfinteger

	return ResponseStatus{
		ArrayOfinteger: arrayOfinteger,
		Type:           typ,
	}
}

func (u *ResponseStatus) UnmarshalJSON(data []byte) error {

	createEventBulkRetryBulkRetryEventRequestRequestBodyQueryResponseStatus2 := CreateEventBulkRetryBulkRetryEventRequestRequestBodyQueryResponseStatus2{}
	if err := utils.UnmarshalJSON(data, &createEventBulkRetryBulkRetryEventRequestRequestBodyQueryResponseStatus2, "", true, true); err == nil {
		u.CreateEventBulkRetryBulkRetryEventRequestRequestBodyQueryResponseStatus2 = &createEventBulkRetryBulkRetryEventRequestRequestBodyQueryResponseStatus2
		u.Type = ResponseStatusTypeCreateEventBulkRetryBulkRetryEventRequestRequestBodyQueryResponseStatus2
		return nil
	}

	integer := int64(0)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = &integer
		u.Type = ResponseStatusTypeInteger
		return nil
	}

	arrayOfinteger := []int64{}
	if err := utils.UnmarshalJSON(data, &arrayOfinteger, "", true, true); err == nil {
		u.ArrayOfinteger = arrayOfinteger
		u.Type = ResponseStatusTypeArrayOfinteger
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ResponseStatus) MarshalJSON() ([]byte, error) {
	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.CreateEventBulkRetryBulkRetryEventRequestRequestBodyQueryResponseStatus2 != nil {
		return utils.MarshalJSON(u.CreateEventBulkRetryBulkRetryEventRequestRequestBodyQueryResponseStatus2, "", true)
	}

	if u.ArrayOfinteger != nil {
		return utils.MarshalJSON(u.ArrayOfinteger, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type SourceIDType string

const (
	SourceIDTypeStr        SourceIDType = "str"
	SourceIDTypeArrayOfstr SourceIDType = "arrayOfstr"
)

// SourceID - Filter by source IDs
type SourceID struct {
	Str        *string
	ArrayOfstr []string

	Type SourceIDType
}

func CreateSourceIDStr(str string) SourceID {
	typ := SourceIDTypeStr

	return SourceID{
		Str:  &str,
		Type: typ,
	}
}

func CreateSourceIDArrayOfstr(arrayOfstr []string) SourceID {
	typ := SourceIDTypeArrayOfstr

	return SourceID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *SourceID) UnmarshalJSON(data []byte) error {

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = SourceIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = SourceIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type StatusType string

const (
	StatusTypeEventStatus        StatusType = "EventStatus"
	StatusTypeArrayOfEventStatus StatusType = "arrayOfEventStatus"
)

// Status - Lifecyle status of the event
type Status struct {
	EventStatus        *components.EventStatus
	ArrayOfEventStatus []components.EventStatus

	Type StatusType
}

func CreateStatusEventStatus(eventStatus components.EventStatus) Status {
	typ := StatusTypeEventStatus

	return Status{
		EventStatus: &eventStatus,
		Type:        typ,
	}
}

func CreateStatusArrayOfEventStatus(arrayOfEventStatus []components.EventStatus) Status {
	typ := StatusTypeArrayOfEventStatus

	return Status{
		ArrayOfEventStatus: arrayOfEventStatus,
		Type:               typ,
	}
}

func (u *Status) UnmarshalJSON(data []byte) error {

	eventStatus := components.EventStatus("")
	if err := utils.UnmarshalJSON(data, &eventStatus, "", true, true); err == nil {
		u.EventStatus = &eventStatus
		u.Type = StatusTypeEventStatus
		return nil
	}

	arrayOfEventStatus := []components.EventStatus{}
	if err := utils.UnmarshalJSON(data, &arrayOfEventStatus, "", true, true); err == nil {
		u.ArrayOfEventStatus = arrayOfEventStatus
		u.Type = StatusTypeArrayOfEventStatus
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u Status) MarshalJSON() ([]byte, error) {
	if u.EventStatus != nil {
		return utils.MarshalJSON(u.EventStatus, "", true)
	}

	if u.ArrayOfEventStatus != nil {
		return utils.MarshalJSON(u.ArrayOfEventStatus, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateEventBulkRetryBulkRetryEventRequestRequestBodyQuerySuccessfulAt2 struct {
	Any *bool      `json:"any,omitempty"`
	Gt  *time.Time `json:"gt,omitempty"`
	Gte *time.Time `json:"gte,omitempty"`
	Le  *time.Time `json:"le,omitempty"`
	Lte *time.Time `json:"lte,omitempty"`
}

func (c CreateEventBulkRetryBulkRetryEventRequestRequestBodyQuerySuccessfulAt2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateEventBulkRetryBulkRetryEventRequestRequestBodyQuerySuccessfulAt2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateEventBulkRetryBulkRetryEventRequestRequestBodyQuerySuccessfulAt2) GetAny() *bool {
	if o == nil {
		return nil
	}
	return o.Any
}

func (o *CreateEventBulkRetryBulkRetryEventRequestRequestBodyQuerySuccessfulAt2) GetGt() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *CreateEventBulkRetryBulkRetryEventRequestRequestBodyQuerySuccessfulAt2) GetGte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *CreateEventBulkRetryBulkRetryEventRequestRequestBodyQuerySuccessfulAt2) GetLe() *time.Time {
	if o == nil {
		return nil
	}
	return o.Le
}

func (o *CreateEventBulkRetryBulkRetryEventRequestRequestBodyQuerySuccessfulAt2) GetLte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Lte
}

type SuccessfulAtType string

const (
	SuccessfulAtTypeDateTime                                                               SuccessfulAtType = "date-time"
	SuccessfulAtTypeCreateEventBulkRetryBulkRetryEventRequestRequestBodyQuerySuccessfulAt2 SuccessfulAtType = "createEventBulkRetry_BulkRetryEvent_request_requestBody_query_successful_at_2"
)

// SuccessfulAt - Filter by `successful_at` date using a date operator
type SuccessfulAt struct {
	DateTime                                                               *time.Time
	CreateEventBulkRetryBulkRetryEventRequestRequestBodyQuerySuccessfulAt2 *CreateEventBulkRetryBulkRetryEventRequestRequestBodyQuerySuccessfulAt2

	Type SuccessfulAtType
}

func CreateSuccessfulAtDateTime(dateTime time.Time) SuccessfulAt {
	typ := SuccessfulAtTypeDateTime

	return SuccessfulAt{
		DateTime: &dateTime,
		Type:     typ,
	}
}

func CreateSuccessfulAtCreateEventBulkRetryBulkRetryEventRequestRequestBodyQuerySuccessfulAt2(createEventBulkRetryBulkRetryEventRequestRequestBodyQuerySuccessfulAt2 CreateEventBulkRetryBulkRetryEventRequestRequestBodyQuerySuccessfulAt2) SuccessfulAt {
	typ := SuccessfulAtTypeCreateEventBulkRetryBulkRetryEventRequestRequestBodyQuerySuccessfulAt2

	return SuccessfulAt{
		CreateEventBulkRetryBulkRetryEventRequestRequestBodyQuerySuccessfulAt2: &createEventBulkRetryBulkRetryEventRequestRequestBodyQuerySuccessfulAt2,
		Type: typ,
	}
}

func (u *SuccessfulAt) UnmarshalJSON(data []byte) error {

	createEventBulkRetryBulkRetryEventRequestRequestBodyQuerySuccessfulAt2 := CreateEventBulkRetryBulkRetryEventRequestRequestBodyQuerySuccessfulAt2{}
	if err := utils.UnmarshalJSON(data, &createEventBulkRetryBulkRetryEventRequestRequestBodyQuerySuccessfulAt2, "", true, true); err == nil {
		u.CreateEventBulkRetryBulkRetryEventRequestRequestBodyQuerySuccessfulAt2 = &createEventBulkRetryBulkRetryEventRequestRequestBodyQuerySuccessfulAt2
		u.Type = SuccessfulAtTypeCreateEventBulkRetryBulkRetryEventRequestRequestBodyQuerySuccessfulAt2
		return nil
	}

	dateTime := time.Time{}
	if err := utils.UnmarshalJSON(data, &dateTime, "", true, true); err == nil {
		u.DateTime = &dateTime
		u.Type = SuccessfulAtTypeDateTime
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SuccessfulAt) MarshalJSON() ([]byte, error) {
	if u.DateTime != nil {
		return utils.MarshalJSON(u.DateTime, "", true)
	}

	if u.CreateEventBulkRetryBulkRetryEventRequestRequestBodyQuerySuccessfulAt2 != nil {
		return utils.MarshalJSON(u.CreateEventBulkRetryBulkRetryEventRequestRequestBodyQuerySuccessfulAt2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type WebhookIDType string

const (
	WebhookIDTypeStr        WebhookIDType = "str"
	WebhookIDTypeArrayOfstr WebhookIDType = "arrayOfstr"
)

// WebhookID - Filter by webhook connection IDs
type WebhookID struct {
	Str        *string
	ArrayOfstr []string

	Type WebhookIDType
}

func CreateWebhookIDStr(str string) WebhookID {
	typ := WebhookIDTypeStr

	return WebhookID{
		Str:  &str,
		Type: typ,
	}
}

func CreateWebhookIDArrayOfstr(arrayOfstr []string) WebhookID {
	typ := WebhookIDTypeArrayOfstr

	return WebhookID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *WebhookID) UnmarshalJSON(data []byte) error {

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = WebhookIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = WebhookIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u WebhookID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// Query - Filter properties for the events to be included in the bulk retry
type Query struct {
	// Filter by number of attempts
	Attempts *Attempts `json:"attempts,omitempty"`
	// URL Encoded string of the JSON to match to the data body
	Body        *Body        `json:"body,omitempty"`
	BulkRetryID *BulkRetryID `json:"bulk_retry_id,omitempty"`
	// Filter by CLI IDs. `?[any]=true` operator for any CLI.
	CliID     *CliID     `json:"cli_id,omitempty"`
	CliUserID *CliUserID `json:"cli_user_id,omitempty"`
	// Filter by `created_at` date using a date operator
	CreatedAt *CreatedAt `json:"created_at,omitempty"`
	// Filter by destination IDs
	DestinationID *DestinationID `json:"destination_id,omitempty"`
	ErrorCode     *ErrorCode     `json:"error_code,omitempty"`
	EventDataID   *EventDataID   `json:"event_data_id,omitempty"`
	// URL Encoded string of the JSON to match to the data headers
	Headers *Headers `json:"headers,omitempty"`
	// Filter by event IDs
	ID      *ID      `json:"id,omitempty"`
	IssueID *IssueID `json:"issue_id,omitempty"`
	// Filter by `last_attempt_at` date using a date operator
	LastAttemptAt *LastAttemptAt `json:"last_attempt_at,omitempty"`
	// URL Encoded string of the JSON to match to the parsed query (JSON representation of the query)
	ParsedQuery *ParsedQuery `json:"parsed_query,omitempty"`
	// URL Encoded string of the string to match partially to the path
	Path *string `json:"path,omitempty"`
	// Filter by HTTP response status code
	ResponseStatus *ResponseStatus `json:"response_status,omitempty"`
	// URL Encoded string of the string to match partially to the body, headers, parsed_query or path
	SearchTerm *string `json:"search_term,omitempty"`
	// Filter by source IDs
	SourceID *SourceID `json:"source_id,omitempty"`
	// Lifecyle status of the event
	Status *Status `json:"status,omitempty"`
	// Filter by `successful_at` date using a date operator
	SuccessfulAt *SuccessfulAt `json:"successful_at,omitempty"`
	// Filter by webhook connection IDs
	WebhookID *WebhookID `json:"webhook_id,omitempty"`
}

func (o *Query) GetAttempts() *Attempts {
	if o == nil {
		return nil
	}
	return o.Attempts
}

func (o *Query) GetBody() *Body {
	if o == nil {
		return nil
	}
	return o.Body
}

func (o *Query) GetBulkRetryID() *BulkRetryID {
	if o == nil {
		return nil
	}
	return o.BulkRetryID
}

func (o *Query) GetCliID() *CliID {
	if o == nil {
		return nil
	}
	return o.CliID
}

func (o *Query) GetCliUserID() *CliUserID {
	if o == nil {
		return nil
	}
	return o.CliUserID
}

func (o *Query) GetCreatedAt() *CreatedAt {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *Query) GetDestinationID() *DestinationID {
	if o == nil {
		return nil
	}
	return o.DestinationID
}

func (o *Query) GetErrorCode() *ErrorCode {
	if o == nil {
		return nil
	}
	return o.ErrorCode
}

func (o *Query) GetEventDataID() *EventDataID {
	if o == nil {
		return nil
	}
	return o.EventDataID
}

func (o *Query) GetHeaders() *Headers {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *Query) GetID() *ID {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Query) GetIssueID() *IssueID {
	if o == nil {
		return nil
	}
	return o.IssueID
}

func (o *Query) GetLastAttemptAt() *LastAttemptAt {
	if o == nil {
		return nil
	}
	return o.LastAttemptAt
}

func (o *Query) GetParsedQuery() *ParsedQuery {
	if o == nil {
		return nil
	}
	return o.ParsedQuery
}

func (o *Query) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

func (o *Query) GetResponseStatus() *ResponseStatus {
	if o == nil {
		return nil
	}
	return o.ResponseStatus
}

func (o *Query) GetSearchTerm() *string {
	if o == nil {
		return nil
	}
	return o.SearchTerm
}

func (o *Query) GetSourceID() *SourceID {
	if o == nil {
		return nil
	}
	return o.SourceID
}

func (o *Query) GetStatus() *Status {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *Query) GetSuccessfulAt() *SuccessfulAt {
	if o == nil {
		return nil
	}
	return o.SuccessfulAt
}

func (o *Query) GetWebhookID() *WebhookID {
	if o == nil {
		return nil
	}
	return o.WebhookID
}

type CreateEventBulkRetryRequestBody struct {
	// Filter properties for the events to be included in the bulk retry
	Query *Query `json:"query,omitempty"`
}

func (o *CreateEventBulkRetryRequestBody) GetQuery() *Query {
	if o == nil {
		return nil
	}
	return o.Query
}

type CreateEventBulkRetryResponse struct {
	// A single events bulk retry
	BatchOperation *components.BatchOperation
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *CreateEventBulkRetryResponse) GetBatchOperation() *components.BatchOperation {
	if o == nil {
		return nil
	}
	return o.BatchOperation
}

func (o *CreateEventBulkRetryResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *CreateEventBulkRetryResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *CreateEventBulkRetryResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
