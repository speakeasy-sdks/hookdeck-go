// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/speakeasy-sdks/hookdeck-go/v2/internal/utils"
	"github.com/speakeasy-sdks/hookdeck-go/v2/models/components"
	"net/http"
	"time"
)

type GetTransformationExecutionsQueryParam2 struct {
	Any *bool      `queryParam:"name=any"`
	Gt  *time.Time `queryParam:"name=gt"`
	Gte *time.Time `queryParam:"name=gte"`
	Le  *time.Time `queryParam:"name=le"`
	Lte *time.Time `queryParam:"name=lte"`
}

func (g GetTransformationExecutionsQueryParam2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetTransformationExecutionsQueryParam2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetTransformationExecutionsQueryParam2) GetAny() *bool {
	if o == nil {
		return nil
	}
	return o.Any
}

func (o *GetTransformationExecutionsQueryParam2) GetGt() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *GetTransformationExecutionsQueryParam2) GetGte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *GetTransformationExecutionsQueryParam2) GetLe() *time.Time {
	if o == nil {
		return nil
	}
	return o.Le
}

func (o *GetTransformationExecutionsQueryParam2) GetLte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Lte
}

type GetTransformationExecutionsQueryParamCreatedAtType string

const (
	GetTransformationExecutionsQueryParamCreatedAtTypeDateTime                               GetTransformationExecutionsQueryParamCreatedAtType = "date-time"
	GetTransformationExecutionsQueryParamCreatedAtTypeGetTransformationExecutionsQueryParam2 GetTransformationExecutionsQueryParamCreatedAtType = "getTransformationExecutions_queryParam_2"
)

// GetTransformationExecutionsQueryParamCreatedAt - ISO date of the transformation's execution
type GetTransformationExecutionsQueryParamCreatedAt struct {
	DateTime                               *time.Time
	GetTransformationExecutionsQueryParam2 *GetTransformationExecutionsQueryParam2

	Type GetTransformationExecutionsQueryParamCreatedAtType
}

func CreateGetTransformationExecutionsQueryParamCreatedAtDateTime(dateTime time.Time) GetTransformationExecutionsQueryParamCreatedAt {
	typ := GetTransformationExecutionsQueryParamCreatedAtTypeDateTime

	return GetTransformationExecutionsQueryParamCreatedAt{
		DateTime: &dateTime,
		Type:     typ,
	}
}

func CreateGetTransformationExecutionsQueryParamCreatedAtGetTransformationExecutionsQueryParam2(getTransformationExecutionsQueryParam2 GetTransformationExecutionsQueryParam2) GetTransformationExecutionsQueryParamCreatedAt {
	typ := GetTransformationExecutionsQueryParamCreatedAtTypeGetTransformationExecutionsQueryParam2

	return GetTransformationExecutionsQueryParamCreatedAt{
		GetTransformationExecutionsQueryParam2: &getTransformationExecutionsQueryParam2,
		Type:                                   typ,
	}
}

func (u *GetTransformationExecutionsQueryParamCreatedAt) UnmarshalJSON(data []byte) error {

	getTransformationExecutionsQueryParam2 := GetTransformationExecutionsQueryParam2{}
	if err := utils.UnmarshalJSON(data, &getTransformationExecutionsQueryParam2, "", true, true); err == nil {
		u.GetTransformationExecutionsQueryParam2 = &getTransformationExecutionsQueryParam2
		u.Type = GetTransformationExecutionsQueryParamCreatedAtTypeGetTransformationExecutionsQueryParam2
		return nil
	}

	dateTime := time.Time{}
	if err := utils.UnmarshalJSON(data, &dateTime, "", true, true); err == nil {
		u.DateTime = &dateTime
		u.Type = GetTransformationExecutionsQueryParamCreatedAtTypeDateTime
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetTransformationExecutionsQueryParamCreatedAt) MarshalJSON() ([]byte, error) {
	if u.DateTime != nil {
		return utils.MarshalJSON(u.DateTime, "", true)
	}

	if u.GetTransformationExecutionsQueryParam2 != nil {
		return utils.MarshalJSON(u.GetTransformationExecutionsQueryParam2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetTransformationExecutionsQueryParamTransformationExecutions2 string

const (
	GetTransformationExecutionsQueryParamTransformationExecutions2Asc  GetTransformationExecutionsQueryParamTransformationExecutions2 = "asc"
	GetTransformationExecutionsQueryParamTransformationExecutions2Desc GetTransformationExecutionsQueryParamTransformationExecutions2 = "desc"
)

func (e GetTransformationExecutionsQueryParamTransformationExecutions2) ToPointer() *GetTransformationExecutionsQueryParamTransformationExecutions2 {
	return &e
}

func (e *GetTransformationExecutionsQueryParamTransformationExecutions2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = GetTransformationExecutionsQueryParamTransformationExecutions2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetTransformationExecutionsQueryParamTransformationExecutions2: %v", v)
	}
}

type GetTransformationExecutionsQueryParam1 string

const (
	GetTransformationExecutionsQueryParam1Asc  GetTransformationExecutionsQueryParam1 = "asc"
	GetTransformationExecutionsQueryParam1Desc GetTransformationExecutionsQueryParam1 = "desc"
)

func (e GetTransformationExecutionsQueryParam1) ToPointer() *GetTransformationExecutionsQueryParam1 {
	return &e
}

func (e *GetTransformationExecutionsQueryParam1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = GetTransformationExecutionsQueryParam1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetTransformationExecutionsQueryParam1: %v", v)
	}
}

type GetTransformationExecutionsQueryParamDirType string

const (
	GetTransformationExecutionsQueryParamDirTypeGetTransformationExecutionsQueryParam1                                GetTransformationExecutionsQueryParamDirType = "getTransformationExecutions_queryParam_1"
	GetTransformationExecutionsQueryParamDirTypeArrayOfgetTransformationExecutionsQueryParamTransformationExecutions2 GetTransformationExecutionsQueryParamDirType = "arrayOfgetTransformationExecutions_queryParam_TransformationExecutions_2"
)

// GetTransformationExecutionsQueryParamDir - Sort direction
type GetTransformationExecutionsQueryParamDir struct {
	GetTransformationExecutionsQueryParam1                                *GetTransformationExecutionsQueryParam1
	ArrayOfgetTransformationExecutionsQueryParamTransformationExecutions2 []GetTransformationExecutionsQueryParamTransformationExecutions2

	Type GetTransformationExecutionsQueryParamDirType
}

func CreateGetTransformationExecutionsQueryParamDirGetTransformationExecutionsQueryParam1(getTransformationExecutionsQueryParam1 GetTransformationExecutionsQueryParam1) GetTransformationExecutionsQueryParamDir {
	typ := GetTransformationExecutionsQueryParamDirTypeGetTransformationExecutionsQueryParam1

	return GetTransformationExecutionsQueryParamDir{
		GetTransformationExecutionsQueryParam1: &getTransformationExecutionsQueryParam1,
		Type:                                   typ,
	}
}

func CreateGetTransformationExecutionsQueryParamDirArrayOfgetTransformationExecutionsQueryParamTransformationExecutions2(arrayOfgetTransformationExecutionsQueryParamTransformationExecutions2 []GetTransformationExecutionsQueryParamTransformationExecutions2) GetTransformationExecutionsQueryParamDir {
	typ := GetTransformationExecutionsQueryParamDirTypeArrayOfgetTransformationExecutionsQueryParamTransformationExecutions2

	return GetTransformationExecutionsQueryParamDir{
		ArrayOfgetTransformationExecutionsQueryParamTransformationExecutions2: arrayOfgetTransformationExecutionsQueryParamTransformationExecutions2,
		Type: typ,
	}
}

func (u *GetTransformationExecutionsQueryParamDir) UnmarshalJSON(data []byte) error {

	getTransformationExecutionsQueryParam1 := GetTransformationExecutionsQueryParam1("")
	if err := utils.UnmarshalJSON(data, &getTransformationExecutionsQueryParam1, "", true, true); err == nil {
		u.GetTransformationExecutionsQueryParam1 = &getTransformationExecutionsQueryParam1
		u.Type = GetTransformationExecutionsQueryParamDirTypeGetTransformationExecutionsQueryParam1
		return nil
	}

	arrayOfgetTransformationExecutionsQueryParamTransformationExecutions2 := []GetTransformationExecutionsQueryParamTransformationExecutions2{}
	if err := utils.UnmarshalJSON(data, &arrayOfgetTransformationExecutionsQueryParamTransformationExecutions2, "", true, true); err == nil {
		u.ArrayOfgetTransformationExecutionsQueryParamTransformationExecutions2 = arrayOfgetTransformationExecutionsQueryParamTransformationExecutions2
		u.Type = GetTransformationExecutionsQueryParamDirTypeArrayOfgetTransformationExecutionsQueryParamTransformationExecutions2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetTransformationExecutionsQueryParamDir) MarshalJSON() ([]byte, error) {
	if u.GetTransformationExecutionsQueryParam1 != nil {
		return utils.MarshalJSON(u.GetTransformationExecutionsQueryParam1, "", true)
	}

	if u.ArrayOfgetTransformationExecutionsQueryParamTransformationExecutions2 != nil {
		return utils.MarshalJSON(u.ArrayOfgetTransformationExecutionsQueryParamTransformationExecutions2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetTransformationExecutionsQueryParamIssueIDType string

const (
	GetTransformationExecutionsQueryParamIssueIDTypeStr        GetTransformationExecutionsQueryParamIssueIDType = "str"
	GetTransformationExecutionsQueryParamIssueIDTypeArrayOfstr GetTransformationExecutionsQueryParamIssueIDType = "arrayOfstr"
)

// GetTransformationExecutionsQueryParamIssueID - ID of the associated issue
type GetTransformationExecutionsQueryParamIssueID struct {
	Str        *string
	ArrayOfstr []string

	Type GetTransformationExecutionsQueryParamIssueIDType
}

func CreateGetTransformationExecutionsQueryParamIssueIDStr(str string) GetTransformationExecutionsQueryParamIssueID {
	typ := GetTransformationExecutionsQueryParamIssueIDTypeStr

	return GetTransformationExecutionsQueryParamIssueID{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetTransformationExecutionsQueryParamIssueIDArrayOfstr(arrayOfstr []string) GetTransformationExecutionsQueryParamIssueID {
	typ := GetTransformationExecutionsQueryParamIssueIDTypeArrayOfstr

	return GetTransformationExecutionsQueryParamIssueID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *GetTransformationExecutionsQueryParamIssueID) UnmarshalJSON(data []byte) error {

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GetTransformationExecutionsQueryParamIssueIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = GetTransformationExecutionsQueryParamIssueIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetTransformationExecutionsQueryParamIssueID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetTransformationExecutionsQueryParamTransformationExecutionsLogLevel2 string

const (
	GetTransformationExecutionsQueryParamTransformationExecutionsLogLevel2LessThanNilGreaterThan GetTransformationExecutionsQueryParamTransformationExecutionsLogLevel2 = "<nil>"
	GetTransformationExecutionsQueryParamTransformationExecutionsLogLevel2Debug                  GetTransformationExecutionsQueryParamTransformationExecutionsLogLevel2 = "debug"
	GetTransformationExecutionsQueryParamTransformationExecutionsLogLevel2Info                   GetTransformationExecutionsQueryParamTransformationExecutionsLogLevel2 = "info"
	GetTransformationExecutionsQueryParamTransformationExecutionsLogLevel2Warn                   GetTransformationExecutionsQueryParamTransformationExecutionsLogLevel2 = "warn"
	GetTransformationExecutionsQueryParamTransformationExecutionsLogLevel2Error                  GetTransformationExecutionsQueryParamTransformationExecutionsLogLevel2 = "error"
	GetTransformationExecutionsQueryParamTransformationExecutionsLogLevel2Fatal                  GetTransformationExecutionsQueryParamTransformationExecutionsLogLevel2 = "fatal"
)

func (e GetTransformationExecutionsQueryParamTransformationExecutionsLogLevel2) ToPointer() *GetTransformationExecutionsQueryParamTransformationExecutionsLogLevel2 {
	return &e
}

func (e *GetTransformationExecutionsQueryParamTransformationExecutionsLogLevel2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "<nil>":
		fallthrough
	case "debug":
		fallthrough
	case "info":
		fallthrough
	case "warn":
		fallthrough
	case "error":
		fallthrough
	case "fatal":
		*e = GetTransformationExecutionsQueryParamTransformationExecutionsLogLevel2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetTransformationExecutionsQueryParamTransformationExecutionsLogLevel2: %v", v)
	}
}

type GetTransformationExecutionsQueryParamTransformationExecutions1 string

const (
	GetTransformationExecutionsQueryParamTransformationExecutions1LessThanNilGreaterThan GetTransformationExecutionsQueryParamTransformationExecutions1 = "<nil>"
	GetTransformationExecutionsQueryParamTransformationExecutions1Debug                  GetTransformationExecutionsQueryParamTransformationExecutions1 = "debug"
	GetTransformationExecutionsQueryParamTransformationExecutions1Info                   GetTransformationExecutionsQueryParamTransformationExecutions1 = "info"
	GetTransformationExecutionsQueryParamTransformationExecutions1Warn                   GetTransformationExecutionsQueryParamTransformationExecutions1 = "warn"
	GetTransformationExecutionsQueryParamTransformationExecutions1Error                  GetTransformationExecutionsQueryParamTransformationExecutions1 = "error"
	GetTransformationExecutionsQueryParamTransformationExecutions1Fatal                  GetTransformationExecutionsQueryParamTransformationExecutions1 = "fatal"
)

func (e GetTransformationExecutionsQueryParamTransformationExecutions1) ToPointer() *GetTransformationExecutionsQueryParamTransformationExecutions1 {
	return &e
}

func (e *GetTransformationExecutionsQueryParamTransformationExecutions1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "<nil>":
		fallthrough
	case "debug":
		fallthrough
	case "info":
		fallthrough
	case "warn":
		fallthrough
	case "error":
		fallthrough
	case "fatal":
		*e = GetTransformationExecutionsQueryParamTransformationExecutions1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetTransformationExecutionsQueryParamTransformationExecutions1: %v", v)
	}
}

type LogLevelType string

const (
	LogLevelTypeGetTransformationExecutionsQueryParamTransformationExecutions1                LogLevelType = "getTransformationExecutions_queryParam_TransformationExecutions_1"
	LogLevelTypeArrayOfgetTransformationExecutionsQueryParamTransformationExecutionsLogLevel2 LogLevelType = "arrayOfgetTransformationExecutions_queryParam_TransformationExecutions_log_level_2"
)

// LogLevel - Log level of the execution
type LogLevel struct {
	GetTransformationExecutionsQueryParamTransformationExecutions1                *GetTransformationExecutionsQueryParamTransformationExecutions1
	ArrayOfgetTransformationExecutionsQueryParamTransformationExecutionsLogLevel2 []GetTransformationExecutionsQueryParamTransformationExecutionsLogLevel2

	Type LogLevelType
}

func CreateLogLevelGetTransformationExecutionsQueryParamTransformationExecutions1(getTransformationExecutionsQueryParamTransformationExecutions1 GetTransformationExecutionsQueryParamTransformationExecutions1) LogLevel {
	typ := LogLevelTypeGetTransformationExecutionsQueryParamTransformationExecutions1

	return LogLevel{
		GetTransformationExecutionsQueryParamTransformationExecutions1: &getTransformationExecutionsQueryParamTransformationExecutions1,
		Type: typ,
	}
}

func CreateLogLevelArrayOfgetTransformationExecutionsQueryParamTransformationExecutionsLogLevel2(arrayOfgetTransformationExecutionsQueryParamTransformationExecutionsLogLevel2 []GetTransformationExecutionsQueryParamTransformationExecutionsLogLevel2) LogLevel {
	typ := LogLevelTypeArrayOfgetTransformationExecutionsQueryParamTransformationExecutionsLogLevel2

	return LogLevel{
		ArrayOfgetTransformationExecutionsQueryParamTransformationExecutionsLogLevel2: arrayOfgetTransformationExecutionsQueryParamTransformationExecutionsLogLevel2,
		Type: typ,
	}
}

func (u *LogLevel) UnmarshalJSON(data []byte) error {

	getTransformationExecutionsQueryParamTransformationExecutions1 := GetTransformationExecutionsQueryParamTransformationExecutions1("")
	if err := utils.UnmarshalJSON(data, &getTransformationExecutionsQueryParamTransformationExecutions1, "", true, true); err == nil {
		u.GetTransformationExecutionsQueryParamTransformationExecutions1 = &getTransformationExecutionsQueryParamTransformationExecutions1
		u.Type = LogLevelTypeGetTransformationExecutionsQueryParamTransformationExecutions1
		return nil
	}

	arrayOfgetTransformationExecutionsQueryParamTransformationExecutionsLogLevel2 := []GetTransformationExecutionsQueryParamTransformationExecutionsLogLevel2{}
	if err := utils.UnmarshalJSON(data, &arrayOfgetTransformationExecutionsQueryParamTransformationExecutionsLogLevel2, "", true, true); err == nil {
		u.ArrayOfgetTransformationExecutionsQueryParamTransformationExecutionsLogLevel2 = arrayOfgetTransformationExecutionsQueryParamTransformationExecutionsLogLevel2
		u.Type = LogLevelTypeArrayOfgetTransformationExecutionsQueryParamTransformationExecutionsLogLevel2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u LogLevel) MarshalJSON() ([]byte, error) {
	if u.GetTransformationExecutionsQueryParamTransformationExecutions1 != nil {
		return utils.MarshalJSON(u.GetTransformationExecutionsQueryParamTransformationExecutions1, "", true)
	}

	if u.ArrayOfgetTransformationExecutionsQueryParamTransformationExecutionsLogLevel2 != nil {
		return utils.MarshalJSON(u.ArrayOfgetTransformationExecutionsQueryParamTransformationExecutionsLogLevel2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetTransformationExecutionsQueryParamTransformationExecutionsOrderBy2 string

const (
	GetTransformationExecutionsQueryParamTransformationExecutionsOrderBy2CreatedAt GetTransformationExecutionsQueryParamTransformationExecutionsOrderBy2 = "created_at"
)

func (e GetTransformationExecutionsQueryParamTransformationExecutionsOrderBy2) ToPointer() *GetTransformationExecutionsQueryParamTransformationExecutionsOrderBy2 {
	return &e
}

func (e *GetTransformationExecutionsQueryParamTransformationExecutionsOrderBy2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "created_at":
		*e = GetTransformationExecutionsQueryParamTransformationExecutionsOrderBy2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetTransformationExecutionsQueryParamTransformationExecutionsOrderBy2: %v", v)
	}
}

type GetTransformationExecutionsQueryParamTransformationExecutionsOrderBy1 string

const (
	GetTransformationExecutionsQueryParamTransformationExecutionsOrderBy1CreatedAt GetTransformationExecutionsQueryParamTransformationExecutionsOrderBy1 = "created_at"
)

func (e GetTransformationExecutionsQueryParamTransformationExecutionsOrderBy1) ToPointer() *GetTransformationExecutionsQueryParamTransformationExecutionsOrderBy1 {
	return &e
}

func (e *GetTransformationExecutionsQueryParamTransformationExecutionsOrderBy1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "created_at":
		*e = GetTransformationExecutionsQueryParamTransformationExecutionsOrderBy1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetTransformationExecutionsQueryParamTransformationExecutionsOrderBy1: %v", v)
	}
}

type GetTransformationExecutionsQueryParamOrderByType string

const (
	GetTransformationExecutionsQueryParamOrderByTypeGetTransformationExecutionsQueryParamTransformationExecutionsOrderBy1        GetTransformationExecutionsQueryParamOrderByType = "getTransformationExecutions_queryParam_TransformationExecutions_order_by_1"
	GetTransformationExecutionsQueryParamOrderByTypeArrayOfgetTransformationExecutionsQueryParamTransformationExecutionsOrderBy2 GetTransformationExecutionsQueryParamOrderByType = "arrayOfgetTransformationExecutions_queryParam_TransformationExecutions_order_by_2"
)

// GetTransformationExecutionsQueryParamOrderBy - Sort key(s)
type GetTransformationExecutionsQueryParamOrderBy struct {
	GetTransformationExecutionsQueryParamTransformationExecutionsOrderBy1        *GetTransformationExecutionsQueryParamTransformationExecutionsOrderBy1
	ArrayOfgetTransformationExecutionsQueryParamTransformationExecutionsOrderBy2 []GetTransformationExecutionsQueryParamTransformationExecutionsOrderBy2

	Type GetTransformationExecutionsQueryParamOrderByType
}

func CreateGetTransformationExecutionsQueryParamOrderByGetTransformationExecutionsQueryParamTransformationExecutionsOrderBy1(getTransformationExecutionsQueryParamTransformationExecutionsOrderBy1 GetTransformationExecutionsQueryParamTransformationExecutionsOrderBy1) GetTransformationExecutionsQueryParamOrderBy {
	typ := GetTransformationExecutionsQueryParamOrderByTypeGetTransformationExecutionsQueryParamTransformationExecutionsOrderBy1

	return GetTransformationExecutionsQueryParamOrderBy{
		GetTransformationExecutionsQueryParamTransformationExecutionsOrderBy1: &getTransformationExecutionsQueryParamTransformationExecutionsOrderBy1,
		Type: typ,
	}
}

func CreateGetTransformationExecutionsQueryParamOrderByArrayOfgetTransformationExecutionsQueryParamTransformationExecutionsOrderBy2(arrayOfgetTransformationExecutionsQueryParamTransformationExecutionsOrderBy2 []GetTransformationExecutionsQueryParamTransformationExecutionsOrderBy2) GetTransformationExecutionsQueryParamOrderBy {
	typ := GetTransformationExecutionsQueryParamOrderByTypeArrayOfgetTransformationExecutionsQueryParamTransformationExecutionsOrderBy2

	return GetTransformationExecutionsQueryParamOrderBy{
		ArrayOfgetTransformationExecutionsQueryParamTransformationExecutionsOrderBy2: arrayOfgetTransformationExecutionsQueryParamTransformationExecutionsOrderBy2,
		Type: typ,
	}
}

func (u *GetTransformationExecutionsQueryParamOrderBy) UnmarshalJSON(data []byte) error {

	getTransformationExecutionsQueryParamTransformationExecutionsOrderBy1 := GetTransformationExecutionsQueryParamTransformationExecutionsOrderBy1("")
	if err := utils.UnmarshalJSON(data, &getTransformationExecutionsQueryParamTransformationExecutionsOrderBy1, "", true, true); err == nil {
		u.GetTransformationExecutionsQueryParamTransformationExecutionsOrderBy1 = &getTransformationExecutionsQueryParamTransformationExecutionsOrderBy1
		u.Type = GetTransformationExecutionsQueryParamOrderByTypeGetTransformationExecutionsQueryParamTransformationExecutionsOrderBy1
		return nil
	}

	arrayOfgetTransformationExecutionsQueryParamTransformationExecutionsOrderBy2 := []GetTransformationExecutionsQueryParamTransformationExecutionsOrderBy2{}
	if err := utils.UnmarshalJSON(data, &arrayOfgetTransformationExecutionsQueryParamTransformationExecutionsOrderBy2, "", true, true); err == nil {
		u.ArrayOfgetTransformationExecutionsQueryParamTransformationExecutionsOrderBy2 = arrayOfgetTransformationExecutionsQueryParamTransformationExecutionsOrderBy2
		u.Type = GetTransformationExecutionsQueryParamOrderByTypeArrayOfgetTransformationExecutionsQueryParamTransformationExecutionsOrderBy2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetTransformationExecutionsQueryParamOrderBy) MarshalJSON() ([]byte, error) {
	if u.GetTransformationExecutionsQueryParamTransformationExecutionsOrderBy1 != nil {
		return utils.MarshalJSON(u.GetTransformationExecutionsQueryParamTransformationExecutionsOrderBy1, "", true)
	}

	if u.ArrayOfgetTransformationExecutionsQueryParamTransformationExecutionsOrderBy2 != nil {
		return utils.MarshalJSON(u.ArrayOfgetTransformationExecutionsQueryParamTransformationExecutionsOrderBy2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetTransformationExecutionsQueryParamWebhookIDType string

const (
	GetTransformationExecutionsQueryParamWebhookIDTypeStr        GetTransformationExecutionsQueryParamWebhookIDType = "str"
	GetTransformationExecutionsQueryParamWebhookIDTypeArrayOfstr GetTransformationExecutionsQueryParamWebhookIDType = "arrayOfstr"
)

// GetTransformationExecutionsQueryParamWebhookID - ID of the connection the execution was run for
type GetTransformationExecutionsQueryParamWebhookID struct {
	Str        *string
	ArrayOfstr []string

	Type GetTransformationExecutionsQueryParamWebhookIDType
}

func CreateGetTransformationExecutionsQueryParamWebhookIDStr(str string) GetTransformationExecutionsQueryParamWebhookID {
	typ := GetTransformationExecutionsQueryParamWebhookIDTypeStr

	return GetTransformationExecutionsQueryParamWebhookID{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetTransformationExecutionsQueryParamWebhookIDArrayOfstr(arrayOfstr []string) GetTransformationExecutionsQueryParamWebhookID {
	typ := GetTransformationExecutionsQueryParamWebhookIDTypeArrayOfstr

	return GetTransformationExecutionsQueryParamWebhookID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *GetTransformationExecutionsQueryParamWebhookID) UnmarshalJSON(data []byte) error {

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GetTransformationExecutionsQueryParamWebhookIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = GetTransformationExecutionsQueryParamWebhookIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetTransformationExecutionsQueryParamWebhookID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetTransformationExecutionsRequest struct {
	// ISO date of the transformation's execution
	CreatedAt *GetTransformationExecutionsQueryParamCreatedAt `queryParam:"style=form,explode=true,name=created_at"`
	// Sort direction
	Dir *GetTransformationExecutionsQueryParamDir `queryParam:"style=form,explode=true,name=dir"`
	ID  string                                    `pathParam:"style=simple,explode=false,name=id"`
	// ID of the associated issue
	IssueID *GetTransformationExecutionsQueryParamIssueID `queryParam:"style=form,explode=true,name=issue_id"`
	Limit   *int64                                        `queryParam:"style=form,explode=true,name=limit"`
	// Log level of the execution
	LogLevel *LogLevel `queryParam:"style=form,explode=true,name=log_level"`
	Next     *string   `queryParam:"style=form,explode=true,name=next"`
	// Sort key(s)
	OrderBy *GetTransformationExecutionsQueryParamOrderBy `queryParam:"style=form,explode=true,name=order_by"`
	Prev    *string                                       `queryParam:"style=form,explode=true,name=prev"`
	// ID of the connection the execution was run for
	WebhookID *GetTransformationExecutionsQueryParamWebhookID `queryParam:"style=form,explode=true,name=webhook_id"`
}

func (o *GetTransformationExecutionsRequest) GetCreatedAt() *GetTransformationExecutionsQueryParamCreatedAt {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetTransformationExecutionsRequest) GetDir() *GetTransformationExecutionsQueryParamDir {
	if o == nil {
		return nil
	}
	return o.Dir
}

func (o *GetTransformationExecutionsRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetTransformationExecutionsRequest) GetIssueID() *GetTransformationExecutionsQueryParamIssueID {
	if o == nil {
		return nil
	}
	return o.IssueID
}

func (o *GetTransformationExecutionsRequest) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *GetTransformationExecutionsRequest) GetLogLevel() *LogLevel {
	if o == nil {
		return nil
	}
	return o.LogLevel
}

func (o *GetTransformationExecutionsRequest) GetNext() *string {
	if o == nil {
		return nil
	}
	return o.Next
}

func (o *GetTransformationExecutionsRequest) GetOrderBy() *GetTransformationExecutionsQueryParamOrderBy {
	if o == nil {
		return nil
	}
	return o.OrderBy
}

func (o *GetTransformationExecutionsRequest) GetPrev() *string {
	if o == nil {
		return nil
	}
	return o.Prev
}

func (o *GetTransformationExecutionsRequest) GetWebhookID() *GetTransformationExecutionsQueryParamWebhookID {
	if o == nil {
		return nil
	}
	return o.WebhookID
}

type GetTransformationExecutionsResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// List of transformation executions
	TransformationExecutionPaginatedResult *components.TransformationExecutionPaginatedResult
}

func (o *GetTransformationExecutionsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetTransformationExecutionsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetTransformationExecutionsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GetTransformationExecutionsResponse) GetTransformationExecutionPaginatedResult() *components.TransformationExecutionPaginatedResult {
	if o == nil {
		return nil
	}
	return o.TransformationExecutionPaginatedResult
}
