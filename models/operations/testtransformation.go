// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"errors"
	"github.com/speakeasy-sdks/hookdeck-go/v2/internal/utils"
	"github.com/speakeasy-sdks/hookdeck-go/v2/models/components"
	"net/http"
)

// TestTransformationEnv - Key-value environment variables to be passed to the transformation
type TestTransformationEnv struct {
}

type TestTransformation1 struct {
}

type TestTransformationBodyType string

const (
	TestTransformationBodyTypeTestTransformation1 TestTransformationBodyType = "testTransformation_1"
	TestTransformationBodyTypeStr                 TestTransformationBodyType = "str"
)

// TestTransformationBody - Body of the request
type TestTransformationBody struct {
	TestTransformation1 *TestTransformation1
	Str                 *string

	Type TestTransformationBodyType
}

func CreateTestTransformationBodyTestTransformation1(testTransformation1 TestTransformation1) TestTransformationBody {
	typ := TestTransformationBodyTypeTestTransformation1

	return TestTransformationBody{
		TestTransformation1: &testTransformation1,
		Type:                typ,
	}
}

func CreateTestTransformationBodyStr(str string) TestTransformationBody {
	typ := TestTransformationBodyTypeStr

	return TestTransformationBody{
		Str:  &str,
		Type: typ,
	}
}

func (u *TestTransformationBody) UnmarshalJSON(data []byte) error {

	testTransformation1 := TestTransformation1{}
	if err := utils.UnmarshalJSON(data, &testTransformation1, "", true, true); err == nil {
		u.TestTransformation1 = &testTransformation1
		u.Type = TestTransformationBodyTypeTestTransformation1
		return nil
	}

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = TestTransformationBodyTypeStr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u TestTransformationBody) MarshalJSON() ([]byte, error) {
	if u.TestTransformation1 != nil {
		return utils.MarshalJSON(u.TestTransformation1, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// TestTransformationParsedQuery - JSON representation of the query params
type TestTransformationParsedQuery struct {
}

// Request input to use for the transformation execution
type Request struct {
	// Body of the request
	Body *TestTransformationBody `json:"body,omitempty"`
	// Headers of the request
	Headers map[string]string `json:"headers"`
	// JSON representation of the query params
	ParsedQuery *TestTransformationParsedQuery `json:"parsed_query,omitempty"`
	// Path of the request
	Path *string `json:"path,omitempty"`
	// String representation of the query params of the request
	Query *string `json:"query,omitempty"`
}

func (o *Request) GetBody() *TestTransformationBody {
	if o == nil {
		return nil
	}
	return o.Body
}

func (o *Request) GetHeaders() map[string]string {
	if o == nil {
		return map[string]string{}
	}
	return o.Headers
}

func (o *Request) GetParsedQuery() *TestTransformationParsedQuery {
	if o == nil {
		return nil
	}
	return o.ParsedQuery
}

func (o *Request) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

func (o *Request) GetQuery() *string {
	if o == nil {
		return nil
	}
	return o.Query
}

type TestTransformationRequestBody struct {
	// JavaScript code to be executed
	Code *string `json:"code,omitempty"`
	// Key-value environment variables to be passed to the transformation
	Env     *TestTransformationEnv `json:"env,omitempty"`
	EventID *string                `json:"event_id,omitempty"`
	// Request input to use for the transformation execution
	Request *Request `json:"request,omitempty"`
	// Transformation ID
	TransformationID *string `json:"transformation_id,omitempty"`
	// ID of the connection to use for the execution `context`
	WebhookID *string `json:"webhook_id,omitempty"`
}

func (o *TestTransformationRequestBody) GetCode() *string {
	if o == nil {
		return nil
	}
	return o.Code
}

func (o *TestTransformationRequestBody) GetEnv() *TestTransformationEnv {
	if o == nil {
		return nil
	}
	return o.Env
}

func (o *TestTransformationRequestBody) GetEventID() *string {
	if o == nil {
		return nil
	}
	return o.EventID
}

func (o *TestTransformationRequestBody) GetRequest() *Request {
	if o == nil {
		return nil
	}
	return o.Request
}

func (o *TestTransformationRequestBody) GetTransformationID() *string {
	if o == nil {
		return nil
	}
	return o.TransformationID
}

func (o *TestTransformationRequestBody) GetWebhookID() *string {
	if o == nil {
		return nil
	}
	return o.WebhookID
}

type TestTransformationResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Transformation run output
	TransformationExecutorOutput *components.TransformationExecutorOutput
}

func (o *TestTransformationResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *TestTransformationResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *TestTransformationResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *TestTransformationResponse) GetTransformationExecutorOutput() *components.TransformationExecutorOutput {
	if o == nil {
		return nil
	}
	return o.TransformationExecutorOutput
}
