// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/speakeasy-sdks/hookdeck-go/internal/utils"
	"github.com/speakeasy-sdks/hookdeck-go/models/components"
	"net/http"
	"time"
)

// GetIgnoredEventBulkRetriesQueryParam2 - Filter by date the bulk retry was cancelled
type GetIgnoredEventBulkRetriesQueryParam2 struct {
	Any *bool      `queryParam:"name=any"`
	Gt  *time.Time `queryParam:"name=gt"`
	Gte *time.Time `queryParam:"name=gte"`
	Le  *time.Time `queryParam:"name=le"`
	Lte *time.Time `queryParam:"name=lte"`
}

func (g GetIgnoredEventBulkRetriesQueryParam2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetIgnoredEventBulkRetriesQueryParam2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetIgnoredEventBulkRetriesQueryParam2) GetAny() *bool {
	if o == nil {
		return nil
	}
	return o.Any
}

func (o *GetIgnoredEventBulkRetriesQueryParam2) GetGt() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *GetIgnoredEventBulkRetriesQueryParam2) GetGte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *GetIgnoredEventBulkRetriesQueryParam2) GetLe() *time.Time {
	if o == nil {
		return nil
	}
	return o.Le
}

func (o *GetIgnoredEventBulkRetriesQueryParam2) GetLte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Lte
}

type QueryParamCancelledAtType string

const (
	QueryParamCancelledAtTypeDateTime                              QueryParamCancelledAtType = "date-time"
	QueryParamCancelledAtTypeGetIgnoredEventBulkRetriesQueryParam2 QueryParamCancelledAtType = "getIgnoredEventBulkRetries_queryParam_2"
)

type QueryParamCancelledAt struct {
	DateTime                              *time.Time
	GetIgnoredEventBulkRetriesQueryParam2 *GetIgnoredEventBulkRetriesQueryParam2

	Type QueryParamCancelledAtType
}

func CreateQueryParamCancelledAtDateTime(dateTime time.Time) QueryParamCancelledAt {
	typ := QueryParamCancelledAtTypeDateTime

	return QueryParamCancelledAt{
		DateTime: &dateTime,
		Type:     typ,
	}
}

func CreateQueryParamCancelledAtGetIgnoredEventBulkRetriesQueryParam2(getIgnoredEventBulkRetriesQueryParam2 GetIgnoredEventBulkRetriesQueryParam2) QueryParamCancelledAt {
	typ := QueryParamCancelledAtTypeGetIgnoredEventBulkRetriesQueryParam2

	return QueryParamCancelledAt{
		GetIgnoredEventBulkRetriesQueryParam2: &getIgnoredEventBulkRetriesQueryParam2,
		Type:                                  typ,
	}
}

func (u *QueryParamCancelledAt) UnmarshalJSON(data []byte) error {

	getIgnoredEventBulkRetriesQueryParam2 := GetIgnoredEventBulkRetriesQueryParam2{}
	if err := utils.UnmarshalJSON(data, &getIgnoredEventBulkRetriesQueryParam2, "", true, true); err == nil {
		u.GetIgnoredEventBulkRetriesQueryParam2 = &getIgnoredEventBulkRetriesQueryParam2
		u.Type = QueryParamCancelledAtTypeGetIgnoredEventBulkRetriesQueryParam2
		return nil
	}

	dateTime := time.Time{}
	if err := utils.UnmarshalJSON(data, &dateTime, "", true, true); err == nil {
		u.DateTime = &dateTime
		u.Type = QueryParamCancelledAtTypeDateTime
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u QueryParamCancelledAt) MarshalJSON() ([]byte, error) {
	if u.DateTime != nil {
		return utils.MarshalJSON(u.DateTime, "", true)
	}

	if u.GetIgnoredEventBulkRetriesQueryParam2 != nil {
		return utils.MarshalJSON(u.GetIgnoredEventBulkRetriesQueryParam2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// GetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEvents2 - Filter by date the bulk retry completed
type GetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEvents2 struct {
	Any *bool      `queryParam:"name=any"`
	Gt  *time.Time `queryParam:"name=gt"`
	Gte *time.Time `queryParam:"name=gte"`
	Le  *time.Time `queryParam:"name=le"`
	Lte *time.Time `queryParam:"name=lte"`
}

func (g GetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEvents2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEvents2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEvents2) GetAny() *bool {
	if o == nil {
		return nil
	}
	return o.Any
}

func (o *GetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEvents2) GetGt() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *GetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEvents2) GetGte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *GetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEvents2) GetLe() *time.Time {
	if o == nil {
		return nil
	}
	return o.Le
}

func (o *GetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEvents2) GetLte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Lte
}

type QueryParamCompletedAtType string

const (
	QueryParamCompletedAtTypeDateTime                                                    QueryParamCompletedAtType = "date-time"
	QueryParamCompletedAtTypeGetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEvents2 QueryParamCompletedAtType = "getIgnoredEventBulkRetries_queryParam_BulkRetryIgnoredEvents_2"
)

type QueryParamCompletedAt struct {
	DateTime                                                    *time.Time
	GetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEvents2 *GetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEvents2

	Type QueryParamCompletedAtType
}

func CreateQueryParamCompletedAtDateTime(dateTime time.Time) QueryParamCompletedAt {
	typ := QueryParamCompletedAtTypeDateTime

	return QueryParamCompletedAt{
		DateTime: &dateTime,
		Type:     typ,
	}
}

func CreateQueryParamCompletedAtGetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEvents2(getIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEvents2 GetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEvents2) QueryParamCompletedAt {
	typ := QueryParamCompletedAtTypeGetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEvents2

	return QueryParamCompletedAt{
		GetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEvents2: &getIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEvents2,
		Type: typ,
	}
}

func (u *QueryParamCompletedAt) UnmarshalJSON(data []byte) error {

	getIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEvents2 := GetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEvents2{}
	if err := utils.UnmarshalJSON(data, &getIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEvents2, "", true, true); err == nil {
		u.GetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEvents2 = &getIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEvents2
		u.Type = QueryParamCompletedAtTypeGetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEvents2
		return nil
	}

	dateTime := time.Time{}
	if err := utils.UnmarshalJSON(data, &dateTime, "", true, true); err == nil {
		u.DateTime = &dateTime
		u.Type = QueryParamCompletedAtTypeDateTime
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u QueryParamCompletedAt) MarshalJSON() ([]byte, error) {
	if u.DateTime != nil {
		return utils.MarshalJSON(u.DateTime, "", true)
	}

	if u.GetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEvents2 != nil {
		return utils.MarshalJSON(u.GetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEvents2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// GetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEventsCreatedAt2 - Filter by date the bulk retry was created
type GetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEventsCreatedAt2 struct {
	Any *bool      `queryParam:"name=any"`
	Gt  *time.Time `queryParam:"name=gt"`
	Gte *time.Time `queryParam:"name=gte"`
	Le  *time.Time `queryParam:"name=le"`
	Lte *time.Time `queryParam:"name=lte"`
}

func (g GetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEventsCreatedAt2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEventsCreatedAt2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEventsCreatedAt2) GetAny() *bool {
	if o == nil {
		return nil
	}
	return o.Any
}

func (o *GetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEventsCreatedAt2) GetGt() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *GetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEventsCreatedAt2) GetGte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *GetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEventsCreatedAt2) GetLe() *time.Time {
	if o == nil {
		return nil
	}
	return o.Le
}

func (o *GetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEventsCreatedAt2) GetLte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Lte
}

type GetIgnoredEventBulkRetriesQueryParamCreatedAtType string

const (
	GetIgnoredEventBulkRetriesQueryParamCreatedAtTypeDateTime                                                             GetIgnoredEventBulkRetriesQueryParamCreatedAtType = "date-time"
	GetIgnoredEventBulkRetriesQueryParamCreatedAtTypeGetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEventsCreatedAt2 GetIgnoredEventBulkRetriesQueryParamCreatedAtType = "getIgnoredEventBulkRetries_queryParam_BulkRetryIgnoredEvents_created_at_2"
)

type GetIgnoredEventBulkRetriesQueryParamCreatedAt struct {
	DateTime                                                             *time.Time
	GetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEventsCreatedAt2 *GetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEventsCreatedAt2

	Type GetIgnoredEventBulkRetriesQueryParamCreatedAtType
}

func CreateGetIgnoredEventBulkRetriesQueryParamCreatedAtDateTime(dateTime time.Time) GetIgnoredEventBulkRetriesQueryParamCreatedAt {
	typ := GetIgnoredEventBulkRetriesQueryParamCreatedAtTypeDateTime

	return GetIgnoredEventBulkRetriesQueryParamCreatedAt{
		DateTime: &dateTime,
		Type:     typ,
	}
}

func CreateGetIgnoredEventBulkRetriesQueryParamCreatedAtGetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEventsCreatedAt2(getIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEventsCreatedAt2 GetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEventsCreatedAt2) GetIgnoredEventBulkRetriesQueryParamCreatedAt {
	typ := GetIgnoredEventBulkRetriesQueryParamCreatedAtTypeGetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEventsCreatedAt2

	return GetIgnoredEventBulkRetriesQueryParamCreatedAt{
		GetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEventsCreatedAt2: &getIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEventsCreatedAt2,
		Type: typ,
	}
}

func (u *GetIgnoredEventBulkRetriesQueryParamCreatedAt) UnmarshalJSON(data []byte) error {

	getIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEventsCreatedAt2 := GetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEventsCreatedAt2{}
	if err := utils.UnmarshalJSON(data, &getIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEventsCreatedAt2, "", true, true); err == nil {
		u.GetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEventsCreatedAt2 = &getIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEventsCreatedAt2
		u.Type = GetIgnoredEventBulkRetriesQueryParamCreatedAtTypeGetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEventsCreatedAt2
		return nil
	}

	dateTime := time.Time{}
	if err := utils.UnmarshalJSON(data, &dateTime, "", true, true); err == nil {
		u.DateTime = &dateTime
		u.Type = GetIgnoredEventBulkRetriesQueryParamCreatedAtTypeDateTime
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetIgnoredEventBulkRetriesQueryParamCreatedAt) MarshalJSON() ([]byte, error) {
	if u.DateTime != nil {
		return utils.MarshalJSON(u.DateTime, "", true)
	}

	if u.GetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEventsCreatedAt2 != nil {
		return utils.MarshalJSON(u.GetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEventsCreatedAt2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEventsDir2 string

const (
	GetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEventsDir2Asc  GetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEventsDir2 = "asc"
	GetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEventsDir2Desc GetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEventsDir2 = "desc"
)

func (e GetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEventsDir2) ToPointer() *GetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEventsDir2 {
	return &e
}

func (e *GetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEventsDir2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = GetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEventsDir2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEventsDir2: %v", v)
	}
}

// GetIgnoredEventBulkRetriesQueryParam1 - Sort direction
type GetIgnoredEventBulkRetriesQueryParam1 string

const (
	GetIgnoredEventBulkRetriesQueryParam1Asc  GetIgnoredEventBulkRetriesQueryParam1 = "asc"
	GetIgnoredEventBulkRetriesQueryParam1Desc GetIgnoredEventBulkRetriesQueryParam1 = "desc"
)

func (e GetIgnoredEventBulkRetriesQueryParam1) ToPointer() *GetIgnoredEventBulkRetriesQueryParam1 {
	return &e
}

func (e *GetIgnoredEventBulkRetriesQueryParam1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = GetIgnoredEventBulkRetriesQueryParam1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetIgnoredEventBulkRetriesQueryParam1: %v", v)
	}
}

type GetIgnoredEventBulkRetriesQueryParamDirType string

const (
	GetIgnoredEventBulkRetriesQueryParamDirTypeGetIgnoredEventBulkRetriesQueryParam1                                 GetIgnoredEventBulkRetriesQueryParamDirType = "getIgnoredEventBulkRetries_queryParam_1"
	GetIgnoredEventBulkRetriesQueryParamDirTypeArrayOfgetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEventsDir2 GetIgnoredEventBulkRetriesQueryParamDirType = "arrayOfgetIgnoredEventBulkRetries_queryParam_BulkRetryIgnoredEvents_dir_2"
)

type GetIgnoredEventBulkRetriesQueryParamDir struct {
	GetIgnoredEventBulkRetriesQueryParam1                                 *GetIgnoredEventBulkRetriesQueryParam1
	ArrayOfgetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEventsDir2 []GetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEventsDir2

	Type GetIgnoredEventBulkRetriesQueryParamDirType
}

func CreateGetIgnoredEventBulkRetriesQueryParamDirGetIgnoredEventBulkRetriesQueryParam1(getIgnoredEventBulkRetriesQueryParam1 GetIgnoredEventBulkRetriesQueryParam1) GetIgnoredEventBulkRetriesQueryParamDir {
	typ := GetIgnoredEventBulkRetriesQueryParamDirTypeGetIgnoredEventBulkRetriesQueryParam1

	return GetIgnoredEventBulkRetriesQueryParamDir{
		GetIgnoredEventBulkRetriesQueryParam1: &getIgnoredEventBulkRetriesQueryParam1,
		Type:                                  typ,
	}
}

func CreateGetIgnoredEventBulkRetriesQueryParamDirArrayOfgetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEventsDir2(arrayOfgetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEventsDir2 []GetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEventsDir2) GetIgnoredEventBulkRetriesQueryParamDir {
	typ := GetIgnoredEventBulkRetriesQueryParamDirTypeArrayOfgetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEventsDir2

	return GetIgnoredEventBulkRetriesQueryParamDir{
		ArrayOfgetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEventsDir2: arrayOfgetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEventsDir2,
		Type: typ,
	}
}

func (u *GetIgnoredEventBulkRetriesQueryParamDir) UnmarshalJSON(data []byte) error {

	getIgnoredEventBulkRetriesQueryParam1 := GetIgnoredEventBulkRetriesQueryParam1("")
	if err := utils.UnmarshalJSON(data, &getIgnoredEventBulkRetriesQueryParam1, "", true, true); err == nil {
		u.GetIgnoredEventBulkRetriesQueryParam1 = &getIgnoredEventBulkRetriesQueryParam1
		u.Type = GetIgnoredEventBulkRetriesQueryParamDirTypeGetIgnoredEventBulkRetriesQueryParam1
		return nil
	}

	arrayOfgetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEventsDir2 := []GetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEventsDir2{}
	if err := utils.UnmarshalJSON(data, &arrayOfgetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEventsDir2, "", true, true); err == nil {
		u.ArrayOfgetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEventsDir2 = arrayOfgetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEventsDir2
		u.Type = GetIgnoredEventBulkRetriesQueryParamDirTypeArrayOfgetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEventsDir2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetIgnoredEventBulkRetriesQueryParamDir) MarshalJSON() ([]byte, error) {
	if u.GetIgnoredEventBulkRetriesQueryParam1 != nil {
		return utils.MarshalJSON(u.GetIgnoredEventBulkRetriesQueryParam1, "", true)
	}

	if u.ArrayOfgetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEventsDir2 != nil {
		return utils.MarshalJSON(u.ArrayOfgetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEventsDir2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetIgnoredEventBulkRetriesQueryParamIDType string

const (
	GetIgnoredEventBulkRetriesQueryParamIDTypeStr        GetIgnoredEventBulkRetriesQueryParamIDType = "str"
	GetIgnoredEventBulkRetriesQueryParamIDTypeArrayOfstr GetIgnoredEventBulkRetriesQueryParamIDType = "arrayOfstr"
)

type GetIgnoredEventBulkRetriesQueryParamID struct {
	Str        *string
	ArrayOfstr []string

	Type GetIgnoredEventBulkRetriesQueryParamIDType
}

func CreateGetIgnoredEventBulkRetriesQueryParamIDStr(str string) GetIgnoredEventBulkRetriesQueryParamID {
	typ := GetIgnoredEventBulkRetriesQueryParamIDTypeStr

	return GetIgnoredEventBulkRetriesQueryParamID{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetIgnoredEventBulkRetriesQueryParamIDArrayOfstr(arrayOfstr []string) GetIgnoredEventBulkRetriesQueryParamID {
	typ := GetIgnoredEventBulkRetriesQueryParamIDTypeArrayOfstr

	return GetIgnoredEventBulkRetriesQueryParamID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *GetIgnoredEventBulkRetriesQueryParamID) UnmarshalJSON(data []byte) error {

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GetIgnoredEventBulkRetriesQueryParamIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = GetIgnoredEventBulkRetriesQueryParamIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetIgnoredEventBulkRetriesQueryParamID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEventsOrderBy2 string

const (
	GetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEventsOrderBy2CreatedAt GetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEventsOrderBy2 = "created_at"
)

func (e GetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEventsOrderBy2) ToPointer() *GetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEventsOrderBy2 {
	return &e
}

func (e *GetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEventsOrderBy2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "created_at":
		*e = GetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEventsOrderBy2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEventsOrderBy2: %v", v)
	}
}

// GetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEvents1 - Sort key(s)
type GetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEvents1 string

const (
	GetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEvents1CreatedAt GetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEvents1 = "created_at"
)

func (e GetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEvents1) ToPointer() *GetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEvents1 {
	return &e
}

func (e *GetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEvents1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "created_at":
		*e = GetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEvents1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEvents1: %v", v)
	}
}

type GetIgnoredEventBulkRetriesQueryParamOrderByType string

const (
	GetIgnoredEventBulkRetriesQueryParamOrderByTypeGetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEvents1               GetIgnoredEventBulkRetriesQueryParamOrderByType = "getIgnoredEventBulkRetries_queryParam_BulkRetryIgnoredEvents_1"
	GetIgnoredEventBulkRetriesQueryParamOrderByTypeArrayOfgetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEventsOrderBy2 GetIgnoredEventBulkRetriesQueryParamOrderByType = "arrayOfgetIgnoredEventBulkRetries_queryParam_BulkRetryIgnoredEvents_order_by_2"
)

type GetIgnoredEventBulkRetriesQueryParamOrderBy struct {
	GetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEvents1               *GetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEvents1
	ArrayOfgetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEventsOrderBy2 []GetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEventsOrderBy2

	Type GetIgnoredEventBulkRetriesQueryParamOrderByType
}

func CreateGetIgnoredEventBulkRetriesQueryParamOrderByGetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEvents1(getIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEvents1 GetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEvents1) GetIgnoredEventBulkRetriesQueryParamOrderBy {
	typ := GetIgnoredEventBulkRetriesQueryParamOrderByTypeGetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEvents1

	return GetIgnoredEventBulkRetriesQueryParamOrderBy{
		GetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEvents1: &getIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEvents1,
		Type: typ,
	}
}

func CreateGetIgnoredEventBulkRetriesQueryParamOrderByArrayOfgetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEventsOrderBy2(arrayOfgetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEventsOrderBy2 []GetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEventsOrderBy2) GetIgnoredEventBulkRetriesQueryParamOrderBy {
	typ := GetIgnoredEventBulkRetriesQueryParamOrderByTypeArrayOfgetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEventsOrderBy2

	return GetIgnoredEventBulkRetriesQueryParamOrderBy{
		ArrayOfgetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEventsOrderBy2: arrayOfgetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEventsOrderBy2,
		Type: typ,
	}
}

func (u *GetIgnoredEventBulkRetriesQueryParamOrderBy) UnmarshalJSON(data []byte) error {

	getIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEvents1 := GetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEvents1("")
	if err := utils.UnmarshalJSON(data, &getIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEvents1, "", true, true); err == nil {
		u.GetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEvents1 = &getIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEvents1
		u.Type = GetIgnoredEventBulkRetriesQueryParamOrderByTypeGetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEvents1
		return nil
	}

	arrayOfgetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEventsOrderBy2 := []GetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEventsOrderBy2{}
	if err := utils.UnmarshalJSON(data, &arrayOfgetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEventsOrderBy2, "", true, true); err == nil {
		u.ArrayOfgetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEventsOrderBy2 = arrayOfgetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEventsOrderBy2
		u.Type = GetIgnoredEventBulkRetriesQueryParamOrderByTypeArrayOfgetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEventsOrderBy2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetIgnoredEventBulkRetriesQueryParamOrderBy) MarshalJSON() ([]byte, error) {
	if u.GetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEvents1 != nil {
		return utils.MarshalJSON(u.GetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEvents1, "", true)
	}

	if u.ArrayOfgetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEventsOrderBy2 != nil {
		return utils.MarshalJSON(u.ArrayOfgetIgnoredEventBulkRetriesQueryParamBulkRetryIgnoredEventsOrderBy2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetIgnoredEventBulkRetriesQueryParamCauseType string

const (
	GetIgnoredEventBulkRetriesQueryParamCauseTypeStr        GetIgnoredEventBulkRetriesQueryParamCauseType = "str"
	GetIgnoredEventBulkRetriesQueryParamCauseTypeArrayOfstr GetIgnoredEventBulkRetriesQueryParamCauseType = "arrayOfstr"
)

type GetIgnoredEventBulkRetriesQueryParamCause struct {
	Str        *string
	ArrayOfstr []string

	Type GetIgnoredEventBulkRetriesQueryParamCauseType
}

func CreateGetIgnoredEventBulkRetriesQueryParamCauseStr(str string) GetIgnoredEventBulkRetriesQueryParamCause {
	typ := GetIgnoredEventBulkRetriesQueryParamCauseTypeStr

	return GetIgnoredEventBulkRetriesQueryParamCause{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetIgnoredEventBulkRetriesQueryParamCauseArrayOfstr(arrayOfstr []string) GetIgnoredEventBulkRetriesQueryParamCause {
	typ := GetIgnoredEventBulkRetriesQueryParamCauseTypeArrayOfstr

	return GetIgnoredEventBulkRetriesQueryParamCause{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *GetIgnoredEventBulkRetriesQueryParamCause) UnmarshalJSON(data []byte) error {

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GetIgnoredEventBulkRetriesQueryParamCauseTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = GetIgnoredEventBulkRetriesQueryParamCauseTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetIgnoredEventBulkRetriesQueryParamCause) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetIgnoredEventBulkRetriesQueryParamWebhookIDType string

const (
	GetIgnoredEventBulkRetriesQueryParamWebhookIDTypeStr        GetIgnoredEventBulkRetriesQueryParamWebhookIDType = "str"
	GetIgnoredEventBulkRetriesQueryParamWebhookIDTypeArrayOfstr GetIgnoredEventBulkRetriesQueryParamWebhookIDType = "arrayOfstr"
)

type GetIgnoredEventBulkRetriesQueryParamWebhookID struct {
	Str        *string
	ArrayOfstr []string

	Type GetIgnoredEventBulkRetriesQueryParamWebhookIDType
}

func CreateGetIgnoredEventBulkRetriesQueryParamWebhookIDStr(str string) GetIgnoredEventBulkRetriesQueryParamWebhookID {
	typ := GetIgnoredEventBulkRetriesQueryParamWebhookIDTypeStr

	return GetIgnoredEventBulkRetriesQueryParamWebhookID{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetIgnoredEventBulkRetriesQueryParamWebhookIDArrayOfstr(arrayOfstr []string) GetIgnoredEventBulkRetriesQueryParamWebhookID {
	typ := GetIgnoredEventBulkRetriesQueryParamWebhookIDTypeArrayOfstr

	return GetIgnoredEventBulkRetriesQueryParamWebhookID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *GetIgnoredEventBulkRetriesQueryParamWebhookID) UnmarshalJSON(data []byte) error {

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GetIgnoredEventBulkRetriesQueryParamWebhookIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = GetIgnoredEventBulkRetriesQueryParamWebhookIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetIgnoredEventBulkRetriesQueryParamWebhookID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// GetIgnoredEventBulkRetriesQueryParamQuery - Filter by the bulk retry ignored event query object
type GetIgnoredEventBulkRetriesQueryParamQuery struct {
	// The cause of the ignored event
	Cause *GetIgnoredEventBulkRetriesQueryParamCause `queryParam:"name=cause"`
	// The associated transformation ID (only applicable to the cause `TRANSFORMATION_FAILED`)
	TransformationID *string `queryParam:"name=transformation_id"`
	// Connection ID of the ignored event
	WebhookID *GetIgnoredEventBulkRetriesQueryParamWebhookID `queryParam:"name=webhook_id"`
}

func (o *GetIgnoredEventBulkRetriesQueryParamQuery) GetCause() *GetIgnoredEventBulkRetriesQueryParamCause {
	if o == nil {
		return nil
	}
	return o.Cause
}

func (o *GetIgnoredEventBulkRetriesQueryParamQuery) GetTransformationID() *string {
	if o == nil {
		return nil
	}
	return o.TransformationID
}

func (o *GetIgnoredEventBulkRetriesQueryParamQuery) GetWebhookID() *GetIgnoredEventBulkRetriesQueryParamWebhookID {
	if o == nil {
		return nil
	}
	return o.WebhookID
}

type GetIgnoredEventBulkRetriesRequest struct {
	CancelledAt *QueryParamCancelledAt                         `queryParam:"style=form,explode=true,name=cancelled_at"`
	CompletedAt *QueryParamCompletedAt                         `queryParam:"style=form,explode=true,name=completed_at"`
	CreatedAt   *GetIgnoredEventBulkRetriesQueryParamCreatedAt `queryParam:"style=form,explode=true,name=created_at"`
	Dir         *GetIgnoredEventBulkRetriesQueryParamDir       `queryParam:"style=form,explode=true,name=dir"`
	ID          *GetIgnoredEventBulkRetriesQueryParamID        `queryParam:"style=form,explode=true,name=id"`
	InProgress  *bool                                          `queryParam:"style=form,explode=true,name=in_progress"`
	Limit       *int64                                         `queryParam:"style=form,explode=true,name=limit"`
	Next        *string                                        `queryParam:"style=form,explode=true,name=next"`
	OrderBy     *GetIgnoredEventBulkRetriesQueryParamOrderBy   `queryParam:"style=form,explode=true,name=order_by"`
	Prev        *string                                        `queryParam:"style=form,explode=true,name=prev"`
	// Filter by the bulk retry ignored event query object
	Query             *GetIgnoredEventBulkRetriesQueryParamQuery `queryParam:"style=form,explode=true,name=query"`
	QueryPartialMatch *bool                                      `queryParam:"style=form,explode=true,name=query_partial_match"`
}

func (o *GetIgnoredEventBulkRetriesRequest) GetCancelledAt() *QueryParamCancelledAt {
	if o == nil {
		return nil
	}
	return o.CancelledAt
}

func (o *GetIgnoredEventBulkRetriesRequest) GetCompletedAt() *QueryParamCompletedAt {
	if o == nil {
		return nil
	}
	return o.CompletedAt
}

func (o *GetIgnoredEventBulkRetriesRequest) GetCreatedAt() *GetIgnoredEventBulkRetriesQueryParamCreatedAt {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetIgnoredEventBulkRetriesRequest) GetDir() *GetIgnoredEventBulkRetriesQueryParamDir {
	if o == nil {
		return nil
	}
	return o.Dir
}

func (o *GetIgnoredEventBulkRetriesRequest) GetID() *GetIgnoredEventBulkRetriesQueryParamID {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *GetIgnoredEventBulkRetriesRequest) GetInProgress() *bool {
	if o == nil {
		return nil
	}
	return o.InProgress
}

func (o *GetIgnoredEventBulkRetriesRequest) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *GetIgnoredEventBulkRetriesRequest) GetNext() *string {
	if o == nil {
		return nil
	}
	return o.Next
}

func (o *GetIgnoredEventBulkRetriesRequest) GetOrderBy() *GetIgnoredEventBulkRetriesQueryParamOrderBy {
	if o == nil {
		return nil
	}
	return o.OrderBy
}

func (o *GetIgnoredEventBulkRetriesRequest) GetPrev() *string {
	if o == nil {
		return nil
	}
	return o.Prev
}

func (o *GetIgnoredEventBulkRetriesRequest) GetQuery() *GetIgnoredEventBulkRetriesQueryParamQuery {
	if o == nil {
		return nil
	}
	return o.Query
}

func (o *GetIgnoredEventBulkRetriesRequest) GetQueryPartialMatch() *bool {
	if o == nil {
		return nil
	}
	return o.QueryPartialMatch
}

type GetIgnoredEventBulkRetriesResponse struct {
	// List of ignored events bulk retries
	BatchOperationPaginatedResult *components.BatchOperationPaginatedResult
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *GetIgnoredEventBulkRetriesResponse) GetBatchOperationPaginatedResult() *components.BatchOperationPaginatedResult {
	if o == nil {
		return nil
	}
	return o.BatchOperationPaginatedResult
}

func (o *GetIgnoredEventBulkRetriesResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetIgnoredEventBulkRetriesResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetIgnoredEventBulkRetriesResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
