// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/speakeasy-sdks/hookdeck-go/internal/utils"
	"github.com/speakeasy-sdks/hookdeck-go/models/components"
	"net/http"
	"time"
)

// GetEventsQueryParam2 - Filter by number of attempts
type GetEventsQueryParam2 struct {
	Any      *bool  `queryParam:"name=any"`
	Contains *int64 `queryParam:"name=contains"`
	Gt       *int64 `queryParam:"name=gt"`
	Gte      *int64 `queryParam:"name=gte"`
	Le       *int64 `queryParam:"name=le"`
	Lte      *int64 `queryParam:"name=lte"`
}

func (o *GetEventsQueryParam2) GetAny() *bool {
	if o == nil {
		return nil
	}
	return o.Any
}

func (o *GetEventsQueryParam2) GetContains() *int64 {
	if o == nil {
		return nil
	}
	return o.Contains
}

func (o *GetEventsQueryParam2) GetGt() *int64 {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *GetEventsQueryParam2) GetGte() *int64 {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *GetEventsQueryParam2) GetLe() *int64 {
	if o == nil {
		return nil
	}
	return o.Le
}

func (o *GetEventsQueryParam2) GetLte() *int64 {
	if o == nil {
		return nil
	}
	return o.Lte
}

type QueryParamAttemptsType string

const (
	QueryParamAttemptsTypeInteger              QueryParamAttemptsType = "integer"
	QueryParamAttemptsTypeGetEventsQueryParam2 QueryParamAttemptsType = "getEvents_queryParam_2"
)

type QueryParamAttempts struct {
	Integer              *int64
	GetEventsQueryParam2 *GetEventsQueryParam2

	Type QueryParamAttemptsType
}

func CreateQueryParamAttemptsInteger(integer int64) QueryParamAttempts {
	typ := QueryParamAttemptsTypeInteger

	return QueryParamAttempts{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateQueryParamAttemptsGetEventsQueryParam2(getEventsQueryParam2 GetEventsQueryParam2) QueryParamAttempts {
	typ := QueryParamAttemptsTypeGetEventsQueryParam2

	return QueryParamAttempts{
		GetEventsQueryParam2: &getEventsQueryParam2,
		Type:                 typ,
	}
}

func (u *QueryParamAttempts) UnmarshalJSON(data []byte) error {

	getEventsQueryParam2 := GetEventsQueryParam2{}
	if err := utils.UnmarshalJSON(data, &getEventsQueryParam2, "", true, true); err == nil {
		u.GetEventsQueryParam2 = &getEventsQueryParam2
		u.Type = QueryParamAttemptsTypeGetEventsQueryParam2
		return nil
	}

	integer := int64(0)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = &integer
		u.Type = QueryParamAttemptsTypeInteger
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u QueryParamAttempts) MarshalJSON() ([]byte, error) {
	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.GetEventsQueryParam2 != nil {
		return utils.MarshalJSON(u.GetEventsQueryParam2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// GetEventsQueryParamEvents2 - URL Encoded string of the JSON to match to the data body
type GetEventsQueryParamEvents2 struct {
}

type QueryParamBodyType string

const (
	QueryParamBodyTypeStr                        QueryParamBodyType = "str"
	QueryParamBodyTypeGetEventsQueryParamEvents2 QueryParamBodyType = "getEvents_queryParam_Events_2"
)

type QueryParamBody struct {
	Str                        *string
	GetEventsQueryParamEvents2 *GetEventsQueryParamEvents2

	Type QueryParamBodyType
}

func CreateQueryParamBodyStr(str string) QueryParamBody {
	typ := QueryParamBodyTypeStr

	return QueryParamBody{
		Str:  &str,
		Type: typ,
	}
}

func CreateQueryParamBodyGetEventsQueryParamEvents2(getEventsQueryParamEvents2 GetEventsQueryParamEvents2) QueryParamBody {
	typ := QueryParamBodyTypeGetEventsQueryParamEvents2

	return QueryParamBody{
		GetEventsQueryParamEvents2: &getEventsQueryParamEvents2,
		Type:                       typ,
	}
}

func (u *QueryParamBody) UnmarshalJSON(data []byte) error {

	getEventsQueryParamEvents2 := GetEventsQueryParamEvents2{}
	if err := utils.UnmarshalJSON(data, &getEventsQueryParamEvents2, "", true, true); err == nil {
		u.GetEventsQueryParamEvents2 = &getEventsQueryParamEvents2
		u.Type = QueryParamBodyTypeGetEventsQueryParamEvents2
		return nil
	}

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = QueryParamBodyTypeStr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u QueryParamBody) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.GetEventsQueryParamEvents2 != nil {
		return utils.MarshalJSON(u.GetEventsQueryParamEvents2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type QueryParamBulkRetryIDType string

const (
	QueryParamBulkRetryIDTypeStr        QueryParamBulkRetryIDType = "str"
	QueryParamBulkRetryIDTypeArrayOfstr QueryParamBulkRetryIDType = "arrayOfstr"
)

type QueryParamBulkRetryID struct {
	Str        *string
	ArrayOfstr []string

	Type QueryParamBulkRetryIDType
}

func CreateQueryParamBulkRetryIDStr(str string) QueryParamBulkRetryID {
	typ := QueryParamBulkRetryIDTypeStr

	return QueryParamBulkRetryID{
		Str:  &str,
		Type: typ,
	}
}

func CreateQueryParamBulkRetryIDArrayOfstr(arrayOfstr []string) QueryParamBulkRetryID {
	typ := QueryParamBulkRetryIDTypeArrayOfstr

	return QueryParamBulkRetryID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *QueryParamBulkRetryID) UnmarshalJSON(data []byte) error {

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = QueryParamBulkRetryIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = QueryParamBulkRetryIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u QueryParamBulkRetryID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// GetEventsQueryParamEventsCliID2 - Filter by CLI IDs. `?[any]=true` operator for any CLI.
type GetEventsQueryParamEventsCliID2 struct {
	Any *bool `queryParam:"name=any"`
}

func (o *GetEventsQueryParamEventsCliID2) GetAny() *bool {
	if o == nil {
		return nil
	}
	return o.Any
}

type QueryParamCliIDType string

const (
	QueryParamCliIDTypeStr                             QueryParamCliIDType = "str"
	QueryParamCliIDTypeGetEventsQueryParamEventsCliID2 QueryParamCliIDType = "getEvents_queryParam_Events_cli_id_2"
	QueryParamCliIDTypeArrayOfstr                      QueryParamCliIDType = "arrayOfstr"
)

type QueryParamCliID struct {
	Str                             *string
	GetEventsQueryParamEventsCliID2 *GetEventsQueryParamEventsCliID2
	ArrayOfstr                      []string

	Type QueryParamCliIDType
}

func CreateQueryParamCliIDStr(str string) QueryParamCliID {
	typ := QueryParamCliIDTypeStr

	return QueryParamCliID{
		Str:  &str,
		Type: typ,
	}
}

func CreateQueryParamCliIDGetEventsQueryParamEventsCliID2(getEventsQueryParamEventsCliID2 GetEventsQueryParamEventsCliID2) QueryParamCliID {
	typ := QueryParamCliIDTypeGetEventsQueryParamEventsCliID2

	return QueryParamCliID{
		GetEventsQueryParamEventsCliID2: &getEventsQueryParamEventsCliID2,
		Type:                            typ,
	}
}

func CreateQueryParamCliIDArrayOfstr(arrayOfstr []string) QueryParamCliID {
	typ := QueryParamCliIDTypeArrayOfstr

	return QueryParamCliID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *QueryParamCliID) UnmarshalJSON(data []byte) error {

	getEventsQueryParamEventsCliID2 := GetEventsQueryParamEventsCliID2{}
	if err := utils.UnmarshalJSON(data, &getEventsQueryParamEventsCliID2, "", true, true); err == nil {
		u.GetEventsQueryParamEventsCliID2 = &getEventsQueryParamEventsCliID2
		u.Type = QueryParamCliIDTypeGetEventsQueryParamEventsCliID2
		return nil
	}

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = QueryParamCliIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = QueryParamCliIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u QueryParamCliID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.GetEventsQueryParamEventsCliID2 != nil {
		return utils.MarshalJSON(u.GetEventsQueryParamEventsCliID2, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type QueryParamCliUserIDType string

const (
	QueryParamCliUserIDTypeStr        QueryParamCliUserIDType = "str"
	QueryParamCliUserIDTypeArrayOfstr QueryParamCliUserIDType = "arrayOfstr"
)

type QueryParamCliUserID struct {
	Str        *string
	ArrayOfstr []string

	Type QueryParamCliUserIDType
}

func CreateQueryParamCliUserIDStr(str string) QueryParamCliUserID {
	typ := QueryParamCliUserIDTypeStr

	return QueryParamCliUserID{
		Str:  &str,
		Type: typ,
	}
}

func CreateQueryParamCliUserIDArrayOfstr(arrayOfstr []string) QueryParamCliUserID {
	typ := QueryParamCliUserIDTypeArrayOfstr

	return QueryParamCliUserID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *QueryParamCliUserID) UnmarshalJSON(data []byte) error {

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = QueryParamCliUserIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = QueryParamCliUserIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u QueryParamCliUserID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// GetEventsQueryParamEventsCreatedAt2 - Filter by `created_at` date using a date operator
type GetEventsQueryParamEventsCreatedAt2 struct {
	Any *bool      `queryParam:"name=any"`
	Gt  *time.Time `queryParam:"name=gt"`
	Gte *time.Time `queryParam:"name=gte"`
	Le  *time.Time `queryParam:"name=le"`
	Lte *time.Time `queryParam:"name=lte"`
}

func (g GetEventsQueryParamEventsCreatedAt2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetEventsQueryParamEventsCreatedAt2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetEventsQueryParamEventsCreatedAt2) GetAny() *bool {
	if o == nil {
		return nil
	}
	return o.Any
}

func (o *GetEventsQueryParamEventsCreatedAt2) GetGt() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *GetEventsQueryParamEventsCreatedAt2) GetGte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *GetEventsQueryParamEventsCreatedAt2) GetLe() *time.Time {
	if o == nil {
		return nil
	}
	return o.Le
}

func (o *GetEventsQueryParamEventsCreatedAt2) GetLte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Lte
}

type GetEventsQueryParamCreatedAtType string

const (
	GetEventsQueryParamCreatedAtTypeDateTime                            GetEventsQueryParamCreatedAtType = "date-time"
	GetEventsQueryParamCreatedAtTypeGetEventsQueryParamEventsCreatedAt2 GetEventsQueryParamCreatedAtType = "getEvents_queryParam_Events_created_at_2"
)

type GetEventsQueryParamCreatedAt struct {
	DateTime                            *time.Time
	GetEventsQueryParamEventsCreatedAt2 *GetEventsQueryParamEventsCreatedAt2

	Type GetEventsQueryParamCreatedAtType
}

func CreateGetEventsQueryParamCreatedAtDateTime(dateTime time.Time) GetEventsQueryParamCreatedAt {
	typ := GetEventsQueryParamCreatedAtTypeDateTime

	return GetEventsQueryParamCreatedAt{
		DateTime: &dateTime,
		Type:     typ,
	}
}

func CreateGetEventsQueryParamCreatedAtGetEventsQueryParamEventsCreatedAt2(getEventsQueryParamEventsCreatedAt2 GetEventsQueryParamEventsCreatedAt2) GetEventsQueryParamCreatedAt {
	typ := GetEventsQueryParamCreatedAtTypeGetEventsQueryParamEventsCreatedAt2

	return GetEventsQueryParamCreatedAt{
		GetEventsQueryParamEventsCreatedAt2: &getEventsQueryParamEventsCreatedAt2,
		Type:                                typ,
	}
}

func (u *GetEventsQueryParamCreatedAt) UnmarshalJSON(data []byte) error {

	getEventsQueryParamEventsCreatedAt2 := GetEventsQueryParamEventsCreatedAt2{}
	if err := utils.UnmarshalJSON(data, &getEventsQueryParamEventsCreatedAt2, "", true, true); err == nil {
		u.GetEventsQueryParamEventsCreatedAt2 = &getEventsQueryParamEventsCreatedAt2
		u.Type = GetEventsQueryParamCreatedAtTypeGetEventsQueryParamEventsCreatedAt2
		return nil
	}

	dateTime := time.Time{}
	if err := utils.UnmarshalJSON(data, &dateTime, "", true, true); err == nil {
		u.DateTime = &dateTime
		u.Type = GetEventsQueryParamCreatedAtTypeDateTime
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetEventsQueryParamCreatedAt) MarshalJSON() ([]byte, error) {
	if u.DateTime != nil {
		return utils.MarshalJSON(u.DateTime, "", true)
	}

	if u.GetEventsQueryParamEventsCreatedAt2 != nil {
		return utils.MarshalJSON(u.GetEventsQueryParamEventsCreatedAt2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetEventsQueryParamDestinationIDType string

const (
	GetEventsQueryParamDestinationIDTypeStr        GetEventsQueryParamDestinationIDType = "str"
	GetEventsQueryParamDestinationIDTypeArrayOfstr GetEventsQueryParamDestinationIDType = "arrayOfstr"
)

type GetEventsQueryParamDestinationID struct {
	Str        *string
	ArrayOfstr []string

	Type GetEventsQueryParamDestinationIDType
}

func CreateGetEventsQueryParamDestinationIDStr(str string) GetEventsQueryParamDestinationID {
	typ := GetEventsQueryParamDestinationIDTypeStr

	return GetEventsQueryParamDestinationID{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetEventsQueryParamDestinationIDArrayOfstr(arrayOfstr []string) GetEventsQueryParamDestinationID {
	typ := GetEventsQueryParamDestinationIDTypeArrayOfstr

	return GetEventsQueryParamDestinationID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *GetEventsQueryParamDestinationID) UnmarshalJSON(data []byte) error {

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GetEventsQueryParamDestinationIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = GetEventsQueryParamDestinationIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetEventsQueryParamDestinationID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetEventsQueryParamEventsDir2 string

const (
	GetEventsQueryParamEventsDir2Asc  GetEventsQueryParamEventsDir2 = "asc"
	GetEventsQueryParamEventsDir2Desc GetEventsQueryParamEventsDir2 = "desc"
)

func (e GetEventsQueryParamEventsDir2) ToPointer() *GetEventsQueryParamEventsDir2 {
	return &e
}

func (e *GetEventsQueryParamEventsDir2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = GetEventsQueryParamEventsDir2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetEventsQueryParamEventsDir2: %v", v)
	}
}

// GetEventsQueryParam1 - Sort direction
type GetEventsQueryParam1 string

const (
	GetEventsQueryParam1Asc  GetEventsQueryParam1 = "asc"
	GetEventsQueryParam1Desc GetEventsQueryParam1 = "desc"
)

func (e GetEventsQueryParam1) ToPointer() *GetEventsQueryParam1 {
	return &e
}

func (e *GetEventsQueryParam1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = GetEventsQueryParam1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetEventsQueryParam1: %v", v)
	}
}

type GetEventsQueryParamDirType string

const (
	GetEventsQueryParamDirTypeGetEventsQueryParam1                 GetEventsQueryParamDirType = "getEvents_queryParam_1"
	GetEventsQueryParamDirTypeArrayOfgetEventsQueryParamEventsDir2 GetEventsQueryParamDirType = "arrayOfgetEvents_queryParam_Events_dir_2"
)

type GetEventsQueryParamDir struct {
	GetEventsQueryParam1                 *GetEventsQueryParam1
	ArrayOfgetEventsQueryParamEventsDir2 []GetEventsQueryParamEventsDir2

	Type GetEventsQueryParamDirType
}

func CreateGetEventsQueryParamDirGetEventsQueryParam1(getEventsQueryParam1 GetEventsQueryParam1) GetEventsQueryParamDir {
	typ := GetEventsQueryParamDirTypeGetEventsQueryParam1

	return GetEventsQueryParamDir{
		GetEventsQueryParam1: &getEventsQueryParam1,
		Type:                 typ,
	}
}

func CreateGetEventsQueryParamDirArrayOfgetEventsQueryParamEventsDir2(arrayOfgetEventsQueryParamEventsDir2 []GetEventsQueryParamEventsDir2) GetEventsQueryParamDir {
	typ := GetEventsQueryParamDirTypeArrayOfgetEventsQueryParamEventsDir2

	return GetEventsQueryParamDir{
		ArrayOfgetEventsQueryParamEventsDir2: arrayOfgetEventsQueryParamEventsDir2,
		Type:                                 typ,
	}
}

func (u *GetEventsQueryParamDir) UnmarshalJSON(data []byte) error {

	getEventsQueryParam1 := GetEventsQueryParam1("")
	if err := utils.UnmarshalJSON(data, &getEventsQueryParam1, "", true, true); err == nil {
		u.GetEventsQueryParam1 = &getEventsQueryParam1
		u.Type = GetEventsQueryParamDirTypeGetEventsQueryParam1
		return nil
	}

	arrayOfgetEventsQueryParamEventsDir2 := []GetEventsQueryParamEventsDir2{}
	if err := utils.UnmarshalJSON(data, &arrayOfgetEventsQueryParamEventsDir2, "", true, true); err == nil {
		u.ArrayOfgetEventsQueryParamEventsDir2 = arrayOfgetEventsQueryParamEventsDir2
		u.Type = GetEventsQueryParamDirTypeArrayOfgetEventsQueryParamEventsDir2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetEventsQueryParamDir) MarshalJSON() ([]byte, error) {
	if u.GetEventsQueryParam1 != nil {
		return utils.MarshalJSON(u.GetEventsQueryParam1, "", true)
	}

	if u.ArrayOfgetEventsQueryParamEventsDir2 != nil {
		return utils.MarshalJSON(u.ArrayOfgetEventsQueryParamEventsDir2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type QueryParamErrorCodeType string

const (
	QueryParamErrorCodeTypeStr        QueryParamErrorCodeType = "str"
	QueryParamErrorCodeTypeArrayOfstr QueryParamErrorCodeType = "arrayOfstr"
)

type QueryParamErrorCode struct {
	Str        *string
	ArrayOfstr []string

	Type QueryParamErrorCodeType
}

func CreateQueryParamErrorCodeStr(str string) QueryParamErrorCode {
	typ := QueryParamErrorCodeTypeStr

	return QueryParamErrorCode{
		Str:  &str,
		Type: typ,
	}
}

func CreateQueryParamErrorCodeArrayOfstr(arrayOfstr []string) QueryParamErrorCode {
	typ := QueryParamErrorCodeTypeArrayOfstr

	return QueryParamErrorCode{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *QueryParamErrorCode) UnmarshalJSON(data []byte) error {

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = QueryParamErrorCodeTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = QueryParamErrorCodeTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u QueryParamErrorCode) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetEventsQueryParamEventDataIDType string

const (
	GetEventsQueryParamEventDataIDTypeStr        GetEventsQueryParamEventDataIDType = "str"
	GetEventsQueryParamEventDataIDTypeArrayOfstr GetEventsQueryParamEventDataIDType = "arrayOfstr"
)

type GetEventsQueryParamEventDataID struct {
	Str        *string
	ArrayOfstr []string

	Type GetEventsQueryParamEventDataIDType
}

func CreateGetEventsQueryParamEventDataIDStr(str string) GetEventsQueryParamEventDataID {
	typ := GetEventsQueryParamEventDataIDTypeStr

	return GetEventsQueryParamEventDataID{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetEventsQueryParamEventDataIDArrayOfstr(arrayOfstr []string) GetEventsQueryParamEventDataID {
	typ := GetEventsQueryParamEventDataIDTypeArrayOfstr

	return GetEventsQueryParamEventDataID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *GetEventsQueryParamEventDataID) UnmarshalJSON(data []byte) error {

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GetEventsQueryParamEventDataIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = GetEventsQueryParamEventDataIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetEventsQueryParamEventDataID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// GetEventsQueryParamEventsHeaders2 - URL Encoded string of the JSON to match to the data headers
type GetEventsQueryParamEventsHeaders2 struct {
}

type QueryParamHeadersType string

const (
	QueryParamHeadersTypeStr                               QueryParamHeadersType = "str"
	QueryParamHeadersTypeGetEventsQueryParamEventsHeaders2 QueryParamHeadersType = "getEvents_queryParam_Events_headers_2"
)

type QueryParamHeaders struct {
	Str                               *string
	GetEventsQueryParamEventsHeaders2 *GetEventsQueryParamEventsHeaders2

	Type QueryParamHeadersType
}

func CreateQueryParamHeadersStr(str string) QueryParamHeaders {
	typ := QueryParamHeadersTypeStr

	return QueryParamHeaders{
		Str:  &str,
		Type: typ,
	}
}

func CreateQueryParamHeadersGetEventsQueryParamEventsHeaders2(getEventsQueryParamEventsHeaders2 GetEventsQueryParamEventsHeaders2) QueryParamHeaders {
	typ := QueryParamHeadersTypeGetEventsQueryParamEventsHeaders2

	return QueryParamHeaders{
		GetEventsQueryParamEventsHeaders2: &getEventsQueryParamEventsHeaders2,
		Type:                              typ,
	}
}

func (u *QueryParamHeaders) UnmarshalJSON(data []byte) error {

	getEventsQueryParamEventsHeaders2 := GetEventsQueryParamEventsHeaders2{}
	if err := utils.UnmarshalJSON(data, &getEventsQueryParamEventsHeaders2, "", true, true); err == nil {
		u.GetEventsQueryParamEventsHeaders2 = &getEventsQueryParamEventsHeaders2
		u.Type = QueryParamHeadersTypeGetEventsQueryParamEventsHeaders2
		return nil
	}

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = QueryParamHeadersTypeStr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u QueryParamHeaders) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.GetEventsQueryParamEventsHeaders2 != nil {
		return utils.MarshalJSON(u.GetEventsQueryParamEventsHeaders2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetEventsQueryParamIDType string

const (
	GetEventsQueryParamIDTypeStr        GetEventsQueryParamIDType = "str"
	GetEventsQueryParamIDTypeArrayOfstr GetEventsQueryParamIDType = "arrayOfstr"
)

type GetEventsQueryParamID struct {
	Str        *string
	ArrayOfstr []string

	Type GetEventsQueryParamIDType
}

func CreateGetEventsQueryParamIDStr(str string) GetEventsQueryParamID {
	typ := GetEventsQueryParamIDTypeStr

	return GetEventsQueryParamID{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetEventsQueryParamIDArrayOfstr(arrayOfstr []string) GetEventsQueryParamID {
	typ := GetEventsQueryParamIDTypeArrayOfstr

	return GetEventsQueryParamID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *GetEventsQueryParamID) UnmarshalJSON(data []byte) error {

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GetEventsQueryParamIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = GetEventsQueryParamIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetEventsQueryParamID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// Include the data object in the event model
type Include string

const (
	IncludeData Include = "data"
)

func (e Include) ToPointer() *Include {
	return &e
}

func (e *Include) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "data":
		*e = Include(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Include: %v", v)
	}
}

type GetEventsQueryParamIssueIDType string

const (
	GetEventsQueryParamIssueIDTypeStr        GetEventsQueryParamIssueIDType = "str"
	GetEventsQueryParamIssueIDTypeArrayOfstr GetEventsQueryParamIssueIDType = "arrayOfstr"
)

type GetEventsQueryParamIssueID struct {
	Str        *string
	ArrayOfstr []string

	Type GetEventsQueryParamIssueIDType
}

func CreateGetEventsQueryParamIssueIDStr(str string) GetEventsQueryParamIssueID {
	typ := GetEventsQueryParamIssueIDTypeStr

	return GetEventsQueryParamIssueID{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetEventsQueryParamIssueIDArrayOfstr(arrayOfstr []string) GetEventsQueryParamIssueID {
	typ := GetEventsQueryParamIssueIDTypeArrayOfstr

	return GetEventsQueryParamIssueID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *GetEventsQueryParamIssueID) UnmarshalJSON(data []byte) error {

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GetEventsQueryParamIssueIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = GetEventsQueryParamIssueIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetEventsQueryParamIssueID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// GetEventsQueryParamEventsLastAttemptAt2 - Filter by `last_attempt_at` date using a date operator
type GetEventsQueryParamEventsLastAttemptAt2 struct {
	Any *bool      `queryParam:"name=any"`
	Gt  *time.Time `queryParam:"name=gt"`
	Gte *time.Time `queryParam:"name=gte"`
	Le  *time.Time `queryParam:"name=le"`
	Lte *time.Time `queryParam:"name=lte"`
}

func (g GetEventsQueryParamEventsLastAttemptAt2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetEventsQueryParamEventsLastAttemptAt2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetEventsQueryParamEventsLastAttemptAt2) GetAny() *bool {
	if o == nil {
		return nil
	}
	return o.Any
}

func (o *GetEventsQueryParamEventsLastAttemptAt2) GetGt() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *GetEventsQueryParamEventsLastAttemptAt2) GetGte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *GetEventsQueryParamEventsLastAttemptAt2) GetLe() *time.Time {
	if o == nil {
		return nil
	}
	return o.Le
}

func (o *GetEventsQueryParamEventsLastAttemptAt2) GetLte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Lte
}

type QueryParamLastAttemptAtType string

const (
	QueryParamLastAttemptAtTypeDateTime                                QueryParamLastAttemptAtType = "date-time"
	QueryParamLastAttemptAtTypeGetEventsQueryParamEventsLastAttemptAt2 QueryParamLastAttemptAtType = "getEvents_queryParam_Events_last_attempt_at_2"
)

type QueryParamLastAttemptAt struct {
	DateTime                                *time.Time
	GetEventsQueryParamEventsLastAttemptAt2 *GetEventsQueryParamEventsLastAttemptAt2

	Type QueryParamLastAttemptAtType
}

func CreateQueryParamLastAttemptAtDateTime(dateTime time.Time) QueryParamLastAttemptAt {
	typ := QueryParamLastAttemptAtTypeDateTime

	return QueryParamLastAttemptAt{
		DateTime: &dateTime,
		Type:     typ,
	}
}

func CreateQueryParamLastAttemptAtGetEventsQueryParamEventsLastAttemptAt2(getEventsQueryParamEventsLastAttemptAt2 GetEventsQueryParamEventsLastAttemptAt2) QueryParamLastAttemptAt {
	typ := QueryParamLastAttemptAtTypeGetEventsQueryParamEventsLastAttemptAt2

	return QueryParamLastAttemptAt{
		GetEventsQueryParamEventsLastAttemptAt2: &getEventsQueryParamEventsLastAttemptAt2,
		Type:                                    typ,
	}
}

func (u *QueryParamLastAttemptAt) UnmarshalJSON(data []byte) error {

	getEventsQueryParamEventsLastAttemptAt2 := GetEventsQueryParamEventsLastAttemptAt2{}
	if err := utils.UnmarshalJSON(data, &getEventsQueryParamEventsLastAttemptAt2, "", true, true); err == nil {
		u.GetEventsQueryParamEventsLastAttemptAt2 = &getEventsQueryParamEventsLastAttemptAt2
		u.Type = QueryParamLastAttemptAtTypeGetEventsQueryParamEventsLastAttemptAt2
		return nil
	}

	dateTime := time.Time{}
	if err := utils.UnmarshalJSON(data, &dateTime, "", true, true); err == nil {
		u.DateTime = &dateTime
		u.Type = QueryParamLastAttemptAtTypeDateTime
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u QueryParamLastAttemptAt) MarshalJSON() ([]byte, error) {
	if u.DateTime != nil {
		return utils.MarshalJSON(u.DateTime, "", true)
	}

	if u.GetEventsQueryParamEventsLastAttemptAt2 != nil {
		return utils.MarshalJSON(u.GetEventsQueryParamEventsLastAttemptAt2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetEventsQueryParamEventsOrderBy2 string

const (
	GetEventsQueryParamEventsOrderBy2LastAttemptAt GetEventsQueryParamEventsOrderBy2 = "last_attempt_at"
	GetEventsQueryParamEventsOrderBy2NextAttemptAt GetEventsQueryParamEventsOrderBy2 = "next_attempt_at"
	GetEventsQueryParamEventsOrderBy2CreatedAt     GetEventsQueryParamEventsOrderBy2 = "created_at"
)

func (e GetEventsQueryParamEventsOrderBy2) ToPointer() *GetEventsQueryParamEventsOrderBy2 {
	return &e
}

func (e *GetEventsQueryParamEventsOrderBy2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "last_attempt_at":
		fallthrough
	case "next_attempt_at":
		fallthrough
	case "created_at":
		*e = GetEventsQueryParamEventsOrderBy2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetEventsQueryParamEventsOrderBy2: %v", v)
	}
}

// GetEventsQueryParamEvents1 - Sort key(s)
type GetEventsQueryParamEvents1 string

const (
	GetEventsQueryParamEvents1LastAttemptAt GetEventsQueryParamEvents1 = "last_attempt_at"
	GetEventsQueryParamEvents1NextAttemptAt GetEventsQueryParamEvents1 = "next_attempt_at"
	GetEventsQueryParamEvents1CreatedAt     GetEventsQueryParamEvents1 = "created_at"
)

func (e GetEventsQueryParamEvents1) ToPointer() *GetEventsQueryParamEvents1 {
	return &e
}

func (e *GetEventsQueryParamEvents1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "last_attempt_at":
		fallthrough
	case "next_attempt_at":
		fallthrough
	case "created_at":
		*e = GetEventsQueryParamEvents1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetEventsQueryParamEvents1: %v", v)
	}
}

type GetEventsQueryParamOrderByType string

const (
	GetEventsQueryParamOrderByTypeGetEventsQueryParamEvents1               GetEventsQueryParamOrderByType = "getEvents_queryParam_Events_1"
	GetEventsQueryParamOrderByTypeArrayOfgetEventsQueryParamEventsOrderBy2 GetEventsQueryParamOrderByType = "arrayOfgetEvents_queryParam_Events_order_by_2"
)

type GetEventsQueryParamOrderBy struct {
	GetEventsQueryParamEvents1               *GetEventsQueryParamEvents1
	ArrayOfgetEventsQueryParamEventsOrderBy2 []GetEventsQueryParamEventsOrderBy2

	Type GetEventsQueryParamOrderByType
}

func CreateGetEventsQueryParamOrderByGetEventsQueryParamEvents1(getEventsQueryParamEvents1 GetEventsQueryParamEvents1) GetEventsQueryParamOrderBy {
	typ := GetEventsQueryParamOrderByTypeGetEventsQueryParamEvents1

	return GetEventsQueryParamOrderBy{
		GetEventsQueryParamEvents1: &getEventsQueryParamEvents1,
		Type:                       typ,
	}
}

func CreateGetEventsQueryParamOrderByArrayOfgetEventsQueryParamEventsOrderBy2(arrayOfgetEventsQueryParamEventsOrderBy2 []GetEventsQueryParamEventsOrderBy2) GetEventsQueryParamOrderBy {
	typ := GetEventsQueryParamOrderByTypeArrayOfgetEventsQueryParamEventsOrderBy2

	return GetEventsQueryParamOrderBy{
		ArrayOfgetEventsQueryParamEventsOrderBy2: arrayOfgetEventsQueryParamEventsOrderBy2,
		Type:                                     typ,
	}
}

func (u *GetEventsQueryParamOrderBy) UnmarshalJSON(data []byte) error {

	getEventsQueryParamEvents1 := GetEventsQueryParamEvents1("")
	if err := utils.UnmarshalJSON(data, &getEventsQueryParamEvents1, "", true, true); err == nil {
		u.GetEventsQueryParamEvents1 = &getEventsQueryParamEvents1
		u.Type = GetEventsQueryParamOrderByTypeGetEventsQueryParamEvents1
		return nil
	}

	arrayOfgetEventsQueryParamEventsOrderBy2 := []GetEventsQueryParamEventsOrderBy2{}
	if err := utils.UnmarshalJSON(data, &arrayOfgetEventsQueryParamEventsOrderBy2, "", true, true); err == nil {
		u.ArrayOfgetEventsQueryParamEventsOrderBy2 = arrayOfgetEventsQueryParamEventsOrderBy2
		u.Type = GetEventsQueryParamOrderByTypeArrayOfgetEventsQueryParamEventsOrderBy2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetEventsQueryParamOrderBy) MarshalJSON() ([]byte, error) {
	if u.GetEventsQueryParamEvents1 != nil {
		return utils.MarshalJSON(u.GetEventsQueryParamEvents1, "", true)
	}

	if u.ArrayOfgetEventsQueryParamEventsOrderBy2 != nil {
		return utils.MarshalJSON(u.ArrayOfgetEventsQueryParamEventsOrderBy2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// GetEventsQueryParamEventsParsedQuery2 - URL Encoded string of the JSON to match to the parsed query (JSON representation of the query)
type GetEventsQueryParamEventsParsedQuery2 struct {
}

type QueryParamParsedQueryType string

const (
	QueryParamParsedQueryTypeStr                                   QueryParamParsedQueryType = "str"
	QueryParamParsedQueryTypeGetEventsQueryParamEventsParsedQuery2 QueryParamParsedQueryType = "getEvents_queryParam_Events_parsed_query_2"
)

type QueryParamParsedQuery struct {
	Str                                   *string
	GetEventsQueryParamEventsParsedQuery2 *GetEventsQueryParamEventsParsedQuery2

	Type QueryParamParsedQueryType
}

func CreateQueryParamParsedQueryStr(str string) QueryParamParsedQuery {
	typ := QueryParamParsedQueryTypeStr

	return QueryParamParsedQuery{
		Str:  &str,
		Type: typ,
	}
}

func CreateQueryParamParsedQueryGetEventsQueryParamEventsParsedQuery2(getEventsQueryParamEventsParsedQuery2 GetEventsQueryParamEventsParsedQuery2) QueryParamParsedQuery {
	typ := QueryParamParsedQueryTypeGetEventsQueryParamEventsParsedQuery2

	return QueryParamParsedQuery{
		GetEventsQueryParamEventsParsedQuery2: &getEventsQueryParamEventsParsedQuery2,
		Type:                                  typ,
	}
}

func (u *QueryParamParsedQuery) UnmarshalJSON(data []byte) error {

	getEventsQueryParamEventsParsedQuery2 := GetEventsQueryParamEventsParsedQuery2{}
	if err := utils.UnmarshalJSON(data, &getEventsQueryParamEventsParsedQuery2, "", true, true); err == nil {
		u.GetEventsQueryParamEventsParsedQuery2 = &getEventsQueryParamEventsParsedQuery2
		u.Type = QueryParamParsedQueryTypeGetEventsQueryParamEventsParsedQuery2
		return nil
	}

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = QueryParamParsedQueryTypeStr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u QueryParamParsedQuery) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.GetEventsQueryParamEventsParsedQuery2 != nil {
		return utils.MarshalJSON(u.GetEventsQueryParamEventsParsedQuery2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// GetEventsQueryParamEventsResponseStatus2 - Filter by HTTP response status code
type GetEventsQueryParamEventsResponseStatus2 struct {
	Any      *bool  `queryParam:"name=any"`
	Contains *int64 `queryParam:"name=contains"`
	Gt       *int64 `queryParam:"name=gt"`
	Gte      *int64 `queryParam:"name=gte"`
	Le       *int64 `queryParam:"name=le"`
	Lte      *int64 `queryParam:"name=lte"`
}

func (o *GetEventsQueryParamEventsResponseStatus2) GetAny() *bool {
	if o == nil {
		return nil
	}
	return o.Any
}

func (o *GetEventsQueryParamEventsResponseStatus2) GetContains() *int64 {
	if o == nil {
		return nil
	}
	return o.Contains
}

func (o *GetEventsQueryParamEventsResponseStatus2) GetGt() *int64 {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *GetEventsQueryParamEventsResponseStatus2) GetGte() *int64 {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *GetEventsQueryParamEventsResponseStatus2) GetLe() *int64 {
	if o == nil {
		return nil
	}
	return o.Le
}

func (o *GetEventsQueryParamEventsResponseStatus2) GetLte() *int64 {
	if o == nil {
		return nil
	}
	return o.Lte
}

type QueryParamResponseStatusType string

const (
	QueryParamResponseStatusTypeInteger                                  QueryParamResponseStatusType = "integer"
	QueryParamResponseStatusTypeGetEventsQueryParamEventsResponseStatus2 QueryParamResponseStatusType = "getEvents_queryParam_Events_response_status_2"
	QueryParamResponseStatusTypeArrayOfinteger                           QueryParamResponseStatusType = "arrayOfinteger"
)

type QueryParamResponseStatus struct {
	Integer                                  *int64
	GetEventsQueryParamEventsResponseStatus2 *GetEventsQueryParamEventsResponseStatus2
	ArrayOfinteger                           []int64

	Type QueryParamResponseStatusType
}

func CreateQueryParamResponseStatusInteger(integer int64) QueryParamResponseStatus {
	typ := QueryParamResponseStatusTypeInteger

	return QueryParamResponseStatus{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateQueryParamResponseStatusGetEventsQueryParamEventsResponseStatus2(getEventsQueryParamEventsResponseStatus2 GetEventsQueryParamEventsResponseStatus2) QueryParamResponseStatus {
	typ := QueryParamResponseStatusTypeGetEventsQueryParamEventsResponseStatus2

	return QueryParamResponseStatus{
		GetEventsQueryParamEventsResponseStatus2: &getEventsQueryParamEventsResponseStatus2,
		Type:                                     typ,
	}
}

func CreateQueryParamResponseStatusArrayOfinteger(arrayOfinteger []int64) QueryParamResponseStatus {
	typ := QueryParamResponseStatusTypeArrayOfinteger

	return QueryParamResponseStatus{
		ArrayOfinteger: arrayOfinteger,
		Type:           typ,
	}
}

func (u *QueryParamResponseStatus) UnmarshalJSON(data []byte) error {

	getEventsQueryParamEventsResponseStatus2 := GetEventsQueryParamEventsResponseStatus2{}
	if err := utils.UnmarshalJSON(data, &getEventsQueryParamEventsResponseStatus2, "", true, true); err == nil {
		u.GetEventsQueryParamEventsResponseStatus2 = &getEventsQueryParamEventsResponseStatus2
		u.Type = QueryParamResponseStatusTypeGetEventsQueryParamEventsResponseStatus2
		return nil
	}

	integer := int64(0)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = &integer
		u.Type = QueryParamResponseStatusTypeInteger
		return nil
	}

	arrayOfinteger := []int64{}
	if err := utils.UnmarshalJSON(data, &arrayOfinteger, "", true, true); err == nil {
		u.ArrayOfinteger = arrayOfinteger
		u.Type = QueryParamResponseStatusTypeArrayOfinteger
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u QueryParamResponseStatus) MarshalJSON() ([]byte, error) {
	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.GetEventsQueryParamEventsResponseStatus2 != nil {
		return utils.MarshalJSON(u.GetEventsQueryParamEventsResponseStatus2, "", true)
	}

	if u.ArrayOfinteger != nil {
		return utils.MarshalJSON(u.ArrayOfinteger, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetEventsQueryParamSourceIDType string

const (
	GetEventsQueryParamSourceIDTypeStr        GetEventsQueryParamSourceIDType = "str"
	GetEventsQueryParamSourceIDTypeArrayOfstr GetEventsQueryParamSourceIDType = "arrayOfstr"
)

type GetEventsQueryParamSourceID struct {
	Str        *string
	ArrayOfstr []string

	Type GetEventsQueryParamSourceIDType
}

func CreateGetEventsQueryParamSourceIDStr(str string) GetEventsQueryParamSourceID {
	typ := GetEventsQueryParamSourceIDTypeStr

	return GetEventsQueryParamSourceID{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetEventsQueryParamSourceIDArrayOfstr(arrayOfstr []string) GetEventsQueryParamSourceID {
	typ := GetEventsQueryParamSourceIDTypeArrayOfstr

	return GetEventsQueryParamSourceID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *GetEventsQueryParamSourceID) UnmarshalJSON(data []byte) error {

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GetEventsQueryParamSourceIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = GetEventsQueryParamSourceIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetEventsQueryParamSourceID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetEventsQueryParamStatusType string

const (
	GetEventsQueryParamStatusTypeEventStatus        GetEventsQueryParamStatusType = "EventStatus"
	GetEventsQueryParamStatusTypeArrayOfEventStatus GetEventsQueryParamStatusType = "arrayOfEventStatus"
)

type GetEventsQueryParamStatus struct {
	EventStatus        *components.EventStatus
	ArrayOfEventStatus []components.EventStatus

	Type GetEventsQueryParamStatusType
}

func CreateGetEventsQueryParamStatusEventStatus(eventStatus components.EventStatus) GetEventsQueryParamStatus {
	typ := GetEventsQueryParamStatusTypeEventStatus

	return GetEventsQueryParamStatus{
		EventStatus: &eventStatus,
		Type:        typ,
	}
}

func CreateGetEventsQueryParamStatusArrayOfEventStatus(arrayOfEventStatus []components.EventStatus) GetEventsQueryParamStatus {
	typ := GetEventsQueryParamStatusTypeArrayOfEventStatus

	return GetEventsQueryParamStatus{
		ArrayOfEventStatus: arrayOfEventStatus,
		Type:               typ,
	}
}

func (u *GetEventsQueryParamStatus) UnmarshalJSON(data []byte) error {

	eventStatus := components.EventStatus("")
	if err := utils.UnmarshalJSON(data, &eventStatus, "", true, true); err == nil {
		u.EventStatus = &eventStatus
		u.Type = GetEventsQueryParamStatusTypeEventStatus
		return nil
	}

	arrayOfEventStatus := []components.EventStatus{}
	if err := utils.UnmarshalJSON(data, &arrayOfEventStatus, "", true, true); err == nil {
		u.ArrayOfEventStatus = arrayOfEventStatus
		u.Type = GetEventsQueryParamStatusTypeArrayOfEventStatus
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetEventsQueryParamStatus) MarshalJSON() ([]byte, error) {
	if u.EventStatus != nil {
		return utils.MarshalJSON(u.EventStatus, "", true)
	}

	if u.ArrayOfEventStatus != nil {
		return utils.MarshalJSON(u.ArrayOfEventStatus, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// GetEventsQueryParamEventsSuccessfulAt2 - Filter by `successful_at` date using a date operator
type GetEventsQueryParamEventsSuccessfulAt2 struct {
	Any *bool      `queryParam:"name=any"`
	Gt  *time.Time `queryParam:"name=gt"`
	Gte *time.Time `queryParam:"name=gte"`
	Le  *time.Time `queryParam:"name=le"`
	Lte *time.Time `queryParam:"name=lte"`
}

func (g GetEventsQueryParamEventsSuccessfulAt2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetEventsQueryParamEventsSuccessfulAt2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetEventsQueryParamEventsSuccessfulAt2) GetAny() *bool {
	if o == nil {
		return nil
	}
	return o.Any
}

func (o *GetEventsQueryParamEventsSuccessfulAt2) GetGt() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *GetEventsQueryParamEventsSuccessfulAt2) GetGte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *GetEventsQueryParamEventsSuccessfulAt2) GetLe() *time.Time {
	if o == nil {
		return nil
	}
	return o.Le
}

func (o *GetEventsQueryParamEventsSuccessfulAt2) GetLte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Lte
}

type QueryParamSuccessfulAtType string

const (
	QueryParamSuccessfulAtTypeDateTime                               QueryParamSuccessfulAtType = "date-time"
	QueryParamSuccessfulAtTypeGetEventsQueryParamEventsSuccessfulAt2 QueryParamSuccessfulAtType = "getEvents_queryParam_Events_successful_at_2"
)

type QueryParamSuccessfulAt struct {
	DateTime                               *time.Time
	GetEventsQueryParamEventsSuccessfulAt2 *GetEventsQueryParamEventsSuccessfulAt2

	Type QueryParamSuccessfulAtType
}

func CreateQueryParamSuccessfulAtDateTime(dateTime time.Time) QueryParamSuccessfulAt {
	typ := QueryParamSuccessfulAtTypeDateTime

	return QueryParamSuccessfulAt{
		DateTime: &dateTime,
		Type:     typ,
	}
}

func CreateQueryParamSuccessfulAtGetEventsQueryParamEventsSuccessfulAt2(getEventsQueryParamEventsSuccessfulAt2 GetEventsQueryParamEventsSuccessfulAt2) QueryParamSuccessfulAt {
	typ := QueryParamSuccessfulAtTypeGetEventsQueryParamEventsSuccessfulAt2

	return QueryParamSuccessfulAt{
		GetEventsQueryParamEventsSuccessfulAt2: &getEventsQueryParamEventsSuccessfulAt2,
		Type:                                   typ,
	}
}

func (u *QueryParamSuccessfulAt) UnmarshalJSON(data []byte) error {

	getEventsQueryParamEventsSuccessfulAt2 := GetEventsQueryParamEventsSuccessfulAt2{}
	if err := utils.UnmarshalJSON(data, &getEventsQueryParamEventsSuccessfulAt2, "", true, true); err == nil {
		u.GetEventsQueryParamEventsSuccessfulAt2 = &getEventsQueryParamEventsSuccessfulAt2
		u.Type = QueryParamSuccessfulAtTypeGetEventsQueryParamEventsSuccessfulAt2
		return nil
	}

	dateTime := time.Time{}
	if err := utils.UnmarshalJSON(data, &dateTime, "", true, true); err == nil {
		u.DateTime = &dateTime
		u.Type = QueryParamSuccessfulAtTypeDateTime
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u QueryParamSuccessfulAt) MarshalJSON() ([]byte, error) {
	if u.DateTime != nil {
		return utils.MarshalJSON(u.DateTime, "", true)
	}

	if u.GetEventsQueryParamEventsSuccessfulAt2 != nil {
		return utils.MarshalJSON(u.GetEventsQueryParamEventsSuccessfulAt2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetEventsQueryParamWebhookIDType string

const (
	GetEventsQueryParamWebhookIDTypeStr        GetEventsQueryParamWebhookIDType = "str"
	GetEventsQueryParamWebhookIDTypeArrayOfstr GetEventsQueryParamWebhookIDType = "arrayOfstr"
)

type GetEventsQueryParamWebhookID struct {
	Str        *string
	ArrayOfstr []string

	Type GetEventsQueryParamWebhookIDType
}

func CreateGetEventsQueryParamWebhookIDStr(str string) GetEventsQueryParamWebhookID {
	typ := GetEventsQueryParamWebhookIDTypeStr

	return GetEventsQueryParamWebhookID{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetEventsQueryParamWebhookIDArrayOfstr(arrayOfstr []string) GetEventsQueryParamWebhookID {
	typ := GetEventsQueryParamWebhookIDTypeArrayOfstr

	return GetEventsQueryParamWebhookID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *GetEventsQueryParamWebhookID) UnmarshalJSON(data []byte) error {

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GetEventsQueryParamWebhookIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = GetEventsQueryParamWebhookIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetEventsQueryParamWebhookID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetEventsRequest struct {
	Attempts      *QueryParamAttempts               `queryParam:"style=form,explode=true,name=attempts"`
	Body          *QueryParamBody                   `queryParam:"style=form,explode=true,name=body"`
	BulkRetryID   *QueryParamBulkRetryID            `queryParam:"style=form,explode=true,name=bulk_retry_id"`
	CliID         *QueryParamCliID                  `queryParam:"style=form,explode=true,name=cli_id"`
	CliUserID     *QueryParamCliUserID              `queryParam:"style=form,explode=true,name=cli_user_id"`
	CreatedAt     *GetEventsQueryParamCreatedAt     `queryParam:"style=form,explode=true,name=created_at"`
	DestinationID *GetEventsQueryParamDestinationID `queryParam:"style=form,explode=true,name=destination_id"`
	Dir           *GetEventsQueryParamDir           `queryParam:"style=form,explode=true,name=dir"`
	ErrorCode     *QueryParamErrorCode              `queryParam:"style=form,explode=true,name=error_code"`
	EventDataID   *GetEventsQueryParamEventDataID   `queryParam:"style=form,explode=true,name=event_data_id"`
	Headers       *QueryParamHeaders                `queryParam:"style=form,explode=true,name=headers"`
	ID            *GetEventsQueryParamID            `queryParam:"style=form,explode=true,name=id"`
	// Include the data object in the event model
	Include        *Include                      `queryParam:"style=form,explode=true,name=include"`
	IssueID        *GetEventsQueryParamIssueID   `queryParam:"style=form,explode=true,name=issue_id"`
	LastAttemptAt  *QueryParamLastAttemptAt      `queryParam:"style=form,explode=true,name=last_attempt_at"`
	Limit          *int64                        `queryParam:"style=form,explode=true,name=limit"`
	Next           *string                       `queryParam:"style=form,explode=true,name=next"`
	OrderBy        *GetEventsQueryParamOrderBy   `queryParam:"style=form,explode=true,name=order_by"`
	ParsedQuery    *QueryParamParsedQuery        `queryParam:"style=form,explode=true,name=parsed_query"`
	Path           *string                       `queryParam:"style=form,explode=true,name=path"`
	Prev           *string                       `queryParam:"style=form,explode=true,name=prev"`
	ResponseStatus *QueryParamResponseStatus     `queryParam:"style=form,explode=true,name=response_status"`
	SearchTerm     *string                       `queryParam:"style=form,explode=true,name=search_term"`
	SourceID       *GetEventsQueryParamSourceID  `queryParam:"style=form,explode=true,name=source_id"`
	Status         *GetEventsQueryParamStatus    `queryParam:"style=form,explode=true,name=status"`
	SuccessfulAt   *QueryParamSuccessfulAt       `queryParam:"style=form,explode=true,name=successful_at"`
	WebhookID      *GetEventsQueryParamWebhookID `queryParam:"style=form,explode=true,name=webhook_id"`
}

func (o *GetEventsRequest) GetAttempts() *QueryParamAttempts {
	if o == nil {
		return nil
	}
	return o.Attempts
}

func (o *GetEventsRequest) GetBody() *QueryParamBody {
	if o == nil {
		return nil
	}
	return o.Body
}

func (o *GetEventsRequest) GetBulkRetryID() *QueryParamBulkRetryID {
	if o == nil {
		return nil
	}
	return o.BulkRetryID
}

func (o *GetEventsRequest) GetCliID() *QueryParamCliID {
	if o == nil {
		return nil
	}
	return o.CliID
}

func (o *GetEventsRequest) GetCliUserID() *QueryParamCliUserID {
	if o == nil {
		return nil
	}
	return o.CliUserID
}

func (o *GetEventsRequest) GetCreatedAt() *GetEventsQueryParamCreatedAt {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetEventsRequest) GetDestinationID() *GetEventsQueryParamDestinationID {
	if o == nil {
		return nil
	}
	return o.DestinationID
}

func (o *GetEventsRequest) GetDir() *GetEventsQueryParamDir {
	if o == nil {
		return nil
	}
	return o.Dir
}

func (o *GetEventsRequest) GetErrorCode() *QueryParamErrorCode {
	if o == nil {
		return nil
	}
	return o.ErrorCode
}

func (o *GetEventsRequest) GetEventDataID() *GetEventsQueryParamEventDataID {
	if o == nil {
		return nil
	}
	return o.EventDataID
}

func (o *GetEventsRequest) GetHeaders() *QueryParamHeaders {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *GetEventsRequest) GetID() *GetEventsQueryParamID {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *GetEventsRequest) GetInclude() *Include {
	if o == nil {
		return nil
	}
	return o.Include
}

func (o *GetEventsRequest) GetIssueID() *GetEventsQueryParamIssueID {
	if o == nil {
		return nil
	}
	return o.IssueID
}

func (o *GetEventsRequest) GetLastAttemptAt() *QueryParamLastAttemptAt {
	if o == nil {
		return nil
	}
	return o.LastAttemptAt
}

func (o *GetEventsRequest) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *GetEventsRequest) GetNext() *string {
	if o == nil {
		return nil
	}
	return o.Next
}

func (o *GetEventsRequest) GetOrderBy() *GetEventsQueryParamOrderBy {
	if o == nil {
		return nil
	}
	return o.OrderBy
}

func (o *GetEventsRequest) GetParsedQuery() *QueryParamParsedQuery {
	if o == nil {
		return nil
	}
	return o.ParsedQuery
}

func (o *GetEventsRequest) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

func (o *GetEventsRequest) GetPrev() *string {
	if o == nil {
		return nil
	}
	return o.Prev
}

func (o *GetEventsRequest) GetResponseStatus() *QueryParamResponseStatus {
	if o == nil {
		return nil
	}
	return o.ResponseStatus
}

func (o *GetEventsRequest) GetSearchTerm() *string {
	if o == nil {
		return nil
	}
	return o.SearchTerm
}

func (o *GetEventsRequest) GetSourceID() *GetEventsQueryParamSourceID {
	if o == nil {
		return nil
	}
	return o.SourceID
}

func (o *GetEventsRequest) GetStatus() *GetEventsQueryParamStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *GetEventsRequest) GetSuccessfulAt() *QueryParamSuccessfulAt {
	if o == nil {
		return nil
	}
	return o.SuccessfulAt
}

func (o *GetEventsRequest) GetWebhookID() *GetEventsQueryParamWebhookID {
	if o == nil {
		return nil
	}
	return o.WebhookID
}

type GetEventsResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// List of events
	EventPaginatedResult *components.EventPaginatedResult
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *GetEventsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetEventsResponse) GetEventPaginatedResult() *components.EventPaginatedResult {
	if o == nil {
		return nil
	}
	return o.EventPaginatedResult
}

func (o *GetEventsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetEventsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
