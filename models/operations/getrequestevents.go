// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/speakeasy-sdks/hookdeck-go/internal/utils"
	"github.com/speakeasy-sdks/hookdeck-go/models/components"
	"net/http"
	"time"
)

type GetRequestEventsQueryParam2 struct {
	Any      *bool  `queryParam:"name=any"`
	Contains *int64 `queryParam:"name=contains"`
	Gt       *int64 `queryParam:"name=gt"`
	Gte      *int64 `queryParam:"name=gte"`
	Le       *int64 `queryParam:"name=le"`
	Lte      *int64 `queryParam:"name=lte"`
}

func (o *GetRequestEventsQueryParam2) GetAny() *bool {
	if o == nil {
		return nil
	}
	return o.Any
}

func (o *GetRequestEventsQueryParam2) GetContains() *int64 {
	if o == nil {
		return nil
	}
	return o.Contains
}

func (o *GetRequestEventsQueryParam2) GetGt() *int64 {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *GetRequestEventsQueryParam2) GetGte() *int64 {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *GetRequestEventsQueryParam2) GetLe() *int64 {
	if o == nil {
		return nil
	}
	return o.Le
}

func (o *GetRequestEventsQueryParam2) GetLte() *int64 {
	if o == nil {
		return nil
	}
	return o.Lte
}

type GetRequestEventsQueryParamAttemptsType string

const (
	GetRequestEventsQueryParamAttemptsTypeInteger                     GetRequestEventsQueryParamAttemptsType = "integer"
	GetRequestEventsQueryParamAttemptsTypeGetRequestEventsQueryParam2 GetRequestEventsQueryParamAttemptsType = "getRequestEvents_queryParam_2"
)

// GetRequestEventsQueryParamAttempts - Filter by number of attempts
type GetRequestEventsQueryParamAttempts struct {
	Integer                     *int64
	GetRequestEventsQueryParam2 *GetRequestEventsQueryParam2

	Type GetRequestEventsQueryParamAttemptsType
}

func CreateGetRequestEventsQueryParamAttemptsInteger(integer int64) GetRequestEventsQueryParamAttempts {
	typ := GetRequestEventsQueryParamAttemptsTypeInteger

	return GetRequestEventsQueryParamAttempts{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateGetRequestEventsQueryParamAttemptsGetRequestEventsQueryParam2(getRequestEventsQueryParam2 GetRequestEventsQueryParam2) GetRequestEventsQueryParamAttempts {
	typ := GetRequestEventsQueryParamAttemptsTypeGetRequestEventsQueryParam2

	return GetRequestEventsQueryParamAttempts{
		GetRequestEventsQueryParam2: &getRequestEventsQueryParam2,
		Type:                        typ,
	}
}

func (u *GetRequestEventsQueryParamAttempts) UnmarshalJSON(data []byte) error {

	getRequestEventsQueryParam2 := GetRequestEventsQueryParam2{}
	if err := utils.UnmarshalJSON(data, &getRequestEventsQueryParam2, "", true, true); err == nil {
		u.GetRequestEventsQueryParam2 = &getRequestEventsQueryParam2
		u.Type = GetRequestEventsQueryParamAttemptsTypeGetRequestEventsQueryParam2
		return nil
	}

	integer := int64(0)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = &integer
		u.Type = GetRequestEventsQueryParamAttemptsTypeInteger
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetRequestEventsQueryParamAttempts) MarshalJSON() ([]byte, error) {
	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.GetRequestEventsQueryParam2 != nil {
		return utils.MarshalJSON(u.GetRequestEventsQueryParam2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetRequestEventsQueryParamRequestEvents2 struct {
}

type GetRequestEventsQueryParamBodyType string

const (
	GetRequestEventsQueryParamBodyTypeStr                                      GetRequestEventsQueryParamBodyType = "str"
	GetRequestEventsQueryParamBodyTypeGetRequestEventsQueryParamRequestEvents2 GetRequestEventsQueryParamBodyType = "getRequestEvents_queryParam_RequestEvents_2"
)

// GetRequestEventsQueryParamBody - URL Encoded string of the JSON to match to the data body
type GetRequestEventsQueryParamBody struct {
	Str                                      *string
	GetRequestEventsQueryParamRequestEvents2 *GetRequestEventsQueryParamRequestEvents2

	Type GetRequestEventsQueryParamBodyType
}

func CreateGetRequestEventsQueryParamBodyStr(str string) GetRequestEventsQueryParamBody {
	typ := GetRequestEventsQueryParamBodyTypeStr

	return GetRequestEventsQueryParamBody{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetRequestEventsQueryParamBodyGetRequestEventsQueryParamRequestEvents2(getRequestEventsQueryParamRequestEvents2 GetRequestEventsQueryParamRequestEvents2) GetRequestEventsQueryParamBody {
	typ := GetRequestEventsQueryParamBodyTypeGetRequestEventsQueryParamRequestEvents2

	return GetRequestEventsQueryParamBody{
		GetRequestEventsQueryParamRequestEvents2: &getRequestEventsQueryParamRequestEvents2,
		Type:                                     typ,
	}
}

func (u *GetRequestEventsQueryParamBody) UnmarshalJSON(data []byte) error {

	getRequestEventsQueryParamRequestEvents2 := GetRequestEventsQueryParamRequestEvents2{}
	if err := utils.UnmarshalJSON(data, &getRequestEventsQueryParamRequestEvents2, "", true, true); err == nil {
		u.GetRequestEventsQueryParamRequestEvents2 = &getRequestEventsQueryParamRequestEvents2
		u.Type = GetRequestEventsQueryParamBodyTypeGetRequestEventsQueryParamRequestEvents2
		return nil
	}

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GetRequestEventsQueryParamBodyTypeStr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetRequestEventsQueryParamBody) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.GetRequestEventsQueryParamRequestEvents2 != nil {
		return utils.MarshalJSON(u.GetRequestEventsQueryParamRequestEvents2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetRequestEventsQueryParamBulkRetryIDType string

const (
	GetRequestEventsQueryParamBulkRetryIDTypeStr        GetRequestEventsQueryParamBulkRetryIDType = "str"
	GetRequestEventsQueryParamBulkRetryIDTypeArrayOfstr GetRequestEventsQueryParamBulkRetryIDType = "arrayOfstr"
)

type GetRequestEventsQueryParamBulkRetryID struct {
	Str        *string
	ArrayOfstr []string

	Type GetRequestEventsQueryParamBulkRetryIDType
}

func CreateGetRequestEventsQueryParamBulkRetryIDStr(str string) GetRequestEventsQueryParamBulkRetryID {
	typ := GetRequestEventsQueryParamBulkRetryIDTypeStr

	return GetRequestEventsQueryParamBulkRetryID{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetRequestEventsQueryParamBulkRetryIDArrayOfstr(arrayOfstr []string) GetRequestEventsQueryParamBulkRetryID {
	typ := GetRequestEventsQueryParamBulkRetryIDTypeArrayOfstr

	return GetRequestEventsQueryParamBulkRetryID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *GetRequestEventsQueryParamBulkRetryID) UnmarshalJSON(data []byte) error {

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GetRequestEventsQueryParamBulkRetryIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = GetRequestEventsQueryParamBulkRetryIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetRequestEventsQueryParamBulkRetryID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetRequestEventsQueryParamRequestEventsCliID2 struct {
	Any *bool `queryParam:"name=any"`
}

func (o *GetRequestEventsQueryParamRequestEventsCliID2) GetAny() *bool {
	if o == nil {
		return nil
	}
	return o.Any
}

type GetRequestEventsQueryParamCliIDType string

const (
	GetRequestEventsQueryParamCliIDTypeStr                                           GetRequestEventsQueryParamCliIDType = "str"
	GetRequestEventsQueryParamCliIDTypeGetRequestEventsQueryParamRequestEventsCliID2 GetRequestEventsQueryParamCliIDType = "getRequestEvents_queryParam_RequestEvents_cli_id_2"
	GetRequestEventsQueryParamCliIDTypeArrayOfstr                                    GetRequestEventsQueryParamCliIDType = "arrayOfstr"
)

// GetRequestEventsQueryParamCliID - Filter by CLI IDs. `?[any]=true` operator for any CLI.
type GetRequestEventsQueryParamCliID struct {
	Str                                           *string
	GetRequestEventsQueryParamRequestEventsCliID2 *GetRequestEventsQueryParamRequestEventsCliID2
	ArrayOfstr                                    []string

	Type GetRequestEventsQueryParamCliIDType
}

func CreateGetRequestEventsQueryParamCliIDStr(str string) GetRequestEventsQueryParamCliID {
	typ := GetRequestEventsQueryParamCliIDTypeStr

	return GetRequestEventsQueryParamCliID{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetRequestEventsQueryParamCliIDGetRequestEventsQueryParamRequestEventsCliID2(getRequestEventsQueryParamRequestEventsCliID2 GetRequestEventsQueryParamRequestEventsCliID2) GetRequestEventsQueryParamCliID {
	typ := GetRequestEventsQueryParamCliIDTypeGetRequestEventsQueryParamRequestEventsCliID2

	return GetRequestEventsQueryParamCliID{
		GetRequestEventsQueryParamRequestEventsCliID2: &getRequestEventsQueryParamRequestEventsCliID2,
		Type: typ,
	}
}

func CreateGetRequestEventsQueryParamCliIDArrayOfstr(arrayOfstr []string) GetRequestEventsQueryParamCliID {
	typ := GetRequestEventsQueryParamCliIDTypeArrayOfstr

	return GetRequestEventsQueryParamCliID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *GetRequestEventsQueryParamCliID) UnmarshalJSON(data []byte) error {

	getRequestEventsQueryParamRequestEventsCliID2 := GetRequestEventsQueryParamRequestEventsCliID2{}
	if err := utils.UnmarshalJSON(data, &getRequestEventsQueryParamRequestEventsCliID2, "", true, true); err == nil {
		u.GetRequestEventsQueryParamRequestEventsCliID2 = &getRequestEventsQueryParamRequestEventsCliID2
		u.Type = GetRequestEventsQueryParamCliIDTypeGetRequestEventsQueryParamRequestEventsCliID2
		return nil
	}

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GetRequestEventsQueryParamCliIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = GetRequestEventsQueryParamCliIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetRequestEventsQueryParamCliID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.GetRequestEventsQueryParamRequestEventsCliID2 != nil {
		return utils.MarshalJSON(u.GetRequestEventsQueryParamRequestEventsCliID2, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetRequestEventsQueryParamCliUserIDType string

const (
	GetRequestEventsQueryParamCliUserIDTypeStr        GetRequestEventsQueryParamCliUserIDType = "str"
	GetRequestEventsQueryParamCliUserIDTypeArrayOfstr GetRequestEventsQueryParamCliUserIDType = "arrayOfstr"
)

type GetRequestEventsQueryParamCliUserID struct {
	Str        *string
	ArrayOfstr []string

	Type GetRequestEventsQueryParamCliUserIDType
}

func CreateGetRequestEventsQueryParamCliUserIDStr(str string) GetRequestEventsQueryParamCliUserID {
	typ := GetRequestEventsQueryParamCliUserIDTypeStr

	return GetRequestEventsQueryParamCliUserID{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetRequestEventsQueryParamCliUserIDArrayOfstr(arrayOfstr []string) GetRequestEventsQueryParamCliUserID {
	typ := GetRequestEventsQueryParamCliUserIDTypeArrayOfstr

	return GetRequestEventsQueryParamCliUserID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *GetRequestEventsQueryParamCliUserID) UnmarshalJSON(data []byte) error {

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GetRequestEventsQueryParamCliUserIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = GetRequestEventsQueryParamCliUserIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetRequestEventsQueryParamCliUserID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetRequestEventsQueryParamRequestEventsCreatedAt2 struct {
	Any *bool      `queryParam:"name=any"`
	Gt  *time.Time `queryParam:"name=gt"`
	Gte *time.Time `queryParam:"name=gte"`
	Le  *time.Time `queryParam:"name=le"`
	Lte *time.Time `queryParam:"name=lte"`
}

func (g GetRequestEventsQueryParamRequestEventsCreatedAt2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetRequestEventsQueryParamRequestEventsCreatedAt2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetRequestEventsQueryParamRequestEventsCreatedAt2) GetAny() *bool {
	if o == nil {
		return nil
	}
	return o.Any
}

func (o *GetRequestEventsQueryParamRequestEventsCreatedAt2) GetGt() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *GetRequestEventsQueryParamRequestEventsCreatedAt2) GetGte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *GetRequestEventsQueryParamRequestEventsCreatedAt2) GetLe() *time.Time {
	if o == nil {
		return nil
	}
	return o.Le
}

func (o *GetRequestEventsQueryParamRequestEventsCreatedAt2) GetLte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Lte
}

type GetRequestEventsQueryParamCreatedAtType string

const (
	GetRequestEventsQueryParamCreatedAtTypeDateTime                                          GetRequestEventsQueryParamCreatedAtType = "date-time"
	GetRequestEventsQueryParamCreatedAtTypeGetRequestEventsQueryParamRequestEventsCreatedAt2 GetRequestEventsQueryParamCreatedAtType = "getRequestEvents_queryParam_RequestEvents_created_at_2"
)

// GetRequestEventsQueryParamCreatedAt - Filter by `created_at` date using a date operator
type GetRequestEventsQueryParamCreatedAt struct {
	DateTime                                          *time.Time
	GetRequestEventsQueryParamRequestEventsCreatedAt2 *GetRequestEventsQueryParamRequestEventsCreatedAt2

	Type GetRequestEventsQueryParamCreatedAtType
}

func CreateGetRequestEventsQueryParamCreatedAtDateTime(dateTime time.Time) GetRequestEventsQueryParamCreatedAt {
	typ := GetRequestEventsQueryParamCreatedAtTypeDateTime

	return GetRequestEventsQueryParamCreatedAt{
		DateTime: &dateTime,
		Type:     typ,
	}
}

func CreateGetRequestEventsQueryParamCreatedAtGetRequestEventsQueryParamRequestEventsCreatedAt2(getRequestEventsQueryParamRequestEventsCreatedAt2 GetRequestEventsQueryParamRequestEventsCreatedAt2) GetRequestEventsQueryParamCreatedAt {
	typ := GetRequestEventsQueryParamCreatedAtTypeGetRequestEventsQueryParamRequestEventsCreatedAt2

	return GetRequestEventsQueryParamCreatedAt{
		GetRequestEventsQueryParamRequestEventsCreatedAt2: &getRequestEventsQueryParamRequestEventsCreatedAt2,
		Type: typ,
	}
}

func (u *GetRequestEventsQueryParamCreatedAt) UnmarshalJSON(data []byte) error {

	getRequestEventsQueryParamRequestEventsCreatedAt2 := GetRequestEventsQueryParamRequestEventsCreatedAt2{}
	if err := utils.UnmarshalJSON(data, &getRequestEventsQueryParamRequestEventsCreatedAt2, "", true, true); err == nil {
		u.GetRequestEventsQueryParamRequestEventsCreatedAt2 = &getRequestEventsQueryParamRequestEventsCreatedAt2
		u.Type = GetRequestEventsQueryParamCreatedAtTypeGetRequestEventsQueryParamRequestEventsCreatedAt2
		return nil
	}

	dateTime := time.Time{}
	if err := utils.UnmarshalJSON(data, &dateTime, "", true, true); err == nil {
		u.DateTime = &dateTime
		u.Type = GetRequestEventsQueryParamCreatedAtTypeDateTime
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetRequestEventsQueryParamCreatedAt) MarshalJSON() ([]byte, error) {
	if u.DateTime != nil {
		return utils.MarshalJSON(u.DateTime, "", true)
	}

	if u.GetRequestEventsQueryParamRequestEventsCreatedAt2 != nil {
		return utils.MarshalJSON(u.GetRequestEventsQueryParamRequestEventsCreatedAt2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetRequestEventsQueryParamDestinationIDType string

const (
	GetRequestEventsQueryParamDestinationIDTypeStr        GetRequestEventsQueryParamDestinationIDType = "str"
	GetRequestEventsQueryParamDestinationIDTypeArrayOfstr GetRequestEventsQueryParamDestinationIDType = "arrayOfstr"
)

// GetRequestEventsQueryParamDestinationID - Filter by destination IDs
type GetRequestEventsQueryParamDestinationID struct {
	Str        *string
	ArrayOfstr []string

	Type GetRequestEventsQueryParamDestinationIDType
}

func CreateGetRequestEventsQueryParamDestinationIDStr(str string) GetRequestEventsQueryParamDestinationID {
	typ := GetRequestEventsQueryParamDestinationIDTypeStr

	return GetRequestEventsQueryParamDestinationID{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetRequestEventsQueryParamDestinationIDArrayOfstr(arrayOfstr []string) GetRequestEventsQueryParamDestinationID {
	typ := GetRequestEventsQueryParamDestinationIDTypeArrayOfstr

	return GetRequestEventsQueryParamDestinationID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *GetRequestEventsQueryParamDestinationID) UnmarshalJSON(data []byte) error {

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GetRequestEventsQueryParamDestinationIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = GetRequestEventsQueryParamDestinationIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetRequestEventsQueryParamDestinationID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetRequestEventsQueryParamRequestEventsDir2 string

const (
	GetRequestEventsQueryParamRequestEventsDir2Asc  GetRequestEventsQueryParamRequestEventsDir2 = "asc"
	GetRequestEventsQueryParamRequestEventsDir2Desc GetRequestEventsQueryParamRequestEventsDir2 = "desc"
)

func (e GetRequestEventsQueryParamRequestEventsDir2) ToPointer() *GetRequestEventsQueryParamRequestEventsDir2 {
	return &e
}

func (e *GetRequestEventsQueryParamRequestEventsDir2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = GetRequestEventsQueryParamRequestEventsDir2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRequestEventsQueryParamRequestEventsDir2: %v", v)
	}
}

type GetRequestEventsQueryParam1 string

const (
	GetRequestEventsQueryParam1Asc  GetRequestEventsQueryParam1 = "asc"
	GetRequestEventsQueryParam1Desc GetRequestEventsQueryParam1 = "desc"
)

func (e GetRequestEventsQueryParam1) ToPointer() *GetRequestEventsQueryParam1 {
	return &e
}

func (e *GetRequestEventsQueryParam1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = GetRequestEventsQueryParam1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRequestEventsQueryParam1: %v", v)
	}
}

type GetRequestEventsQueryParamDirType string

const (
	GetRequestEventsQueryParamDirTypeGetRequestEventsQueryParam1                        GetRequestEventsQueryParamDirType = "getRequestEvents_queryParam_1"
	GetRequestEventsQueryParamDirTypeArrayOfgetRequestEventsQueryParamRequestEventsDir2 GetRequestEventsQueryParamDirType = "arrayOfgetRequestEvents_queryParam_RequestEvents_dir_2"
)

// GetRequestEventsQueryParamDir - Sort direction
type GetRequestEventsQueryParamDir struct {
	GetRequestEventsQueryParam1                        *GetRequestEventsQueryParam1
	ArrayOfgetRequestEventsQueryParamRequestEventsDir2 []GetRequestEventsQueryParamRequestEventsDir2

	Type GetRequestEventsQueryParamDirType
}

func CreateGetRequestEventsQueryParamDirGetRequestEventsQueryParam1(getRequestEventsQueryParam1 GetRequestEventsQueryParam1) GetRequestEventsQueryParamDir {
	typ := GetRequestEventsQueryParamDirTypeGetRequestEventsQueryParam1

	return GetRequestEventsQueryParamDir{
		GetRequestEventsQueryParam1: &getRequestEventsQueryParam1,
		Type:                        typ,
	}
}

func CreateGetRequestEventsQueryParamDirArrayOfgetRequestEventsQueryParamRequestEventsDir2(arrayOfgetRequestEventsQueryParamRequestEventsDir2 []GetRequestEventsQueryParamRequestEventsDir2) GetRequestEventsQueryParamDir {
	typ := GetRequestEventsQueryParamDirTypeArrayOfgetRequestEventsQueryParamRequestEventsDir2

	return GetRequestEventsQueryParamDir{
		ArrayOfgetRequestEventsQueryParamRequestEventsDir2: arrayOfgetRequestEventsQueryParamRequestEventsDir2,
		Type: typ,
	}
}

func (u *GetRequestEventsQueryParamDir) UnmarshalJSON(data []byte) error {

	getRequestEventsQueryParam1 := GetRequestEventsQueryParam1("")
	if err := utils.UnmarshalJSON(data, &getRequestEventsQueryParam1, "", true, true); err == nil {
		u.GetRequestEventsQueryParam1 = &getRequestEventsQueryParam1
		u.Type = GetRequestEventsQueryParamDirTypeGetRequestEventsQueryParam1
		return nil
	}

	arrayOfgetRequestEventsQueryParamRequestEventsDir2 := []GetRequestEventsQueryParamRequestEventsDir2{}
	if err := utils.UnmarshalJSON(data, &arrayOfgetRequestEventsQueryParamRequestEventsDir2, "", true, true); err == nil {
		u.ArrayOfgetRequestEventsQueryParamRequestEventsDir2 = arrayOfgetRequestEventsQueryParamRequestEventsDir2
		u.Type = GetRequestEventsQueryParamDirTypeArrayOfgetRequestEventsQueryParamRequestEventsDir2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetRequestEventsQueryParamDir) MarshalJSON() ([]byte, error) {
	if u.GetRequestEventsQueryParam1 != nil {
		return utils.MarshalJSON(u.GetRequestEventsQueryParam1, "", true)
	}

	if u.ArrayOfgetRequestEventsQueryParamRequestEventsDir2 != nil {
		return utils.MarshalJSON(u.ArrayOfgetRequestEventsQueryParamRequestEventsDir2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetRequestEventsQueryParamErrorCodeType string

const (
	GetRequestEventsQueryParamErrorCodeTypeStr        GetRequestEventsQueryParamErrorCodeType = "str"
	GetRequestEventsQueryParamErrorCodeTypeArrayOfstr GetRequestEventsQueryParamErrorCodeType = "arrayOfstr"
)

type GetRequestEventsQueryParamErrorCode struct {
	Str        *string
	ArrayOfstr []string

	Type GetRequestEventsQueryParamErrorCodeType
}

func CreateGetRequestEventsQueryParamErrorCodeStr(str string) GetRequestEventsQueryParamErrorCode {
	typ := GetRequestEventsQueryParamErrorCodeTypeStr

	return GetRequestEventsQueryParamErrorCode{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetRequestEventsQueryParamErrorCodeArrayOfstr(arrayOfstr []string) GetRequestEventsQueryParamErrorCode {
	typ := GetRequestEventsQueryParamErrorCodeTypeArrayOfstr

	return GetRequestEventsQueryParamErrorCode{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *GetRequestEventsQueryParamErrorCode) UnmarshalJSON(data []byte) error {

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GetRequestEventsQueryParamErrorCodeTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = GetRequestEventsQueryParamErrorCodeTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetRequestEventsQueryParamErrorCode) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetRequestEventsQueryParamEventDataIDType string

const (
	GetRequestEventsQueryParamEventDataIDTypeStr        GetRequestEventsQueryParamEventDataIDType = "str"
	GetRequestEventsQueryParamEventDataIDTypeArrayOfstr GetRequestEventsQueryParamEventDataIDType = "arrayOfstr"
)

type GetRequestEventsQueryParamEventDataID struct {
	Str        *string
	ArrayOfstr []string

	Type GetRequestEventsQueryParamEventDataIDType
}

func CreateGetRequestEventsQueryParamEventDataIDStr(str string) GetRequestEventsQueryParamEventDataID {
	typ := GetRequestEventsQueryParamEventDataIDTypeStr

	return GetRequestEventsQueryParamEventDataID{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetRequestEventsQueryParamEventDataIDArrayOfstr(arrayOfstr []string) GetRequestEventsQueryParamEventDataID {
	typ := GetRequestEventsQueryParamEventDataIDTypeArrayOfstr

	return GetRequestEventsQueryParamEventDataID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *GetRequestEventsQueryParamEventDataID) UnmarshalJSON(data []byte) error {

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GetRequestEventsQueryParamEventDataIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = GetRequestEventsQueryParamEventDataIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetRequestEventsQueryParamEventDataID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetRequestEventsQueryParamRequestEventsHeaders2 struct {
}

type GetRequestEventsQueryParamHeadersType string

const (
	GetRequestEventsQueryParamHeadersTypeStr                                             GetRequestEventsQueryParamHeadersType = "str"
	GetRequestEventsQueryParamHeadersTypeGetRequestEventsQueryParamRequestEventsHeaders2 GetRequestEventsQueryParamHeadersType = "getRequestEvents_queryParam_RequestEvents_headers_2"
)

// GetRequestEventsQueryParamHeaders - URL Encoded string of the JSON to match to the data headers
type GetRequestEventsQueryParamHeaders struct {
	Str                                             *string
	GetRequestEventsQueryParamRequestEventsHeaders2 *GetRequestEventsQueryParamRequestEventsHeaders2

	Type GetRequestEventsQueryParamHeadersType
}

func CreateGetRequestEventsQueryParamHeadersStr(str string) GetRequestEventsQueryParamHeaders {
	typ := GetRequestEventsQueryParamHeadersTypeStr

	return GetRequestEventsQueryParamHeaders{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetRequestEventsQueryParamHeadersGetRequestEventsQueryParamRequestEventsHeaders2(getRequestEventsQueryParamRequestEventsHeaders2 GetRequestEventsQueryParamRequestEventsHeaders2) GetRequestEventsQueryParamHeaders {
	typ := GetRequestEventsQueryParamHeadersTypeGetRequestEventsQueryParamRequestEventsHeaders2

	return GetRequestEventsQueryParamHeaders{
		GetRequestEventsQueryParamRequestEventsHeaders2: &getRequestEventsQueryParamRequestEventsHeaders2,
		Type: typ,
	}
}

func (u *GetRequestEventsQueryParamHeaders) UnmarshalJSON(data []byte) error {

	getRequestEventsQueryParamRequestEventsHeaders2 := GetRequestEventsQueryParamRequestEventsHeaders2{}
	if err := utils.UnmarshalJSON(data, &getRequestEventsQueryParamRequestEventsHeaders2, "", true, true); err == nil {
		u.GetRequestEventsQueryParamRequestEventsHeaders2 = &getRequestEventsQueryParamRequestEventsHeaders2
		u.Type = GetRequestEventsQueryParamHeadersTypeGetRequestEventsQueryParamRequestEventsHeaders2
		return nil
	}

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GetRequestEventsQueryParamHeadersTypeStr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetRequestEventsQueryParamHeaders) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.GetRequestEventsQueryParamRequestEventsHeaders2 != nil {
		return utils.MarshalJSON(u.GetRequestEventsQueryParamRequestEventsHeaders2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetRequestEventsQueryParamIDType string

const (
	GetRequestEventsQueryParamIDTypeStr        GetRequestEventsQueryParamIDType = "str"
	GetRequestEventsQueryParamIDTypeArrayOfstr GetRequestEventsQueryParamIDType = "arrayOfstr"
)

// GetRequestEventsQueryParamID - Filter by event IDs
type GetRequestEventsQueryParamID struct {
	Str        *string
	ArrayOfstr []string

	Type GetRequestEventsQueryParamIDType
}

func CreateGetRequestEventsQueryParamIDStr(str string) GetRequestEventsQueryParamID {
	typ := GetRequestEventsQueryParamIDTypeStr

	return GetRequestEventsQueryParamID{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetRequestEventsQueryParamIDArrayOfstr(arrayOfstr []string) GetRequestEventsQueryParamID {
	typ := GetRequestEventsQueryParamIDTypeArrayOfstr

	return GetRequestEventsQueryParamID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *GetRequestEventsQueryParamID) UnmarshalJSON(data []byte) error {

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GetRequestEventsQueryParamIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = GetRequestEventsQueryParamIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetRequestEventsQueryParamID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// QueryParamInclude - Include the data object in the event model
type QueryParamInclude string

const (
	QueryParamIncludeData QueryParamInclude = "data"
)

func (e QueryParamInclude) ToPointer() *QueryParamInclude {
	return &e
}

func (e *QueryParamInclude) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "data":
		*e = QueryParamInclude(v)
		return nil
	default:
		return fmt.Errorf("invalid value for QueryParamInclude: %v", v)
	}
}

type GetRequestEventsQueryParamIssueIDType string

const (
	GetRequestEventsQueryParamIssueIDTypeStr        GetRequestEventsQueryParamIssueIDType = "str"
	GetRequestEventsQueryParamIssueIDTypeArrayOfstr GetRequestEventsQueryParamIssueIDType = "arrayOfstr"
)

type GetRequestEventsQueryParamIssueID struct {
	Str        *string
	ArrayOfstr []string

	Type GetRequestEventsQueryParamIssueIDType
}

func CreateGetRequestEventsQueryParamIssueIDStr(str string) GetRequestEventsQueryParamIssueID {
	typ := GetRequestEventsQueryParamIssueIDTypeStr

	return GetRequestEventsQueryParamIssueID{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetRequestEventsQueryParamIssueIDArrayOfstr(arrayOfstr []string) GetRequestEventsQueryParamIssueID {
	typ := GetRequestEventsQueryParamIssueIDTypeArrayOfstr

	return GetRequestEventsQueryParamIssueID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *GetRequestEventsQueryParamIssueID) UnmarshalJSON(data []byte) error {

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GetRequestEventsQueryParamIssueIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = GetRequestEventsQueryParamIssueIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetRequestEventsQueryParamIssueID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetRequestEventsQueryParamRequestEventsLastAttemptAt2 struct {
	Any *bool      `queryParam:"name=any"`
	Gt  *time.Time `queryParam:"name=gt"`
	Gte *time.Time `queryParam:"name=gte"`
	Le  *time.Time `queryParam:"name=le"`
	Lte *time.Time `queryParam:"name=lte"`
}

func (g GetRequestEventsQueryParamRequestEventsLastAttemptAt2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetRequestEventsQueryParamRequestEventsLastAttemptAt2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetRequestEventsQueryParamRequestEventsLastAttemptAt2) GetAny() *bool {
	if o == nil {
		return nil
	}
	return o.Any
}

func (o *GetRequestEventsQueryParamRequestEventsLastAttemptAt2) GetGt() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *GetRequestEventsQueryParamRequestEventsLastAttemptAt2) GetGte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *GetRequestEventsQueryParamRequestEventsLastAttemptAt2) GetLe() *time.Time {
	if o == nil {
		return nil
	}
	return o.Le
}

func (o *GetRequestEventsQueryParamRequestEventsLastAttemptAt2) GetLte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Lte
}

type GetRequestEventsQueryParamLastAttemptAtType string

const (
	GetRequestEventsQueryParamLastAttemptAtTypeDateTime                                              GetRequestEventsQueryParamLastAttemptAtType = "date-time"
	GetRequestEventsQueryParamLastAttemptAtTypeGetRequestEventsQueryParamRequestEventsLastAttemptAt2 GetRequestEventsQueryParamLastAttemptAtType = "getRequestEvents_queryParam_RequestEvents_last_attempt_at_2"
)

// GetRequestEventsQueryParamLastAttemptAt - Filter by `last_attempt_at` date using a date operator
type GetRequestEventsQueryParamLastAttemptAt struct {
	DateTime                                              *time.Time
	GetRequestEventsQueryParamRequestEventsLastAttemptAt2 *GetRequestEventsQueryParamRequestEventsLastAttemptAt2

	Type GetRequestEventsQueryParamLastAttemptAtType
}

func CreateGetRequestEventsQueryParamLastAttemptAtDateTime(dateTime time.Time) GetRequestEventsQueryParamLastAttemptAt {
	typ := GetRequestEventsQueryParamLastAttemptAtTypeDateTime

	return GetRequestEventsQueryParamLastAttemptAt{
		DateTime: &dateTime,
		Type:     typ,
	}
}

func CreateGetRequestEventsQueryParamLastAttemptAtGetRequestEventsQueryParamRequestEventsLastAttemptAt2(getRequestEventsQueryParamRequestEventsLastAttemptAt2 GetRequestEventsQueryParamRequestEventsLastAttemptAt2) GetRequestEventsQueryParamLastAttemptAt {
	typ := GetRequestEventsQueryParamLastAttemptAtTypeGetRequestEventsQueryParamRequestEventsLastAttemptAt2

	return GetRequestEventsQueryParamLastAttemptAt{
		GetRequestEventsQueryParamRequestEventsLastAttemptAt2: &getRequestEventsQueryParamRequestEventsLastAttemptAt2,
		Type: typ,
	}
}

func (u *GetRequestEventsQueryParamLastAttemptAt) UnmarshalJSON(data []byte) error {

	getRequestEventsQueryParamRequestEventsLastAttemptAt2 := GetRequestEventsQueryParamRequestEventsLastAttemptAt2{}
	if err := utils.UnmarshalJSON(data, &getRequestEventsQueryParamRequestEventsLastAttemptAt2, "", true, true); err == nil {
		u.GetRequestEventsQueryParamRequestEventsLastAttemptAt2 = &getRequestEventsQueryParamRequestEventsLastAttemptAt2
		u.Type = GetRequestEventsQueryParamLastAttemptAtTypeGetRequestEventsQueryParamRequestEventsLastAttemptAt2
		return nil
	}

	dateTime := time.Time{}
	if err := utils.UnmarshalJSON(data, &dateTime, "", true, true); err == nil {
		u.DateTime = &dateTime
		u.Type = GetRequestEventsQueryParamLastAttemptAtTypeDateTime
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetRequestEventsQueryParamLastAttemptAt) MarshalJSON() ([]byte, error) {
	if u.DateTime != nil {
		return utils.MarshalJSON(u.DateTime, "", true)
	}

	if u.GetRequestEventsQueryParamRequestEventsLastAttemptAt2 != nil {
		return utils.MarshalJSON(u.GetRequestEventsQueryParamRequestEventsLastAttemptAt2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetRequestEventsQueryParamRequestEventsOrderBy2 string

const (
	GetRequestEventsQueryParamRequestEventsOrderBy2LastAttemptAt GetRequestEventsQueryParamRequestEventsOrderBy2 = "last_attempt_at"
	GetRequestEventsQueryParamRequestEventsOrderBy2NextAttemptAt GetRequestEventsQueryParamRequestEventsOrderBy2 = "next_attempt_at"
	GetRequestEventsQueryParamRequestEventsOrderBy2CreatedAt     GetRequestEventsQueryParamRequestEventsOrderBy2 = "created_at"
)

func (e GetRequestEventsQueryParamRequestEventsOrderBy2) ToPointer() *GetRequestEventsQueryParamRequestEventsOrderBy2 {
	return &e
}

func (e *GetRequestEventsQueryParamRequestEventsOrderBy2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "last_attempt_at":
		fallthrough
	case "next_attempt_at":
		fallthrough
	case "created_at":
		*e = GetRequestEventsQueryParamRequestEventsOrderBy2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRequestEventsQueryParamRequestEventsOrderBy2: %v", v)
	}
}

type GetRequestEventsQueryParamRequestEvents1 string

const (
	GetRequestEventsQueryParamRequestEvents1LastAttemptAt GetRequestEventsQueryParamRequestEvents1 = "last_attempt_at"
	GetRequestEventsQueryParamRequestEvents1NextAttemptAt GetRequestEventsQueryParamRequestEvents1 = "next_attempt_at"
	GetRequestEventsQueryParamRequestEvents1CreatedAt     GetRequestEventsQueryParamRequestEvents1 = "created_at"
)

func (e GetRequestEventsQueryParamRequestEvents1) ToPointer() *GetRequestEventsQueryParamRequestEvents1 {
	return &e
}

func (e *GetRequestEventsQueryParamRequestEvents1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "last_attempt_at":
		fallthrough
	case "next_attempt_at":
		fallthrough
	case "created_at":
		*e = GetRequestEventsQueryParamRequestEvents1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRequestEventsQueryParamRequestEvents1: %v", v)
	}
}

type GetRequestEventsQueryParamOrderByType string

const (
	GetRequestEventsQueryParamOrderByTypeGetRequestEventsQueryParamRequestEvents1               GetRequestEventsQueryParamOrderByType = "getRequestEvents_queryParam_RequestEvents_1"
	GetRequestEventsQueryParamOrderByTypeArrayOfgetRequestEventsQueryParamRequestEventsOrderBy2 GetRequestEventsQueryParamOrderByType = "arrayOfgetRequestEvents_queryParam_RequestEvents_order_by_2"
)

// GetRequestEventsQueryParamOrderBy - Sort key(s)
type GetRequestEventsQueryParamOrderBy struct {
	GetRequestEventsQueryParamRequestEvents1               *GetRequestEventsQueryParamRequestEvents1
	ArrayOfgetRequestEventsQueryParamRequestEventsOrderBy2 []GetRequestEventsQueryParamRequestEventsOrderBy2

	Type GetRequestEventsQueryParamOrderByType
}

func CreateGetRequestEventsQueryParamOrderByGetRequestEventsQueryParamRequestEvents1(getRequestEventsQueryParamRequestEvents1 GetRequestEventsQueryParamRequestEvents1) GetRequestEventsQueryParamOrderBy {
	typ := GetRequestEventsQueryParamOrderByTypeGetRequestEventsQueryParamRequestEvents1

	return GetRequestEventsQueryParamOrderBy{
		GetRequestEventsQueryParamRequestEvents1: &getRequestEventsQueryParamRequestEvents1,
		Type:                                     typ,
	}
}

func CreateGetRequestEventsQueryParamOrderByArrayOfgetRequestEventsQueryParamRequestEventsOrderBy2(arrayOfgetRequestEventsQueryParamRequestEventsOrderBy2 []GetRequestEventsQueryParamRequestEventsOrderBy2) GetRequestEventsQueryParamOrderBy {
	typ := GetRequestEventsQueryParamOrderByTypeArrayOfgetRequestEventsQueryParamRequestEventsOrderBy2

	return GetRequestEventsQueryParamOrderBy{
		ArrayOfgetRequestEventsQueryParamRequestEventsOrderBy2: arrayOfgetRequestEventsQueryParamRequestEventsOrderBy2,
		Type: typ,
	}
}

func (u *GetRequestEventsQueryParamOrderBy) UnmarshalJSON(data []byte) error {

	getRequestEventsQueryParamRequestEvents1 := GetRequestEventsQueryParamRequestEvents1("")
	if err := utils.UnmarshalJSON(data, &getRequestEventsQueryParamRequestEvents1, "", true, true); err == nil {
		u.GetRequestEventsQueryParamRequestEvents1 = &getRequestEventsQueryParamRequestEvents1
		u.Type = GetRequestEventsQueryParamOrderByTypeGetRequestEventsQueryParamRequestEvents1
		return nil
	}

	arrayOfgetRequestEventsQueryParamRequestEventsOrderBy2 := []GetRequestEventsQueryParamRequestEventsOrderBy2{}
	if err := utils.UnmarshalJSON(data, &arrayOfgetRequestEventsQueryParamRequestEventsOrderBy2, "", true, true); err == nil {
		u.ArrayOfgetRequestEventsQueryParamRequestEventsOrderBy2 = arrayOfgetRequestEventsQueryParamRequestEventsOrderBy2
		u.Type = GetRequestEventsQueryParamOrderByTypeArrayOfgetRequestEventsQueryParamRequestEventsOrderBy2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetRequestEventsQueryParamOrderBy) MarshalJSON() ([]byte, error) {
	if u.GetRequestEventsQueryParamRequestEvents1 != nil {
		return utils.MarshalJSON(u.GetRequestEventsQueryParamRequestEvents1, "", true)
	}

	if u.ArrayOfgetRequestEventsQueryParamRequestEventsOrderBy2 != nil {
		return utils.MarshalJSON(u.ArrayOfgetRequestEventsQueryParamRequestEventsOrderBy2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetRequestEventsQueryParamRequestEventsParsedQuery2 struct {
}

type GetRequestEventsQueryParamParsedQueryType string

const (
	GetRequestEventsQueryParamParsedQueryTypeStr                                                 GetRequestEventsQueryParamParsedQueryType = "str"
	GetRequestEventsQueryParamParsedQueryTypeGetRequestEventsQueryParamRequestEventsParsedQuery2 GetRequestEventsQueryParamParsedQueryType = "getRequestEvents_queryParam_RequestEvents_parsed_query_2"
)

// GetRequestEventsQueryParamParsedQuery - URL Encoded string of the JSON to match to the parsed query (JSON representation of the query)
type GetRequestEventsQueryParamParsedQuery struct {
	Str                                                 *string
	GetRequestEventsQueryParamRequestEventsParsedQuery2 *GetRequestEventsQueryParamRequestEventsParsedQuery2

	Type GetRequestEventsQueryParamParsedQueryType
}

func CreateGetRequestEventsQueryParamParsedQueryStr(str string) GetRequestEventsQueryParamParsedQuery {
	typ := GetRequestEventsQueryParamParsedQueryTypeStr

	return GetRequestEventsQueryParamParsedQuery{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetRequestEventsQueryParamParsedQueryGetRequestEventsQueryParamRequestEventsParsedQuery2(getRequestEventsQueryParamRequestEventsParsedQuery2 GetRequestEventsQueryParamRequestEventsParsedQuery2) GetRequestEventsQueryParamParsedQuery {
	typ := GetRequestEventsQueryParamParsedQueryTypeGetRequestEventsQueryParamRequestEventsParsedQuery2

	return GetRequestEventsQueryParamParsedQuery{
		GetRequestEventsQueryParamRequestEventsParsedQuery2: &getRequestEventsQueryParamRequestEventsParsedQuery2,
		Type: typ,
	}
}

func (u *GetRequestEventsQueryParamParsedQuery) UnmarshalJSON(data []byte) error {

	getRequestEventsQueryParamRequestEventsParsedQuery2 := GetRequestEventsQueryParamRequestEventsParsedQuery2{}
	if err := utils.UnmarshalJSON(data, &getRequestEventsQueryParamRequestEventsParsedQuery2, "", true, true); err == nil {
		u.GetRequestEventsQueryParamRequestEventsParsedQuery2 = &getRequestEventsQueryParamRequestEventsParsedQuery2
		u.Type = GetRequestEventsQueryParamParsedQueryTypeGetRequestEventsQueryParamRequestEventsParsedQuery2
		return nil
	}

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GetRequestEventsQueryParamParsedQueryTypeStr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetRequestEventsQueryParamParsedQuery) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.GetRequestEventsQueryParamRequestEventsParsedQuery2 != nil {
		return utils.MarshalJSON(u.GetRequestEventsQueryParamRequestEventsParsedQuery2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetRequestEventsQueryParamRequestEventsResponseStatus2 struct {
	Any      *bool  `queryParam:"name=any"`
	Contains *int64 `queryParam:"name=contains"`
	Gt       *int64 `queryParam:"name=gt"`
	Gte      *int64 `queryParam:"name=gte"`
	Le       *int64 `queryParam:"name=le"`
	Lte      *int64 `queryParam:"name=lte"`
}

func (o *GetRequestEventsQueryParamRequestEventsResponseStatus2) GetAny() *bool {
	if o == nil {
		return nil
	}
	return o.Any
}

func (o *GetRequestEventsQueryParamRequestEventsResponseStatus2) GetContains() *int64 {
	if o == nil {
		return nil
	}
	return o.Contains
}

func (o *GetRequestEventsQueryParamRequestEventsResponseStatus2) GetGt() *int64 {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *GetRequestEventsQueryParamRequestEventsResponseStatus2) GetGte() *int64 {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *GetRequestEventsQueryParamRequestEventsResponseStatus2) GetLe() *int64 {
	if o == nil {
		return nil
	}
	return o.Le
}

func (o *GetRequestEventsQueryParamRequestEventsResponseStatus2) GetLte() *int64 {
	if o == nil {
		return nil
	}
	return o.Lte
}

type GetRequestEventsQueryParamResponseStatusType string

const (
	GetRequestEventsQueryParamResponseStatusTypeInteger                                                GetRequestEventsQueryParamResponseStatusType = "integer"
	GetRequestEventsQueryParamResponseStatusTypeGetRequestEventsQueryParamRequestEventsResponseStatus2 GetRequestEventsQueryParamResponseStatusType = "getRequestEvents_queryParam_RequestEvents_response_status_2"
	GetRequestEventsQueryParamResponseStatusTypeArrayOfinteger                                         GetRequestEventsQueryParamResponseStatusType = "arrayOfinteger"
)

// GetRequestEventsQueryParamResponseStatus - Filter by HTTP response status code
type GetRequestEventsQueryParamResponseStatus struct {
	Integer                                                *int64
	GetRequestEventsQueryParamRequestEventsResponseStatus2 *GetRequestEventsQueryParamRequestEventsResponseStatus2
	ArrayOfinteger                                         []int64

	Type GetRequestEventsQueryParamResponseStatusType
}

func CreateGetRequestEventsQueryParamResponseStatusInteger(integer int64) GetRequestEventsQueryParamResponseStatus {
	typ := GetRequestEventsQueryParamResponseStatusTypeInteger

	return GetRequestEventsQueryParamResponseStatus{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateGetRequestEventsQueryParamResponseStatusGetRequestEventsQueryParamRequestEventsResponseStatus2(getRequestEventsQueryParamRequestEventsResponseStatus2 GetRequestEventsQueryParamRequestEventsResponseStatus2) GetRequestEventsQueryParamResponseStatus {
	typ := GetRequestEventsQueryParamResponseStatusTypeGetRequestEventsQueryParamRequestEventsResponseStatus2

	return GetRequestEventsQueryParamResponseStatus{
		GetRequestEventsQueryParamRequestEventsResponseStatus2: &getRequestEventsQueryParamRequestEventsResponseStatus2,
		Type: typ,
	}
}

func CreateGetRequestEventsQueryParamResponseStatusArrayOfinteger(arrayOfinteger []int64) GetRequestEventsQueryParamResponseStatus {
	typ := GetRequestEventsQueryParamResponseStatusTypeArrayOfinteger

	return GetRequestEventsQueryParamResponseStatus{
		ArrayOfinteger: arrayOfinteger,
		Type:           typ,
	}
}

func (u *GetRequestEventsQueryParamResponseStatus) UnmarshalJSON(data []byte) error {

	getRequestEventsQueryParamRequestEventsResponseStatus2 := GetRequestEventsQueryParamRequestEventsResponseStatus2{}
	if err := utils.UnmarshalJSON(data, &getRequestEventsQueryParamRequestEventsResponseStatus2, "", true, true); err == nil {
		u.GetRequestEventsQueryParamRequestEventsResponseStatus2 = &getRequestEventsQueryParamRequestEventsResponseStatus2
		u.Type = GetRequestEventsQueryParamResponseStatusTypeGetRequestEventsQueryParamRequestEventsResponseStatus2
		return nil
	}

	integer := int64(0)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = &integer
		u.Type = GetRequestEventsQueryParamResponseStatusTypeInteger
		return nil
	}

	arrayOfinteger := []int64{}
	if err := utils.UnmarshalJSON(data, &arrayOfinteger, "", true, true); err == nil {
		u.ArrayOfinteger = arrayOfinteger
		u.Type = GetRequestEventsQueryParamResponseStatusTypeArrayOfinteger
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetRequestEventsQueryParamResponseStatus) MarshalJSON() ([]byte, error) {
	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.GetRequestEventsQueryParamRequestEventsResponseStatus2 != nil {
		return utils.MarshalJSON(u.GetRequestEventsQueryParamRequestEventsResponseStatus2, "", true)
	}

	if u.ArrayOfinteger != nil {
		return utils.MarshalJSON(u.ArrayOfinteger, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetRequestEventsQueryParamSourceIDType string

const (
	GetRequestEventsQueryParamSourceIDTypeStr        GetRequestEventsQueryParamSourceIDType = "str"
	GetRequestEventsQueryParamSourceIDTypeArrayOfstr GetRequestEventsQueryParamSourceIDType = "arrayOfstr"
)

// GetRequestEventsQueryParamSourceID - Filter by source IDs
type GetRequestEventsQueryParamSourceID struct {
	Str        *string
	ArrayOfstr []string

	Type GetRequestEventsQueryParamSourceIDType
}

func CreateGetRequestEventsQueryParamSourceIDStr(str string) GetRequestEventsQueryParamSourceID {
	typ := GetRequestEventsQueryParamSourceIDTypeStr

	return GetRequestEventsQueryParamSourceID{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetRequestEventsQueryParamSourceIDArrayOfstr(arrayOfstr []string) GetRequestEventsQueryParamSourceID {
	typ := GetRequestEventsQueryParamSourceIDTypeArrayOfstr

	return GetRequestEventsQueryParamSourceID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *GetRequestEventsQueryParamSourceID) UnmarshalJSON(data []byte) error {

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GetRequestEventsQueryParamSourceIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = GetRequestEventsQueryParamSourceIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetRequestEventsQueryParamSourceID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetRequestEventsQueryParamStatusType string

const (
	GetRequestEventsQueryParamStatusTypeEventStatus        GetRequestEventsQueryParamStatusType = "EventStatus"
	GetRequestEventsQueryParamStatusTypeArrayOfEventStatus GetRequestEventsQueryParamStatusType = "arrayOfEventStatus"
)

// GetRequestEventsQueryParamStatus - Lifecyle status of the event
type GetRequestEventsQueryParamStatus struct {
	EventStatus        *components.EventStatus
	ArrayOfEventStatus []components.EventStatus

	Type GetRequestEventsQueryParamStatusType
}

func CreateGetRequestEventsQueryParamStatusEventStatus(eventStatus components.EventStatus) GetRequestEventsQueryParamStatus {
	typ := GetRequestEventsQueryParamStatusTypeEventStatus

	return GetRequestEventsQueryParamStatus{
		EventStatus: &eventStatus,
		Type:        typ,
	}
}

func CreateGetRequestEventsQueryParamStatusArrayOfEventStatus(arrayOfEventStatus []components.EventStatus) GetRequestEventsQueryParamStatus {
	typ := GetRequestEventsQueryParamStatusTypeArrayOfEventStatus

	return GetRequestEventsQueryParamStatus{
		ArrayOfEventStatus: arrayOfEventStatus,
		Type:               typ,
	}
}

func (u *GetRequestEventsQueryParamStatus) UnmarshalJSON(data []byte) error {

	eventStatus := components.EventStatus("")
	if err := utils.UnmarshalJSON(data, &eventStatus, "", true, true); err == nil {
		u.EventStatus = &eventStatus
		u.Type = GetRequestEventsQueryParamStatusTypeEventStatus
		return nil
	}

	arrayOfEventStatus := []components.EventStatus{}
	if err := utils.UnmarshalJSON(data, &arrayOfEventStatus, "", true, true); err == nil {
		u.ArrayOfEventStatus = arrayOfEventStatus
		u.Type = GetRequestEventsQueryParamStatusTypeArrayOfEventStatus
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetRequestEventsQueryParamStatus) MarshalJSON() ([]byte, error) {
	if u.EventStatus != nil {
		return utils.MarshalJSON(u.EventStatus, "", true)
	}

	if u.ArrayOfEventStatus != nil {
		return utils.MarshalJSON(u.ArrayOfEventStatus, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetRequestEventsQueryParamRequestEventsSuccessfulAt2 struct {
	Any *bool      `queryParam:"name=any"`
	Gt  *time.Time `queryParam:"name=gt"`
	Gte *time.Time `queryParam:"name=gte"`
	Le  *time.Time `queryParam:"name=le"`
	Lte *time.Time `queryParam:"name=lte"`
}

func (g GetRequestEventsQueryParamRequestEventsSuccessfulAt2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetRequestEventsQueryParamRequestEventsSuccessfulAt2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetRequestEventsQueryParamRequestEventsSuccessfulAt2) GetAny() *bool {
	if o == nil {
		return nil
	}
	return o.Any
}

func (o *GetRequestEventsQueryParamRequestEventsSuccessfulAt2) GetGt() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *GetRequestEventsQueryParamRequestEventsSuccessfulAt2) GetGte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *GetRequestEventsQueryParamRequestEventsSuccessfulAt2) GetLe() *time.Time {
	if o == nil {
		return nil
	}
	return o.Le
}

func (o *GetRequestEventsQueryParamRequestEventsSuccessfulAt2) GetLte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Lte
}

type GetRequestEventsQueryParamSuccessfulAtType string

const (
	GetRequestEventsQueryParamSuccessfulAtTypeDateTime                                             GetRequestEventsQueryParamSuccessfulAtType = "date-time"
	GetRequestEventsQueryParamSuccessfulAtTypeGetRequestEventsQueryParamRequestEventsSuccessfulAt2 GetRequestEventsQueryParamSuccessfulAtType = "getRequestEvents_queryParam_RequestEvents_successful_at_2"
)

// GetRequestEventsQueryParamSuccessfulAt - Filter by `successful_at` date using a date operator
type GetRequestEventsQueryParamSuccessfulAt struct {
	DateTime                                             *time.Time
	GetRequestEventsQueryParamRequestEventsSuccessfulAt2 *GetRequestEventsQueryParamRequestEventsSuccessfulAt2

	Type GetRequestEventsQueryParamSuccessfulAtType
}

func CreateGetRequestEventsQueryParamSuccessfulAtDateTime(dateTime time.Time) GetRequestEventsQueryParamSuccessfulAt {
	typ := GetRequestEventsQueryParamSuccessfulAtTypeDateTime

	return GetRequestEventsQueryParamSuccessfulAt{
		DateTime: &dateTime,
		Type:     typ,
	}
}

func CreateGetRequestEventsQueryParamSuccessfulAtGetRequestEventsQueryParamRequestEventsSuccessfulAt2(getRequestEventsQueryParamRequestEventsSuccessfulAt2 GetRequestEventsQueryParamRequestEventsSuccessfulAt2) GetRequestEventsQueryParamSuccessfulAt {
	typ := GetRequestEventsQueryParamSuccessfulAtTypeGetRequestEventsQueryParamRequestEventsSuccessfulAt2

	return GetRequestEventsQueryParamSuccessfulAt{
		GetRequestEventsQueryParamRequestEventsSuccessfulAt2: &getRequestEventsQueryParamRequestEventsSuccessfulAt2,
		Type: typ,
	}
}

func (u *GetRequestEventsQueryParamSuccessfulAt) UnmarshalJSON(data []byte) error {

	getRequestEventsQueryParamRequestEventsSuccessfulAt2 := GetRequestEventsQueryParamRequestEventsSuccessfulAt2{}
	if err := utils.UnmarshalJSON(data, &getRequestEventsQueryParamRequestEventsSuccessfulAt2, "", true, true); err == nil {
		u.GetRequestEventsQueryParamRequestEventsSuccessfulAt2 = &getRequestEventsQueryParamRequestEventsSuccessfulAt2
		u.Type = GetRequestEventsQueryParamSuccessfulAtTypeGetRequestEventsQueryParamRequestEventsSuccessfulAt2
		return nil
	}

	dateTime := time.Time{}
	if err := utils.UnmarshalJSON(data, &dateTime, "", true, true); err == nil {
		u.DateTime = &dateTime
		u.Type = GetRequestEventsQueryParamSuccessfulAtTypeDateTime
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetRequestEventsQueryParamSuccessfulAt) MarshalJSON() ([]byte, error) {
	if u.DateTime != nil {
		return utils.MarshalJSON(u.DateTime, "", true)
	}

	if u.GetRequestEventsQueryParamRequestEventsSuccessfulAt2 != nil {
		return utils.MarshalJSON(u.GetRequestEventsQueryParamRequestEventsSuccessfulAt2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetRequestEventsQueryParamWebhookIDType string

const (
	GetRequestEventsQueryParamWebhookIDTypeStr        GetRequestEventsQueryParamWebhookIDType = "str"
	GetRequestEventsQueryParamWebhookIDTypeArrayOfstr GetRequestEventsQueryParamWebhookIDType = "arrayOfstr"
)

// GetRequestEventsQueryParamWebhookID - Filter by webhook connection IDs
type GetRequestEventsQueryParamWebhookID struct {
	Str        *string
	ArrayOfstr []string

	Type GetRequestEventsQueryParamWebhookIDType
}

func CreateGetRequestEventsQueryParamWebhookIDStr(str string) GetRequestEventsQueryParamWebhookID {
	typ := GetRequestEventsQueryParamWebhookIDTypeStr

	return GetRequestEventsQueryParamWebhookID{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetRequestEventsQueryParamWebhookIDArrayOfstr(arrayOfstr []string) GetRequestEventsQueryParamWebhookID {
	typ := GetRequestEventsQueryParamWebhookIDTypeArrayOfstr

	return GetRequestEventsQueryParamWebhookID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *GetRequestEventsQueryParamWebhookID) UnmarshalJSON(data []byte) error {

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GetRequestEventsQueryParamWebhookIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = GetRequestEventsQueryParamWebhookIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetRequestEventsQueryParamWebhookID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetRequestEventsRequest struct {
	// Filter by number of attempts
	Attempts *GetRequestEventsQueryParamAttempts `queryParam:"style=form,explode=true,name=attempts"`
	// URL Encoded string of the JSON to match to the data body
	Body        *GetRequestEventsQueryParamBody        `queryParam:"style=form,explode=true,name=body"`
	BulkRetryID *GetRequestEventsQueryParamBulkRetryID `queryParam:"style=form,explode=true,name=bulk_retry_id"`
	// Filter by CLI IDs. `?[any]=true` operator for any CLI.
	CliID     *GetRequestEventsQueryParamCliID     `queryParam:"style=form,explode=true,name=cli_id"`
	CliUserID *GetRequestEventsQueryParamCliUserID `queryParam:"style=form,explode=true,name=cli_user_id"`
	// Filter by `created_at` date using a date operator
	CreatedAt *GetRequestEventsQueryParamCreatedAt `queryParam:"style=form,explode=true,name=created_at"`
	// Filter by destination IDs
	DestinationID *GetRequestEventsQueryParamDestinationID `queryParam:"style=form,explode=true,name=destination_id"`
	// Sort direction
	Dir         *GetRequestEventsQueryParamDir         `queryParam:"style=form,explode=true,name=dir"`
	ErrorCode   *GetRequestEventsQueryParamErrorCode   `queryParam:"style=form,explode=true,name=error_code"`
	EventDataID *GetRequestEventsQueryParamEventDataID `queryParam:"style=form,explode=true,name=event_data_id"`
	// URL Encoded string of the JSON to match to the data headers
	Headers         *GetRequestEventsQueryParamHeaders `queryParam:"style=form,explode=true,name=headers"`
	IDPathParameter string                             `pathParam:"style=simple,explode=false,name=id"`
	// Filter by event IDs
	IDQueryParameter *GetRequestEventsQueryParamID `queryParam:"style=form,explode=true,name=id"`
	// Include the data object in the event model
	Include *QueryParamInclude                 `queryParam:"style=form,explode=true,name=include"`
	IssueID *GetRequestEventsQueryParamIssueID `queryParam:"style=form,explode=true,name=issue_id"`
	// Filter by `last_attempt_at` date using a date operator
	LastAttemptAt *GetRequestEventsQueryParamLastAttemptAt `queryParam:"style=form,explode=true,name=last_attempt_at"`
	Limit         *int64                                   `queryParam:"style=form,explode=true,name=limit"`
	Next          *string                                  `queryParam:"style=form,explode=true,name=next"`
	// Sort key(s)
	OrderBy *GetRequestEventsQueryParamOrderBy `queryParam:"style=form,explode=true,name=order_by"`
	// URL Encoded string of the JSON to match to the parsed query (JSON representation of the query)
	ParsedQuery *GetRequestEventsQueryParamParsedQuery `queryParam:"style=form,explode=true,name=parsed_query"`
	Path        *string                                `queryParam:"style=form,explode=true,name=path"`
	Prev        *string                                `queryParam:"style=form,explode=true,name=prev"`
	// Filter by HTTP response status code
	ResponseStatus *GetRequestEventsQueryParamResponseStatus `queryParam:"style=form,explode=true,name=response_status"`
	SearchTerm     *string                                   `queryParam:"style=form,explode=true,name=search_term"`
	// Filter by source IDs
	SourceID *GetRequestEventsQueryParamSourceID `queryParam:"style=form,explode=true,name=source_id"`
	// Lifecyle status of the event
	Status *GetRequestEventsQueryParamStatus `queryParam:"style=form,explode=true,name=status"`
	// Filter by `successful_at` date using a date operator
	SuccessfulAt *GetRequestEventsQueryParamSuccessfulAt `queryParam:"style=form,explode=true,name=successful_at"`
	// Filter by webhook connection IDs
	WebhookID *GetRequestEventsQueryParamWebhookID `queryParam:"style=form,explode=true,name=webhook_id"`
}

func (o *GetRequestEventsRequest) GetAttempts() *GetRequestEventsQueryParamAttempts {
	if o == nil {
		return nil
	}
	return o.Attempts
}

func (o *GetRequestEventsRequest) GetBody() *GetRequestEventsQueryParamBody {
	if o == nil {
		return nil
	}
	return o.Body
}

func (o *GetRequestEventsRequest) GetBulkRetryID() *GetRequestEventsQueryParamBulkRetryID {
	if o == nil {
		return nil
	}
	return o.BulkRetryID
}

func (o *GetRequestEventsRequest) GetCliID() *GetRequestEventsQueryParamCliID {
	if o == nil {
		return nil
	}
	return o.CliID
}

func (o *GetRequestEventsRequest) GetCliUserID() *GetRequestEventsQueryParamCliUserID {
	if o == nil {
		return nil
	}
	return o.CliUserID
}

func (o *GetRequestEventsRequest) GetCreatedAt() *GetRequestEventsQueryParamCreatedAt {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetRequestEventsRequest) GetDestinationID() *GetRequestEventsQueryParamDestinationID {
	if o == nil {
		return nil
	}
	return o.DestinationID
}

func (o *GetRequestEventsRequest) GetDir() *GetRequestEventsQueryParamDir {
	if o == nil {
		return nil
	}
	return o.Dir
}

func (o *GetRequestEventsRequest) GetErrorCode() *GetRequestEventsQueryParamErrorCode {
	if o == nil {
		return nil
	}
	return o.ErrorCode
}

func (o *GetRequestEventsRequest) GetEventDataID() *GetRequestEventsQueryParamEventDataID {
	if o == nil {
		return nil
	}
	return o.EventDataID
}

func (o *GetRequestEventsRequest) GetHeaders() *GetRequestEventsQueryParamHeaders {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *GetRequestEventsRequest) GetIDPathParameter() string {
	if o == nil {
		return ""
	}
	return o.IDPathParameter
}

func (o *GetRequestEventsRequest) GetIDQueryParameter() *GetRequestEventsQueryParamID {
	if o == nil {
		return nil
	}
	return o.IDQueryParameter
}

func (o *GetRequestEventsRequest) GetInclude() *QueryParamInclude {
	if o == nil {
		return nil
	}
	return o.Include
}

func (o *GetRequestEventsRequest) GetIssueID() *GetRequestEventsQueryParamIssueID {
	if o == nil {
		return nil
	}
	return o.IssueID
}

func (o *GetRequestEventsRequest) GetLastAttemptAt() *GetRequestEventsQueryParamLastAttemptAt {
	if o == nil {
		return nil
	}
	return o.LastAttemptAt
}

func (o *GetRequestEventsRequest) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *GetRequestEventsRequest) GetNext() *string {
	if o == nil {
		return nil
	}
	return o.Next
}

func (o *GetRequestEventsRequest) GetOrderBy() *GetRequestEventsQueryParamOrderBy {
	if o == nil {
		return nil
	}
	return o.OrderBy
}

func (o *GetRequestEventsRequest) GetParsedQuery() *GetRequestEventsQueryParamParsedQuery {
	if o == nil {
		return nil
	}
	return o.ParsedQuery
}

func (o *GetRequestEventsRequest) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

func (o *GetRequestEventsRequest) GetPrev() *string {
	if o == nil {
		return nil
	}
	return o.Prev
}

func (o *GetRequestEventsRequest) GetResponseStatus() *GetRequestEventsQueryParamResponseStatus {
	if o == nil {
		return nil
	}
	return o.ResponseStatus
}

func (o *GetRequestEventsRequest) GetSearchTerm() *string {
	if o == nil {
		return nil
	}
	return o.SearchTerm
}

func (o *GetRequestEventsRequest) GetSourceID() *GetRequestEventsQueryParamSourceID {
	if o == nil {
		return nil
	}
	return o.SourceID
}

func (o *GetRequestEventsRequest) GetStatus() *GetRequestEventsQueryParamStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *GetRequestEventsRequest) GetSuccessfulAt() *GetRequestEventsQueryParamSuccessfulAt {
	if o == nil {
		return nil
	}
	return o.SuccessfulAt
}

func (o *GetRequestEventsRequest) GetWebhookID() *GetRequestEventsQueryParamWebhookID {
	if o == nil {
		return nil
	}
	return o.WebhookID
}

type GetRequestEventsResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// List of events
	EventPaginatedResult *components.EventPaginatedResult
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *GetRequestEventsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetRequestEventsResponse) GetEventPaginatedResult() *components.EventPaginatedResult {
	if o == nil {
		return nil
	}
	return o.EventPaginatedResult
}

func (o *GetRequestEventsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetRequestEventsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
