// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/speakeasy-sdks/hookdeck-go/internal/utils"
	"github.com/speakeasy-sdks/hookdeck-go/models/components"
	"net/http"
	"time"
)

type GetDestinationsQueryParam2 struct {
	Any *bool      `queryParam:"name=any"`
	Gt  *time.Time `queryParam:"name=gt"`
	Gte *time.Time `queryParam:"name=gte"`
	Le  *time.Time `queryParam:"name=le"`
	Lte *time.Time `queryParam:"name=lte"`
}

func (g GetDestinationsQueryParam2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDestinationsQueryParam2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetDestinationsQueryParam2) GetAny() *bool {
	if o == nil {
		return nil
	}
	return o.Any
}

func (o *GetDestinationsQueryParam2) GetGt() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *GetDestinationsQueryParam2) GetGte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *GetDestinationsQueryParam2) GetLe() *time.Time {
	if o == nil {
		return nil
	}
	return o.Le
}

func (o *GetDestinationsQueryParam2) GetLte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Lte
}

type QueryParamArchivedAtType string

const (
	QueryParamArchivedAtTypeDateTime                   QueryParamArchivedAtType = "date-time"
	QueryParamArchivedAtTypeGetDestinationsQueryParam2 QueryParamArchivedAtType = "getDestinations_queryParam_2"
)

// QueryParamArchivedAt - Date the destination was archived
type QueryParamArchivedAt struct {
	DateTime                   *time.Time
	GetDestinationsQueryParam2 *GetDestinationsQueryParam2

	Type QueryParamArchivedAtType
}

func CreateQueryParamArchivedAtDateTime(dateTime time.Time) QueryParamArchivedAt {
	typ := QueryParamArchivedAtTypeDateTime

	return QueryParamArchivedAt{
		DateTime: &dateTime,
		Type:     typ,
	}
}

func CreateQueryParamArchivedAtGetDestinationsQueryParam2(getDestinationsQueryParam2 GetDestinationsQueryParam2) QueryParamArchivedAt {
	typ := QueryParamArchivedAtTypeGetDestinationsQueryParam2

	return QueryParamArchivedAt{
		GetDestinationsQueryParam2: &getDestinationsQueryParam2,
		Type:                       typ,
	}
}

func (u *QueryParamArchivedAt) UnmarshalJSON(data []byte) error {

	getDestinationsQueryParam2 := GetDestinationsQueryParam2{}
	if err := utils.UnmarshalJSON(data, &getDestinationsQueryParam2, "", true, true); err == nil {
		u.GetDestinationsQueryParam2 = &getDestinationsQueryParam2
		u.Type = QueryParamArchivedAtTypeGetDestinationsQueryParam2
		return nil
	}

	dateTime := time.Time{}
	if err := utils.UnmarshalJSON(data, &dateTime, "", true, true); err == nil {
		u.DateTime = &dateTime
		u.Type = QueryParamArchivedAtTypeDateTime
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u QueryParamArchivedAt) MarshalJSON() ([]byte, error) {
	if u.DateTime != nil {
		return utils.MarshalJSON(u.DateTime, "", true)
	}

	if u.GetDestinationsQueryParam2 != nil {
		return utils.MarshalJSON(u.GetDestinationsQueryParam2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetDestinationsQueryParamDestinations2 struct {
	Any *bool `queryParam:"name=any"`
}

func (o *GetDestinationsQueryParamDestinations2) GetAny() *bool {
	if o == nil {
		return nil
	}
	return o.Any
}

type CliPathType string

const (
	CliPathTypeStr                                    CliPathType = "str"
	CliPathTypeGetDestinationsQueryParamDestinations2 CliPathType = "getDestinations_queryParam_Destinations_2"
	CliPathTypeArrayOfstr                             CliPathType = "arrayOfstr"
)

// CliPath - Path for the CLI destination
type CliPath struct {
	Str                                    *string
	GetDestinationsQueryParamDestinations2 *GetDestinationsQueryParamDestinations2
	ArrayOfstr                             []string

	Type CliPathType
}

func CreateCliPathStr(str string) CliPath {
	typ := CliPathTypeStr

	return CliPath{
		Str:  &str,
		Type: typ,
	}
}

func CreateCliPathGetDestinationsQueryParamDestinations2(getDestinationsQueryParamDestinations2 GetDestinationsQueryParamDestinations2) CliPath {
	typ := CliPathTypeGetDestinationsQueryParamDestinations2

	return CliPath{
		GetDestinationsQueryParamDestinations2: &getDestinationsQueryParamDestinations2,
		Type:                                   typ,
	}
}

func CreateCliPathArrayOfstr(arrayOfstr []string) CliPath {
	typ := CliPathTypeArrayOfstr

	return CliPath{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *CliPath) UnmarshalJSON(data []byte) error {

	getDestinationsQueryParamDestinations2 := GetDestinationsQueryParamDestinations2{}
	if err := utils.UnmarshalJSON(data, &getDestinationsQueryParamDestinations2, "", true, true); err == nil {
		u.GetDestinationsQueryParamDestinations2 = &getDestinationsQueryParamDestinations2
		u.Type = CliPathTypeGetDestinationsQueryParamDestinations2
		return nil
	}

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CliPathTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = CliPathTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CliPath) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.GetDestinationsQueryParamDestinations2 != nil {
		return utils.MarshalJSON(u.GetDestinationsQueryParamDestinations2, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetDestinationsQueryParamDestinationsDir2 string

const (
	GetDestinationsQueryParamDestinationsDir2Asc  GetDestinationsQueryParamDestinationsDir2 = "asc"
	GetDestinationsQueryParamDestinationsDir2Desc GetDestinationsQueryParamDestinationsDir2 = "desc"
)

func (e GetDestinationsQueryParamDestinationsDir2) ToPointer() *GetDestinationsQueryParamDestinationsDir2 {
	return &e
}

func (e *GetDestinationsQueryParamDestinationsDir2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = GetDestinationsQueryParamDestinationsDir2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDestinationsQueryParamDestinationsDir2: %v", v)
	}
}

type GetDestinationsQueryParam1 string

const (
	GetDestinationsQueryParam1Asc  GetDestinationsQueryParam1 = "asc"
	GetDestinationsQueryParam1Desc GetDestinationsQueryParam1 = "desc"
)

func (e GetDestinationsQueryParam1) ToPointer() *GetDestinationsQueryParam1 {
	return &e
}

func (e *GetDestinationsQueryParam1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = GetDestinationsQueryParam1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDestinationsQueryParam1: %v", v)
	}
}

type GetDestinationsQueryParamDirType string

const (
	GetDestinationsQueryParamDirTypeGetDestinationsQueryParam1                       GetDestinationsQueryParamDirType = "getDestinations_queryParam_1"
	GetDestinationsQueryParamDirTypeArrayOfgetDestinationsQueryParamDestinationsDir2 GetDestinationsQueryParamDirType = "arrayOfgetDestinations_queryParam_Destinations_dir_2"
)

// GetDestinationsQueryParamDir - Sort direction
type GetDestinationsQueryParamDir struct {
	GetDestinationsQueryParam1                       *GetDestinationsQueryParam1
	ArrayOfgetDestinationsQueryParamDestinationsDir2 []GetDestinationsQueryParamDestinationsDir2

	Type GetDestinationsQueryParamDirType
}

func CreateGetDestinationsQueryParamDirGetDestinationsQueryParam1(getDestinationsQueryParam1 GetDestinationsQueryParam1) GetDestinationsQueryParamDir {
	typ := GetDestinationsQueryParamDirTypeGetDestinationsQueryParam1

	return GetDestinationsQueryParamDir{
		GetDestinationsQueryParam1: &getDestinationsQueryParam1,
		Type:                       typ,
	}
}

func CreateGetDestinationsQueryParamDirArrayOfgetDestinationsQueryParamDestinationsDir2(arrayOfgetDestinationsQueryParamDestinationsDir2 []GetDestinationsQueryParamDestinationsDir2) GetDestinationsQueryParamDir {
	typ := GetDestinationsQueryParamDirTypeArrayOfgetDestinationsQueryParamDestinationsDir2

	return GetDestinationsQueryParamDir{
		ArrayOfgetDestinationsQueryParamDestinationsDir2: arrayOfgetDestinationsQueryParamDestinationsDir2,
		Type: typ,
	}
}

func (u *GetDestinationsQueryParamDir) UnmarshalJSON(data []byte) error {

	getDestinationsQueryParam1 := GetDestinationsQueryParam1("")
	if err := utils.UnmarshalJSON(data, &getDestinationsQueryParam1, "", true, true); err == nil {
		u.GetDestinationsQueryParam1 = &getDestinationsQueryParam1
		u.Type = GetDestinationsQueryParamDirTypeGetDestinationsQueryParam1
		return nil
	}

	arrayOfgetDestinationsQueryParamDestinationsDir2 := []GetDestinationsQueryParamDestinationsDir2{}
	if err := utils.UnmarshalJSON(data, &arrayOfgetDestinationsQueryParamDestinationsDir2, "", true, true); err == nil {
		u.ArrayOfgetDestinationsQueryParamDestinationsDir2 = arrayOfgetDestinationsQueryParamDestinationsDir2
		u.Type = GetDestinationsQueryParamDirTypeArrayOfgetDestinationsQueryParamDestinationsDir2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetDestinationsQueryParamDir) MarshalJSON() ([]byte, error) {
	if u.GetDestinationsQueryParam1 != nil {
		return utils.MarshalJSON(u.GetDestinationsQueryParam1, "", true)
	}

	if u.ArrayOfgetDestinationsQueryParamDestinationsDir2 != nil {
		return utils.MarshalJSON(u.ArrayOfgetDestinationsQueryParamDestinationsDir2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetDestinationsQueryParamIDType string

const (
	GetDestinationsQueryParamIDTypeStr        GetDestinationsQueryParamIDType = "str"
	GetDestinationsQueryParamIDTypeArrayOfstr GetDestinationsQueryParamIDType = "arrayOfstr"
)

// GetDestinationsQueryParamID - Filter by destination IDs
type GetDestinationsQueryParamID struct {
	Str        *string
	ArrayOfstr []string

	Type GetDestinationsQueryParamIDType
}

func CreateGetDestinationsQueryParamIDStr(str string) GetDestinationsQueryParamID {
	typ := GetDestinationsQueryParamIDTypeStr

	return GetDestinationsQueryParamID{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetDestinationsQueryParamIDArrayOfstr(arrayOfstr []string) GetDestinationsQueryParamID {
	typ := GetDestinationsQueryParamIDTypeArrayOfstr

	return GetDestinationsQueryParamID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *GetDestinationsQueryParamID) UnmarshalJSON(data []byte) error {

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GetDestinationsQueryParamIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = GetDestinationsQueryParamIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetDestinationsQueryParamID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetDestinationsQueryParamDestinationsName2 struct {
	Any      *bool   `queryParam:"name=any"`
	Contains *string `queryParam:"name=contains"`
	Gt       *string `queryParam:"name=gt"`
	Gte      *string `queryParam:"name=gte"`
	Le       *string `queryParam:"name=le"`
	Lte      *string `queryParam:"name=lte"`
}

func (o *GetDestinationsQueryParamDestinationsName2) GetAny() *bool {
	if o == nil {
		return nil
	}
	return o.Any
}

func (o *GetDestinationsQueryParamDestinationsName2) GetContains() *string {
	if o == nil {
		return nil
	}
	return o.Contains
}

func (o *GetDestinationsQueryParamDestinationsName2) GetGt() *string {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *GetDestinationsQueryParamDestinationsName2) GetGte() *string {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *GetDestinationsQueryParamDestinationsName2) GetLe() *string {
	if o == nil {
		return nil
	}
	return o.Le
}

func (o *GetDestinationsQueryParamDestinationsName2) GetLte() *string {
	if o == nil {
		return nil
	}
	return o.Lte
}

type GetDestinationsQueryParamNameType string

const (
	GetDestinationsQueryParamNameTypeStr                                        GetDestinationsQueryParamNameType = "str"
	GetDestinationsQueryParamNameTypeGetDestinationsQueryParamDestinationsName2 GetDestinationsQueryParamNameType = "getDestinations_queryParam_Destinations_name_2"
)

// GetDestinationsQueryParamName - The destination name
type GetDestinationsQueryParamName struct {
	Str                                        *string
	GetDestinationsQueryParamDestinationsName2 *GetDestinationsQueryParamDestinationsName2

	Type GetDestinationsQueryParamNameType
}

func CreateGetDestinationsQueryParamNameStr(str string) GetDestinationsQueryParamName {
	typ := GetDestinationsQueryParamNameTypeStr

	return GetDestinationsQueryParamName{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetDestinationsQueryParamNameGetDestinationsQueryParamDestinationsName2(getDestinationsQueryParamDestinationsName2 GetDestinationsQueryParamDestinationsName2) GetDestinationsQueryParamName {
	typ := GetDestinationsQueryParamNameTypeGetDestinationsQueryParamDestinationsName2

	return GetDestinationsQueryParamName{
		GetDestinationsQueryParamDestinationsName2: &getDestinationsQueryParamDestinationsName2,
		Type: typ,
	}
}

func (u *GetDestinationsQueryParamName) UnmarshalJSON(data []byte) error {

	getDestinationsQueryParamDestinationsName2 := GetDestinationsQueryParamDestinationsName2{}
	if err := utils.UnmarshalJSON(data, &getDestinationsQueryParamDestinationsName2, "", true, true); err == nil {
		u.GetDestinationsQueryParamDestinationsName2 = &getDestinationsQueryParamDestinationsName2
		u.Type = GetDestinationsQueryParamNameTypeGetDestinationsQueryParamDestinationsName2
		return nil
	}

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GetDestinationsQueryParamNameTypeStr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetDestinationsQueryParamName) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.GetDestinationsQueryParamDestinationsName2 != nil {
		return utils.MarshalJSON(u.GetDestinationsQueryParamDestinationsName2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetDestinationsQueryParamDestinationsOrderBy2 string

const (
	GetDestinationsQueryParamDestinationsOrderBy2CreatedAt GetDestinationsQueryParamDestinationsOrderBy2 = "created_at"
)

func (e GetDestinationsQueryParamDestinationsOrderBy2) ToPointer() *GetDestinationsQueryParamDestinationsOrderBy2 {
	return &e
}

func (e *GetDestinationsQueryParamDestinationsOrderBy2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "created_at":
		*e = GetDestinationsQueryParamDestinationsOrderBy2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDestinationsQueryParamDestinationsOrderBy2: %v", v)
	}
}

type GetDestinationsQueryParamDestinations1 string

const (
	GetDestinationsQueryParamDestinations1CreatedAt GetDestinationsQueryParamDestinations1 = "created_at"
)

func (e GetDestinationsQueryParamDestinations1) ToPointer() *GetDestinationsQueryParamDestinations1 {
	return &e
}

func (e *GetDestinationsQueryParamDestinations1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "created_at":
		*e = GetDestinationsQueryParamDestinations1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDestinationsQueryParamDestinations1: %v", v)
	}
}

type GetDestinationsQueryParamOrderByType string

const (
	GetDestinationsQueryParamOrderByTypeGetDestinationsQueryParamDestinations1               GetDestinationsQueryParamOrderByType = "getDestinations_queryParam_Destinations_1"
	GetDestinationsQueryParamOrderByTypeArrayOfgetDestinationsQueryParamDestinationsOrderBy2 GetDestinationsQueryParamOrderByType = "arrayOfgetDestinations_queryParam_Destinations_order_by_2"
)

// GetDestinationsQueryParamOrderBy - Sort key(s)
type GetDestinationsQueryParamOrderBy struct {
	GetDestinationsQueryParamDestinations1               *GetDestinationsQueryParamDestinations1
	ArrayOfgetDestinationsQueryParamDestinationsOrderBy2 []GetDestinationsQueryParamDestinationsOrderBy2

	Type GetDestinationsQueryParamOrderByType
}

func CreateGetDestinationsQueryParamOrderByGetDestinationsQueryParamDestinations1(getDestinationsQueryParamDestinations1 GetDestinationsQueryParamDestinations1) GetDestinationsQueryParamOrderBy {
	typ := GetDestinationsQueryParamOrderByTypeGetDestinationsQueryParamDestinations1

	return GetDestinationsQueryParamOrderBy{
		GetDestinationsQueryParamDestinations1: &getDestinationsQueryParamDestinations1,
		Type:                                   typ,
	}
}

func CreateGetDestinationsQueryParamOrderByArrayOfgetDestinationsQueryParamDestinationsOrderBy2(arrayOfgetDestinationsQueryParamDestinationsOrderBy2 []GetDestinationsQueryParamDestinationsOrderBy2) GetDestinationsQueryParamOrderBy {
	typ := GetDestinationsQueryParamOrderByTypeArrayOfgetDestinationsQueryParamDestinationsOrderBy2

	return GetDestinationsQueryParamOrderBy{
		ArrayOfgetDestinationsQueryParamDestinationsOrderBy2: arrayOfgetDestinationsQueryParamDestinationsOrderBy2,
		Type: typ,
	}
}

func (u *GetDestinationsQueryParamOrderBy) UnmarshalJSON(data []byte) error {

	getDestinationsQueryParamDestinations1 := GetDestinationsQueryParamDestinations1("")
	if err := utils.UnmarshalJSON(data, &getDestinationsQueryParamDestinations1, "", true, true); err == nil {
		u.GetDestinationsQueryParamDestinations1 = &getDestinationsQueryParamDestinations1
		u.Type = GetDestinationsQueryParamOrderByTypeGetDestinationsQueryParamDestinations1
		return nil
	}

	arrayOfgetDestinationsQueryParamDestinationsOrderBy2 := []GetDestinationsQueryParamDestinationsOrderBy2{}
	if err := utils.UnmarshalJSON(data, &arrayOfgetDestinationsQueryParamDestinationsOrderBy2, "", true, true); err == nil {
		u.ArrayOfgetDestinationsQueryParamDestinationsOrderBy2 = arrayOfgetDestinationsQueryParamDestinationsOrderBy2
		u.Type = GetDestinationsQueryParamOrderByTypeArrayOfgetDestinationsQueryParamDestinationsOrderBy2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetDestinationsQueryParamOrderBy) MarshalJSON() ([]byte, error) {
	if u.GetDestinationsQueryParamDestinations1 != nil {
		return utils.MarshalJSON(u.GetDestinationsQueryParamDestinations1, "", true)
	}

	if u.ArrayOfgetDestinationsQueryParamDestinationsOrderBy2 != nil {
		return utils.MarshalJSON(u.ArrayOfgetDestinationsQueryParamDestinationsOrderBy2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type URLType string

const (
	URLTypeStr        URLType = "str"
	URLTypeArrayOfstr URLType = "arrayOfstr"
)

// URL - HTTP endpoint of the destination
type URL struct {
	Str        *string
	ArrayOfstr []string

	Type URLType
}

func CreateURLStr(str string) URL {
	typ := URLTypeStr

	return URL{
		Str:  &str,
		Type: typ,
	}
}

func CreateURLArrayOfstr(arrayOfstr []string) URL {
	typ := URLTypeArrayOfstr

	return URL{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *URL) UnmarshalJSON(data []byte) error {

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = URLTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = URLTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u URL) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetDestinationsRequest struct {
	Archived *bool `queryParam:"style=form,explode=true,name=archived"`
	// Date the destination was archived
	ArchivedAt *QueryParamArchivedAt `queryParam:"style=form,explode=true,name=archived_at"`
	// Path for the CLI destination
	CliPath *CliPath `queryParam:"style=form,explode=true,name=cli_path"`
	// Sort direction
	Dir *GetDestinationsQueryParamDir `queryParam:"style=form,explode=true,name=dir"`
	// Filter by destination IDs
	ID    *GetDestinationsQueryParamID `queryParam:"style=form,explode=true,name=id"`
	Limit *int64                       `queryParam:"style=form,explode=true,name=limit"`
	// The destination name
	Name *GetDestinationsQueryParamName `queryParam:"style=form,explode=true,name=name"`
	Next *string                        `queryParam:"style=form,explode=true,name=next"`
	// Sort key(s)
	OrderBy *GetDestinationsQueryParamOrderBy `queryParam:"style=form,explode=true,name=order_by"`
	Prev    *string                           `queryParam:"style=form,explode=true,name=prev"`
	// HTTP endpoint of the destination
	URL *URL `queryParam:"style=form,explode=true,name=url"`
}

func (o *GetDestinationsRequest) GetArchived() *bool {
	if o == nil {
		return nil
	}
	return o.Archived
}

func (o *GetDestinationsRequest) GetArchivedAt() *QueryParamArchivedAt {
	if o == nil {
		return nil
	}
	return o.ArchivedAt
}

func (o *GetDestinationsRequest) GetCliPath() *CliPath {
	if o == nil {
		return nil
	}
	return o.CliPath
}

func (o *GetDestinationsRequest) GetDir() *GetDestinationsQueryParamDir {
	if o == nil {
		return nil
	}
	return o.Dir
}

func (o *GetDestinationsRequest) GetID() *GetDestinationsQueryParamID {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *GetDestinationsRequest) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *GetDestinationsRequest) GetName() *GetDestinationsQueryParamName {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *GetDestinationsRequest) GetNext() *string {
	if o == nil {
		return nil
	}
	return o.Next
}

func (o *GetDestinationsRequest) GetOrderBy() *GetDestinationsQueryParamOrderBy {
	if o == nil {
		return nil
	}
	return o.OrderBy
}

func (o *GetDestinationsRequest) GetPrev() *string {
	if o == nil {
		return nil
	}
	return o.Prev
}

func (o *GetDestinationsRequest) GetURL() *URL {
	if o == nil {
		return nil
	}
	return o.URL
}

type GetDestinationsResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// List of destinations
	DestinationPaginatedResult *components.DestinationPaginatedResult
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *GetDestinationsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetDestinationsResponse) GetDestinationPaginatedResult() *components.DestinationPaginatedResult {
	if o == nil {
		return nil
	}
	return o.DestinationPaginatedResult
}

func (o *GetDestinationsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetDestinationsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
