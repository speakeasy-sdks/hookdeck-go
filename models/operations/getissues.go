// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/speakeasy-sdks/hookdeck-go/v2/internal/utils"
	"github.com/speakeasy-sdks/hookdeck-go/v2/models/components"
	"net/http"
	"time"
)

type GetIssuesQueryParamErrorCodeType string

const (
	GetIssuesQueryParamErrorCodeTypeAttemptErrorCode        GetIssuesQueryParamErrorCodeType = "AttemptErrorCode"
	GetIssuesQueryParamErrorCodeTypeArrayOfAttemptErrorCode GetIssuesQueryParamErrorCodeType = "arrayOfAttemptErrorCode"
)

type GetIssuesQueryParamErrorCode struct {
	AttemptErrorCode        *components.AttemptErrorCode
	ArrayOfAttemptErrorCode []components.AttemptErrorCode

	Type GetIssuesQueryParamErrorCodeType
}

func CreateGetIssuesQueryParamErrorCodeAttemptErrorCode(attemptErrorCode components.AttemptErrorCode) GetIssuesQueryParamErrorCode {
	typ := GetIssuesQueryParamErrorCodeTypeAttemptErrorCode

	return GetIssuesQueryParamErrorCode{
		AttemptErrorCode: &attemptErrorCode,
		Type:             typ,
	}
}

func CreateGetIssuesQueryParamErrorCodeArrayOfAttemptErrorCode(arrayOfAttemptErrorCode []components.AttemptErrorCode) GetIssuesQueryParamErrorCode {
	typ := GetIssuesQueryParamErrorCodeTypeArrayOfAttemptErrorCode

	return GetIssuesQueryParamErrorCode{
		ArrayOfAttemptErrorCode: arrayOfAttemptErrorCode,
		Type:                    typ,
	}
}

func (u *GetIssuesQueryParamErrorCode) UnmarshalJSON(data []byte) error {

	attemptErrorCode := components.AttemptErrorCode("")
	if err := utils.UnmarshalJSON(data, &attemptErrorCode, "", true, true); err == nil {
		u.AttemptErrorCode = &attemptErrorCode
		u.Type = GetIssuesQueryParamErrorCodeTypeAttemptErrorCode
		return nil
	}

	arrayOfAttemptErrorCode := []components.AttemptErrorCode{}
	if err := utils.UnmarshalJSON(data, &arrayOfAttemptErrorCode, "", true, true); err == nil {
		u.ArrayOfAttemptErrorCode = arrayOfAttemptErrorCode
		u.Type = GetIssuesQueryParamErrorCodeTypeArrayOfAttemptErrorCode
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetIssuesQueryParamErrorCode) MarshalJSON() ([]byte, error) {
	if u.AttemptErrorCode != nil {
		return utils.MarshalJSON(u.AttemptErrorCode, "", true)
	}

	if u.ArrayOfAttemptErrorCode != nil {
		return utils.MarshalJSON(u.ArrayOfAttemptErrorCode, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetIssuesQueryParamResponseStatusType string

const (
	GetIssuesQueryParamResponseStatusTypeFloat32        GetIssuesQueryParamResponseStatusType = "float32"
	GetIssuesQueryParamResponseStatusTypeArrayOffloat32 GetIssuesQueryParamResponseStatusType = "arrayOffloat32"
)

type GetIssuesQueryParamResponseStatus struct {
	Float32        *float32
	ArrayOffloat32 []float32

	Type GetIssuesQueryParamResponseStatusType
}

func CreateGetIssuesQueryParamResponseStatusFloat32(float32T float32) GetIssuesQueryParamResponseStatus {
	typ := GetIssuesQueryParamResponseStatusTypeFloat32

	return GetIssuesQueryParamResponseStatus{
		Float32: &float32T,
		Type:    typ,
	}
}

func CreateGetIssuesQueryParamResponseStatusArrayOffloat32(arrayOffloat32 []float32) GetIssuesQueryParamResponseStatus {
	typ := GetIssuesQueryParamResponseStatusTypeArrayOffloat32

	return GetIssuesQueryParamResponseStatus{
		ArrayOffloat32: arrayOffloat32,
		Type:           typ,
	}
}

func (u *GetIssuesQueryParamResponseStatus) UnmarshalJSON(data []byte) error {

	float32Var := float32(0)
	if err := utils.UnmarshalJSON(data, &float32Var, "", true, true); err == nil {
		u.Float32 = &float32Var
		u.Type = GetIssuesQueryParamResponseStatusTypeFloat32
		return nil
	}

	arrayOffloat32 := []float32{}
	if err := utils.UnmarshalJSON(data, &arrayOffloat32, "", true, true); err == nil {
		u.ArrayOffloat32 = arrayOffloat32
		u.Type = GetIssuesQueryParamResponseStatusTypeArrayOffloat32
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetIssuesQueryParamResponseStatus) MarshalJSON() ([]byte, error) {
	if u.Float32 != nil {
		return utils.MarshalJSON(u.Float32, "", true)
	}

	if u.ArrayOffloat32 != nil {
		return utils.MarshalJSON(u.ArrayOffloat32, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetIssuesQueryParamWebhookIDType string

const (
	GetIssuesQueryParamWebhookIDTypeStr        GetIssuesQueryParamWebhookIDType = "str"
	GetIssuesQueryParamWebhookIDTypeArrayOfstr GetIssuesQueryParamWebhookIDType = "arrayOfstr"
)

type GetIssuesQueryParamWebhookID struct {
	Str        *string
	ArrayOfstr []string

	Type GetIssuesQueryParamWebhookIDType
}

func CreateGetIssuesQueryParamWebhookIDStr(str string) GetIssuesQueryParamWebhookID {
	typ := GetIssuesQueryParamWebhookIDTypeStr

	return GetIssuesQueryParamWebhookID{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetIssuesQueryParamWebhookIDArrayOfstr(arrayOfstr []string) GetIssuesQueryParamWebhookID {
	typ := GetIssuesQueryParamWebhookIDTypeArrayOfstr

	return GetIssuesQueryParamWebhookID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *GetIssuesQueryParamWebhookID) UnmarshalJSON(data []byte) error {

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GetIssuesQueryParamWebhookIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = GetIssuesQueryParamWebhookIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetIssuesQueryParamWebhookID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// AggregationKeys - Filter by aggregation keys
type AggregationKeys struct {
	ErrorCode      *GetIssuesQueryParamErrorCode      `queryParam:"name=error_code"`
	ResponseStatus *GetIssuesQueryParamResponseStatus `queryParam:"name=response_status"`
	WebhookID      *GetIssuesQueryParamWebhookID      `queryParam:"name=webhook_id"`
}

func (o *AggregationKeys) GetErrorCode() *GetIssuesQueryParamErrorCode {
	if o == nil {
		return nil
	}
	return o.ErrorCode
}

func (o *AggregationKeys) GetResponseStatus() *GetIssuesQueryParamResponseStatus {
	if o == nil {
		return nil
	}
	return o.ResponseStatus
}

func (o *AggregationKeys) GetWebhookID() *GetIssuesQueryParamWebhookID {
	if o == nil {
		return nil
	}
	return o.WebhookID
}

type GetIssuesQueryParam2 struct {
	Any *bool      `queryParam:"name=any"`
	Gt  *time.Time `queryParam:"name=gt"`
	Gte *time.Time `queryParam:"name=gte"`
	Le  *time.Time `queryParam:"name=le"`
	Lte *time.Time `queryParam:"name=lte"`
}

func (g GetIssuesQueryParam2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetIssuesQueryParam2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetIssuesQueryParam2) GetAny() *bool {
	if o == nil {
		return nil
	}
	return o.Any
}

func (o *GetIssuesQueryParam2) GetGt() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *GetIssuesQueryParam2) GetGte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *GetIssuesQueryParam2) GetLe() *time.Time {
	if o == nil {
		return nil
	}
	return o.Le
}

func (o *GetIssuesQueryParam2) GetLte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Lte
}

type GetIssuesQueryParamCreatedAtType string

const (
	GetIssuesQueryParamCreatedAtTypeDateTime             GetIssuesQueryParamCreatedAtType = "date-time"
	GetIssuesQueryParamCreatedAtTypeGetIssuesQueryParam2 GetIssuesQueryParamCreatedAtType = "getIssues_queryParam_2"
)

// GetIssuesQueryParamCreatedAt - Filter by created dates
type GetIssuesQueryParamCreatedAt struct {
	DateTime             *time.Time
	GetIssuesQueryParam2 *GetIssuesQueryParam2

	Type GetIssuesQueryParamCreatedAtType
}

func CreateGetIssuesQueryParamCreatedAtDateTime(dateTime time.Time) GetIssuesQueryParamCreatedAt {
	typ := GetIssuesQueryParamCreatedAtTypeDateTime

	return GetIssuesQueryParamCreatedAt{
		DateTime: &dateTime,
		Type:     typ,
	}
}

func CreateGetIssuesQueryParamCreatedAtGetIssuesQueryParam2(getIssuesQueryParam2 GetIssuesQueryParam2) GetIssuesQueryParamCreatedAt {
	typ := GetIssuesQueryParamCreatedAtTypeGetIssuesQueryParam2

	return GetIssuesQueryParamCreatedAt{
		GetIssuesQueryParam2: &getIssuesQueryParam2,
		Type:                 typ,
	}
}

func (u *GetIssuesQueryParamCreatedAt) UnmarshalJSON(data []byte) error {

	getIssuesQueryParam2 := GetIssuesQueryParam2{}
	if err := utils.UnmarshalJSON(data, &getIssuesQueryParam2, "", true, true); err == nil {
		u.GetIssuesQueryParam2 = &getIssuesQueryParam2
		u.Type = GetIssuesQueryParamCreatedAtTypeGetIssuesQueryParam2
		return nil
	}

	dateTime := time.Time{}
	if err := utils.UnmarshalJSON(data, &dateTime, "", true, true); err == nil {
		u.DateTime = &dateTime
		u.Type = GetIssuesQueryParamCreatedAtTypeDateTime
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetIssuesQueryParamCreatedAt) MarshalJSON() ([]byte, error) {
	if u.DateTime != nil {
		return utils.MarshalJSON(u.DateTime, "", true)
	}

	if u.GetIssuesQueryParam2 != nil {
		return utils.MarshalJSON(u.GetIssuesQueryParam2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetIssuesQueryParamIssues2 string

const (
	GetIssuesQueryParamIssues2Asc  GetIssuesQueryParamIssues2 = "asc"
	GetIssuesQueryParamIssues2Desc GetIssuesQueryParamIssues2 = "desc"
)

func (e GetIssuesQueryParamIssues2) ToPointer() *GetIssuesQueryParamIssues2 {
	return &e
}

func (e *GetIssuesQueryParamIssues2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = GetIssuesQueryParamIssues2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetIssuesQueryParamIssues2: %v", v)
	}
}

type GetIssuesQueryParam1 string

const (
	GetIssuesQueryParam1Asc  GetIssuesQueryParam1 = "asc"
	GetIssuesQueryParam1Desc GetIssuesQueryParam1 = "desc"
)

func (e GetIssuesQueryParam1) ToPointer() *GetIssuesQueryParam1 {
	return &e
}

func (e *GetIssuesQueryParam1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = GetIssuesQueryParam1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetIssuesQueryParam1: %v", v)
	}
}

type GetIssuesQueryParamDirType string

const (
	GetIssuesQueryParamDirTypeGetIssuesQueryParam1              GetIssuesQueryParamDirType = "getIssues_queryParam_1"
	GetIssuesQueryParamDirTypeArrayOfgetIssuesQueryParamIssues2 GetIssuesQueryParamDirType = "arrayOfgetIssues_queryParam_Issues_2"
)

// GetIssuesQueryParamDir - Sort direction
type GetIssuesQueryParamDir struct {
	GetIssuesQueryParam1              *GetIssuesQueryParam1
	ArrayOfgetIssuesQueryParamIssues2 []GetIssuesQueryParamIssues2

	Type GetIssuesQueryParamDirType
}

func CreateGetIssuesQueryParamDirGetIssuesQueryParam1(getIssuesQueryParam1 GetIssuesQueryParam1) GetIssuesQueryParamDir {
	typ := GetIssuesQueryParamDirTypeGetIssuesQueryParam1

	return GetIssuesQueryParamDir{
		GetIssuesQueryParam1: &getIssuesQueryParam1,
		Type:                 typ,
	}
}

func CreateGetIssuesQueryParamDirArrayOfgetIssuesQueryParamIssues2(arrayOfgetIssuesQueryParamIssues2 []GetIssuesQueryParamIssues2) GetIssuesQueryParamDir {
	typ := GetIssuesQueryParamDirTypeArrayOfgetIssuesQueryParamIssues2

	return GetIssuesQueryParamDir{
		ArrayOfgetIssuesQueryParamIssues2: arrayOfgetIssuesQueryParamIssues2,
		Type:                              typ,
	}
}

func (u *GetIssuesQueryParamDir) UnmarshalJSON(data []byte) error {

	getIssuesQueryParam1 := GetIssuesQueryParam1("")
	if err := utils.UnmarshalJSON(data, &getIssuesQueryParam1, "", true, true); err == nil {
		u.GetIssuesQueryParam1 = &getIssuesQueryParam1
		u.Type = GetIssuesQueryParamDirTypeGetIssuesQueryParam1
		return nil
	}

	arrayOfgetIssuesQueryParamIssues2 := []GetIssuesQueryParamIssues2{}
	if err := utils.UnmarshalJSON(data, &arrayOfgetIssuesQueryParamIssues2, "", true, true); err == nil {
		u.ArrayOfgetIssuesQueryParamIssues2 = arrayOfgetIssuesQueryParamIssues2
		u.Type = GetIssuesQueryParamDirTypeArrayOfgetIssuesQueryParamIssues2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetIssuesQueryParamDir) MarshalJSON() ([]byte, error) {
	if u.GetIssuesQueryParam1 != nil {
		return utils.MarshalJSON(u.GetIssuesQueryParam1, "", true)
	}

	if u.ArrayOfgetIssuesQueryParamIssues2 != nil {
		return utils.MarshalJSON(u.ArrayOfgetIssuesQueryParamIssues2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetIssuesQueryParamIssuesDismissedAt2 struct {
	Any *bool      `queryParam:"name=any"`
	Gt  *time.Time `queryParam:"name=gt"`
	Gte *time.Time `queryParam:"name=gte"`
	Le  *time.Time `queryParam:"name=le"`
	Lte *time.Time `queryParam:"name=lte"`
}

func (g GetIssuesQueryParamIssuesDismissedAt2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetIssuesQueryParamIssuesDismissedAt2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetIssuesQueryParamIssuesDismissedAt2) GetAny() *bool {
	if o == nil {
		return nil
	}
	return o.Any
}

func (o *GetIssuesQueryParamIssuesDismissedAt2) GetGt() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *GetIssuesQueryParamIssuesDismissedAt2) GetGte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *GetIssuesQueryParamIssuesDismissedAt2) GetLe() *time.Time {
	if o == nil {
		return nil
	}
	return o.Le
}

func (o *GetIssuesQueryParamIssuesDismissedAt2) GetLte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Lte
}

type DismissedAtType string

const (
	DismissedAtTypeDateTime                              DismissedAtType = "date-time"
	DismissedAtTypeGetIssuesQueryParamIssuesDismissedAt2 DismissedAtType = "getIssues_queryParam_Issues_dismissed_at_2"
)

// DismissedAt - Filter by dismissed dates
type DismissedAt struct {
	DateTime                              *time.Time
	GetIssuesQueryParamIssuesDismissedAt2 *GetIssuesQueryParamIssuesDismissedAt2

	Type DismissedAtType
}

func CreateDismissedAtDateTime(dateTime time.Time) DismissedAt {
	typ := DismissedAtTypeDateTime

	return DismissedAt{
		DateTime: &dateTime,
		Type:     typ,
	}
}

func CreateDismissedAtGetIssuesQueryParamIssuesDismissedAt2(getIssuesQueryParamIssuesDismissedAt2 GetIssuesQueryParamIssuesDismissedAt2) DismissedAt {
	typ := DismissedAtTypeGetIssuesQueryParamIssuesDismissedAt2

	return DismissedAt{
		GetIssuesQueryParamIssuesDismissedAt2: &getIssuesQueryParamIssuesDismissedAt2,
		Type:                                  typ,
	}
}

func (u *DismissedAt) UnmarshalJSON(data []byte) error {

	getIssuesQueryParamIssuesDismissedAt2 := GetIssuesQueryParamIssuesDismissedAt2{}
	if err := utils.UnmarshalJSON(data, &getIssuesQueryParamIssuesDismissedAt2, "", true, true); err == nil {
		u.GetIssuesQueryParamIssuesDismissedAt2 = &getIssuesQueryParamIssuesDismissedAt2
		u.Type = DismissedAtTypeGetIssuesQueryParamIssuesDismissedAt2
		return nil
	}

	dateTime := time.Time{}
	if err := utils.UnmarshalJSON(data, &dateTime, "", true, true); err == nil {
		u.DateTime = &dateTime
		u.Type = DismissedAtTypeDateTime
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u DismissedAt) MarshalJSON() ([]byte, error) {
	if u.DateTime != nil {
		return utils.MarshalJSON(u.DateTime, "", true)
	}

	if u.GetIssuesQueryParamIssuesDismissedAt2 != nil {
		return utils.MarshalJSON(u.GetIssuesQueryParamIssuesDismissedAt2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetIssuesQueryParamIssuesFirstSeenAt2 struct {
	Any *bool      `queryParam:"name=any"`
	Gt  *time.Time `queryParam:"name=gt"`
	Gte *time.Time `queryParam:"name=gte"`
	Le  *time.Time `queryParam:"name=le"`
	Lte *time.Time `queryParam:"name=lte"`
}

func (g GetIssuesQueryParamIssuesFirstSeenAt2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetIssuesQueryParamIssuesFirstSeenAt2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetIssuesQueryParamIssuesFirstSeenAt2) GetAny() *bool {
	if o == nil {
		return nil
	}
	return o.Any
}

func (o *GetIssuesQueryParamIssuesFirstSeenAt2) GetGt() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *GetIssuesQueryParamIssuesFirstSeenAt2) GetGte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *GetIssuesQueryParamIssuesFirstSeenAt2) GetLe() *time.Time {
	if o == nil {
		return nil
	}
	return o.Le
}

func (o *GetIssuesQueryParamIssuesFirstSeenAt2) GetLte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Lte
}

type FirstSeenAtType string

const (
	FirstSeenAtTypeDateTime                              FirstSeenAtType = "date-time"
	FirstSeenAtTypeGetIssuesQueryParamIssuesFirstSeenAt2 FirstSeenAtType = "getIssues_queryParam_Issues_first_seen_at_2"
)

// FirstSeenAt - Filter by first seen dates
type FirstSeenAt struct {
	DateTime                              *time.Time
	GetIssuesQueryParamIssuesFirstSeenAt2 *GetIssuesQueryParamIssuesFirstSeenAt2

	Type FirstSeenAtType
}

func CreateFirstSeenAtDateTime(dateTime time.Time) FirstSeenAt {
	typ := FirstSeenAtTypeDateTime

	return FirstSeenAt{
		DateTime: &dateTime,
		Type:     typ,
	}
}

func CreateFirstSeenAtGetIssuesQueryParamIssuesFirstSeenAt2(getIssuesQueryParamIssuesFirstSeenAt2 GetIssuesQueryParamIssuesFirstSeenAt2) FirstSeenAt {
	typ := FirstSeenAtTypeGetIssuesQueryParamIssuesFirstSeenAt2

	return FirstSeenAt{
		GetIssuesQueryParamIssuesFirstSeenAt2: &getIssuesQueryParamIssuesFirstSeenAt2,
		Type:                                  typ,
	}
}

func (u *FirstSeenAt) UnmarshalJSON(data []byte) error {

	getIssuesQueryParamIssuesFirstSeenAt2 := GetIssuesQueryParamIssuesFirstSeenAt2{}
	if err := utils.UnmarshalJSON(data, &getIssuesQueryParamIssuesFirstSeenAt2, "", true, true); err == nil {
		u.GetIssuesQueryParamIssuesFirstSeenAt2 = &getIssuesQueryParamIssuesFirstSeenAt2
		u.Type = FirstSeenAtTypeGetIssuesQueryParamIssuesFirstSeenAt2
		return nil
	}

	dateTime := time.Time{}
	if err := utils.UnmarshalJSON(data, &dateTime, "", true, true); err == nil {
		u.DateTime = &dateTime
		u.Type = FirstSeenAtTypeDateTime
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u FirstSeenAt) MarshalJSON() ([]byte, error) {
	if u.DateTime != nil {
		return utils.MarshalJSON(u.DateTime, "", true)
	}

	if u.GetIssuesQueryParamIssuesFirstSeenAt2 != nil {
		return utils.MarshalJSON(u.GetIssuesQueryParamIssuesFirstSeenAt2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetIssuesQueryParamIDType string

const (
	GetIssuesQueryParamIDTypeStr        GetIssuesQueryParamIDType = "str"
	GetIssuesQueryParamIDTypeArrayOfstr GetIssuesQueryParamIDType = "arrayOfstr"
)

// GetIssuesQueryParamID - Filter by Issue IDs
type GetIssuesQueryParamID struct {
	Str        *string
	ArrayOfstr []string

	Type GetIssuesQueryParamIDType
}

func CreateGetIssuesQueryParamIDStr(str string) GetIssuesQueryParamID {
	typ := GetIssuesQueryParamIDTypeStr

	return GetIssuesQueryParamID{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetIssuesQueryParamIDArrayOfstr(arrayOfstr []string) GetIssuesQueryParamID {
	typ := GetIssuesQueryParamIDTypeArrayOfstr

	return GetIssuesQueryParamID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *GetIssuesQueryParamID) UnmarshalJSON(data []byte) error {

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GetIssuesQueryParamIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = GetIssuesQueryParamIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetIssuesQueryParamID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type IssueTriggerIDType string

const (
	IssueTriggerIDTypeStr        IssueTriggerIDType = "str"
	IssueTriggerIDTypeArrayOfstr IssueTriggerIDType = "arrayOfstr"
)

// IssueTriggerID - Filter by Issue trigger IDs
type IssueTriggerID struct {
	Str        *string
	ArrayOfstr []string

	Type IssueTriggerIDType
}

func CreateIssueTriggerIDStr(str string) IssueTriggerID {
	typ := IssueTriggerIDTypeStr

	return IssueTriggerID{
		Str:  &str,
		Type: typ,
	}
}

func CreateIssueTriggerIDArrayOfstr(arrayOfstr []string) IssueTriggerID {
	typ := IssueTriggerIDTypeArrayOfstr

	return IssueTriggerID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *IssueTriggerID) UnmarshalJSON(data []byte) error {

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = IssueTriggerIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = IssueTriggerIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u IssueTriggerID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetIssuesQueryParamIssuesLastSeenAt2 struct {
	Any *bool      `queryParam:"name=any"`
	Gt  *time.Time `queryParam:"name=gt"`
	Gte *time.Time `queryParam:"name=gte"`
	Le  *time.Time `queryParam:"name=le"`
	Lte *time.Time `queryParam:"name=lte"`
}

func (g GetIssuesQueryParamIssuesLastSeenAt2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetIssuesQueryParamIssuesLastSeenAt2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetIssuesQueryParamIssuesLastSeenAt2) GetAny() *bool {
	if o == nil {
		return nil
	}
	return o.Any
}

func (o *GetIssuesQueryParamIssuesLastSeenAt2) GetGt() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *GetIssuesQueryParamIssuesLastSeenAt2) GetGte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *GetIssuesQueryParamIssuesLastSeenAt2) GetLe() *time.Time {
	if o == nil {
		return nil
	}
	return o.Le
}

func (o *GetIssuesQueryParamIssuesLastSeenAt2) GetLte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Lte
}

type LastSeenAtType string

const (
	LastSeenAtTypeDateTime                             LastSeenAtType = "date-time"
	LastSeenAtTypeGetIssuesQueryParamIssuesLastSeenAt2 LastSeenAtType = "getIssues_queryParam_Issues_last_seen_at_2"
)

// LastSeenAt - Filter by last seen dates
type LastSeenAt struct {
	DateTime                             *time.Time
	GetIssuesQueryParamIssuesLastSeenAt2 *GetIssuesQueryParamIssuesLastSeenAt2

	Type LastSeenAtType
}

func CreateLastSeenAtDateTime(dateTime time.Time) LastSeenAt {
	typ := LastSeenAtTypeDateTime

	return LastSeenAt{
		DateTime: &dateTime,
		Type:     typ,
	}
}

func CreateLastSeenAtGetIssuesQueryParamIssuesLastSeenAt2(getIssuesQueryParamIssuesLastSeenAt2 GetIssuesQueryParamIssuesLastSeenAt2) LastSeenAt {
	typ := LastSeenAtTypeGetIssuesQueryParamIssuesLastSeenAt2

	return LastSeenAt{
		GetIssuesQueryParamIssuesLastSeenAt2: &getIssuesQueryParamIssuesLastSeenAt2,
		Type:                                 typ,
	}
}

func (u *LastSeenAt) UnmarshalJSON(data []byte) error {

	getIssuesQueryParamIssuesLastSeenAt2 := GetIssuesQueryParamIssuesLastSeenAt2{}
	if err := utils.UnmarshalJSON(data, &getIssuesQueryParamIssuesLastSeenAt2, "", true, true); err == nil {
		u.GetIssuesQueryParamIssuesLastSeenAt2 = &getIssuesQueryParamIssuesLastSeenAt2
		u.Type = LastSeenAtTypeGetIssuesQueryParamIssuesLastSeenAt2
		return nil
	}

	dateTime := time.Time{}
	if err := utils.UnmarshalJSON(data, &dateTime, "", true, true); err == nil {
		u.DateTime = &dateTime
		u.Type = LastSeenAtTypeDateTime
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u LastSeenAt) MarshalJSON() ([]byte, error) {
	if u.DateTime != nil {
		return utils.MarshalJSON(u.DateTime, "", true)
	}

	if u.GetIssuesQueryParamIssuesLastSeenAt2 != nil {
		return utils.MarshalJSON(u.GetIssuesQueryParamIssuesLastSeenAt2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type MergedWithType string

const (
	MergedWithTypeStr        MergedWithType = "str"
	MergedWithTypeArrayOfstr MergedWithType = "arrayOfstr"
)

// MergedWith - Filter by Merged Issue IDs
type MergedWith struct {
	Str        *string
	ArrayOfstr []string

	Type MergedWithType
}

func CreateMergedWithStr(str string) MergedWith {
	typ := MergedWithTypeStr

	return MergedWith{
		Str:  &str,
		Type: typ,
	}
}

func CreateMergedWithArrayOfstr(arrayOfstr []string) MergedWith {
	typ := MergedWithTypeArrayOfstr

	return MergedWith{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *MergedWith) UnmarshalJSON(data []byte) error {

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = MergedWithTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = MergedWithTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u MergedWith) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetIssuesQueryParamIssuesOrderBy2 string

const (
	GetIssuesQueryParamIssuesOrderBy2CreatedAt   GetIssuesQueryParamIssuesOrderBy2 = "created_at"
	GetIssuesQueryParamIssuesOrderBy2FirstSeenAt GetIssuesQueryParamIssuesOrderBy2 = "first_seen_at"
	GetIssuesQueryParamIssuesOrderBy2LastSeenAt  GetIssuesQueryParamIssuesOrderBy2 = "last_seen_at"
	GetIssuesQueryParamIssuesOrderBy2OpenedAt    GetIssuesQueryParamIssuesOrderBy2 = "opened_at"
	GetIssuesQueryParamIssuesOrderBy2Status      GetIssuesQueryParamIssuesOrderBy2 = "status"
)

func (e GetIssuesQueryParamIssuesOrderBy2) ToPointer() *GetIssuesQueryParamIssuesOrderBy2 {
	return &e
}

func (e *GetIssuesQueryParamIssuesOrderBy2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "created_at":
		fallthrough
	case "first_seen_at":
		fallthrough
	case "last_seen_at":
		fallthrough
	case "opened_at":
		fallthrough
	case "status":
		*e = GetIssuesQueryParamIssuesOrderBy2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetIssuesQueryParamIssuesOrderBy2: %v", v)
	}
}

type GetIssuesQueryParamIssues1 string

const (
	GetIssuesQueryParamIssues1CreatedAt   GetIssuesQueryParamIssues1 = "created_at"
	GetIssuesQueryParamIssues1FirstSeenAt GetIssuesQueryParamIssues1 = "first_seen_at"
	GetIssuesQueryParamIssues1LastSeenAt  GetIssuesQueryParamIssues1 = "last_seen_at"
	GetIssuesQueryParamIssues1OpenedAt    GetIssuesQueryParamIssues1 = "opened_at"
	GetIssuesQueryParamIssues1Status      GetIssuesQueryParamIssues1 = "status"
)

func (e GetIssuesQueryParamIssues1) ToPointer() *GetIssuesQueryParamIssues1 {
	return &e
}

func (e *GetIssuesQueryParamIssues1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "created_at":
		fallthrough
	case "first_seen_at":
		fallthrough
	case "last_seen_at":
		fallthrough
	case "opened_at":
		fallthrough
	case "status":
		*e = GetIssuesQueryParamIssues1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetIssuesQueryParamIssues1: %v", v)
	}
}

type GetIssuesQueryParamOrderByType string

const (
	GetIssuesQueryParamOrderByTypeGetIssuesQueryParamIssues1               GetIssuesQueryParamOrderByType = "getIssues_queryParam_Issues_1"
	GetIssuesQueryParamOrderByTypeArrayOfgetIssuesQueryParamIssuesOrderBy2 GetIssuesQueryParamOrderByType = "arrayOfgetIssues_queryParam_Issues_order_by_2"
)

// GetIssuesQueryParamOrderBy - Sort key(s)
type GetIssuesQueryParamOrderBy struct {
	GetIssuesQueryParamIssues1               *GetIssuesQueryParamIssues1
	ArrayOfgetIssuesQueryParamIssuesOrderBy2 []GetIssuesQueryParamIssuesOrderBy2

	Type GetIssuesQueryParamOrderByType
}

func CreateGetIssuesQueryParamOrderByGetIssuesQueryParamIssues1(getIssuesQueryParamIssues1 GetIssuesQueryParamIssues1) GetIssuesQueryParamOrderBy {
	typ := GetIssuesQueryParamOrderByTypeGetIssuesQueryParamIssues1

	return GetIssuesQueryParamOrderBy{
		GetIssuesQueryParamIssues1: &getIssuesQueryParamIssues1,
		Type:                       typ,
	}
}

func CreateGetIssuesQueryParamOrderByArrayOfgetIssuesQueryParamIssuesOrderBy2(arrayOfgetIssuesQueryParamIssuesOrderBy2 []GetIssuesQueryParamIssuesOrderBy2) GetIssuesQueryParamOrderBy {
	typ := GetIssuesQueryParamOrderByTypeArrayOfgetIssuesQueryParamIssuesOrderBy2

	return GetIssuesQueryParamOrderBy{
		ArrayOfgetIssuesQueryParamIssuesOrderBy2: arrayOfgetIssuesQueryParamIssuesOrderBy2,
		Type:                                     typ,
	}
}

func (u *GetIssuesQueryParamOrderBy) UnmarshalJSON(data []byte) error {

	getIssuesQueryParamIssues1 := GetIssuesQueryParamIssues1("")
	if err := utils.UnmarshalJSON(data, &getIssuesQueryParamIssues1, "", true, true); err == nil {
		u.GetIssuesQueryParamIssues1 = &getIssuesQueryParamIssues1
		u.Type = GetIssuesQueryParamOrderByTypeGetIssuesQueryParamIssues1
		return nil
	}

	arrayOfgetIssuesQueryParamIssuesOrderBy2 := []GetIssuesQueryParamIssuesOrderBy2{}
	if err := utils.UnmarshalJSON(data, &arrayOfgetIssuesQueryParamIssuesOrderBy2, "", true, true); err == nil {
		u.ArrayOfgetIssuesQueryParamIssuesOrderBy2 = arrayOfgetIssuesQueryParamIssuesOrderBy2
		u.Type = GetIssuesQueryParamOrderByTypeArrayOfgetIssuesQueryParamIssuesOrderBy2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetIssuesQueryParamOrderBy) MarshalJSON() ([]byte, error) {
	if u.GetIssuesQueryParamIssues1 != nil {
		return utils.MarshalJSON(u.GetIssuesQueryParamIssues1, "", true)
	}

	if u.ArrayOfgetIssuesQueryParamIssuesOrderBy2 != nil {
		return utils.MarshalJSON(u.ArrayOfgetIssuesQueryParamIssuesOrderBy2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// GetIssuesQueryParamIssuesStatus2 - Issue status
type GetIssuesQueryParamIssuesStatus2 string

const (
	GetIssuesQueryParamIssuesStatus2Opened       GetIssuesQueryParamIssuesStatus2 = "OPENED"
	GetIssuesQueryParamIssuesStatus2Ignored      GetIssuesQueryParamIssuesStatus2 = "IGNORED"
	GetIssuesQueryParamIssuesStatus2Acknowledged GetIssuesQueryParamIssuesStatus2 = "ACKNOWLEDGED"
	GetIssuesQueryParamIssuesStatus2Resolved     GetIssuesQueryParamIssuesStatus2 = "RESOLVED"
)

func (e GetIssuesQueryParamIssuesStatus2) ToPointer() *GetIssuesQueryParamIssuesStatus2 {
	return &e
}

func (e *GetIssuesQueryParamIssuesStatus2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OPENED":
		fallthrough
	case "IGNORED":
		fallthrough
	case "ACKNOWLEDGED":
		fallthrough
	case "RESOLVED":
		*e = GetIssuesQueryParamIssuesStatus2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetIssuesQueryParamIssuesStatus2: %v", v)
	}
}

// GetIssuesQueryParamIssuesStatus1 - Issue status
type GetIssuesQueryParamIssuesStatus1 string

const (
	GetIssuesQueryParamIssuesStatus1Opened       GetIssuesQueryParamIssuesStatus1 = "OPENED"
	GetIssuesQueryParamIssuesStatus1Ignored      GetIssuesQueryParamIssuesStatus1 = "IGNORED"
	GetIssuesQueryParamIssuesStatus1Acknowledged GetIssuesQueryParamIssuesStatus1 = "ACKNOWLEDGED"
	GetIssuesQueryParamIssuesStatus1Resolved     GetIssuesQueryParamIssuesStatus1 = "RESOLVED"
)

func (e GetIssuesQueryParamIssuesStatus1) ToPointer() *GetIssuesQueryParamIssuesStatus1 {
	return &e
}

func (e *GetIssuesQueryParamIssuesStatus1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OPENED":
		fallthrough
	case "IGNORED":
		fallthrough
	case "ACKNOWLEDGED":
		fallthrough
	case "RESOLVED":
		*e = GetIssuesQueryParamIssuesStatus1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetIssuesQueryParamIssuesStatus1: %v", v)
	}
}

type GetIssuesQueryParamStatusType string

const (
	GetIssuesQueryParamStatusTypeGetIssuesQueryParamIssuesStatus1        GetIssuesQueryParamStatusType = "getIssues_queryParam_Issues_status_1"
	GetIssuesQueryParamStatusTypeArrayOfgetIssuesQueryParamIssuesStatus2 GetIssuesQueryParamStatusType = "arrayOfgetIssues_queryParam_Issues_status_2"
)

// GetIssuesQueryParamStatus - Filter by Issue statuses
type GetIssuesQueryParamStatus struct {
	GetIssuesQueryParamIssuesStatus1        *GetIssuesQueryParamIssuesStatus1
	ArrayOfgetIssuesQueryParamIssuesStatus2 []GetIssuesQueryParamIssuesStatus2

	Type GetIssuesQueryParamStatusType
}

func CreateGetIssuesQueryParamStatusGetIssuesQueryParamIssuesStatus1(getIssuesQueryParamIssuesStatus1 GetIssuesQueryParamIssuesStatus1) GetIssuesQueryParamStatus {
	typ := GetIssuesQueryParamStatusTypeGetIssuesQueryParamIssuesStatus1

	return GetIssuesQueryParamStatus{
		GetIssuesQueryParamIssuesStatus1: &getIssuesQueryParamIssuesStatus1,
		Type:                             typ,
	}
}

func CreateGetIssuesQueryParamStatusArrayOfgetIssuesQueryParamIssuesStatus2(arrayOfgetIssuesQueryParamIssuesStatus2 []GetIssuesQueryParamIssuesStatus2) GetIssuesQueryParamStatus {
	typ := GetIssuesQueryParamStatusTypeArrayOfgetIssuesQueryParamIssuesStatus2

	return GetIssuesQueryParamStatus{
		ArrayOfgetIssuesQueryParamIssuesStatus2: arrayOfgetIssuesQueryParamIssuesStatus2,
		Type:                                    typ,
	}
}

func (u *GetIssuesQueryParamStatus) UnmarshalJSON(data []byte) error {

	getIssuesQueryParamIssuesStatus1 := GetIssuesQueryParamIssuesStatus1("")
	if err := utils.UnmarshalJSON(data, &getIssuesQueryParamIssuesStatus1, "", true, true); err == nil {
		u.GetIssuesQueryParamIssuesStatus1 = &getIssuesQueryParamIssuesStatus1
		u.Type = GetIssuesQueryParamStatusTypeGetIssuesQueryParamIssuesStatus1
		return nil
	}

	arrayOfgetIssuesQueryParamIssuesStatus2 := []GetIssuesQueryParamIssuesStatus2{}
	if err := utils.UnmarshalJSON(data, &arrayOfgetIssuesQueryParamIssuesStatus2, "", true, true); err == nil {
		u.ArrayOfgetIssuesQueryParamIssuesStatus2 = arrayOfgetIssuesQueryParamIssuesStatus2
		u.Type = GetIssuesQueryParamStatusTypeArrayOfgetIssuesQueryParamIssuesStatus2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetIssuesQueryParamStatus) MarshalJSON() ([]byte, error) {
	if u.GetIssuesQueryParamIssuesStatus1 != nil {
		return utils.MarshalJSON(u.GetIssuesQueryParamIssuesStatus1, "", true)
	}

	if u.ArrayOfgetIssuesQueryParamIssuesStatus2 != nil {
		return utils.MarshalJSON(u.ArrayOfgetIssuesQueryParamIssuesStatus2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// GetIssuesQueryParamIssuesType2 - Issue type
type GetIssuesQueryParamIssuesType2 string

const (
	GetIssuesQueryParamIssuesType2Delivery       GetIssuesQueryParamIssuesType2 = "delivery"
	GetIssuesQueryParamIssuesType2Transformation GetIssuesQueryParamIssuesType2 = "transformation"
	GetIssuesQueryParamIssuesType2Backpressure   GetIssuesQueryParamIssuesType2 = "backpressure"
)

func (e GetIssuesQueryParamIssuesType2) ToPointer() *GetIssuesQueryParamIssuesType2 {
	return &e
}

func (e *GetIssuesQueryParamIssuesType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "delivery":
		fallthrough
	case "transformation":
		fallthrough
	case "backpressure":
		*e = GetIssuesQueryParamIssuesType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetIssuesQueryParamIssuesType2: %v", v)
	}
}

// GetIssuesQueryParamIssuesType1 - Issue type
type GetIssuesQueryParamIssuesType1 string

const (
	GetIssuesQueryParamIssuesType1Delivery       GetIssuesQueryParamIssuesType1 = "delivery"
	GetIssuesQueryParamIssuesType1Transformation GetIssuesQueryParamIssuesType1 = "transformation"
	GetIssuesQueryParamIssuesType1Backpressure   GetIssuesQueryParamIssuesType1 = "backpressure"
)

func (e GetIssuesQueryParamIssuesType1) ToPointer() *GetIssuesQueryParamIssuesType1 {
	return &e
}

func (e *GetIssuesQueryParamIssuesType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "delivery":
		fallthrough
	case "transformation":
		fallthrough
	case "backpressure":
		*e = GetIssuesQueryParamIssuesType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetIssuesQueryParamIssuesType1: %v", v)
	}
}

type TypeType string

const (
	TypeTypeGetIssuesQueryParamIssuesType1        TypeType = "getIssues_queryParam_Issues_type_1"
	TypeTypeArrayOfgetIssuesQueryParamIssuesType2 TypeType = "arrayOfgetIssues_queryParam_Issues_type_2"
)

// Type - Filter by Issue types
type Type struct {
	GetIssuesQueryParamIssuesType1        *GetIssuesQueryParamIssuesType1
	ArrayOfgetIssuesQueryParamIssuesType2 []GetIssuesQueryParamIssuesType2

	Type TypeType
}

func CreateTypeGetIssuesQueryParamIssuesType1(getIssuesQueryParamIssuesType1 GetIssuesQueryParamIssuesType1) Type {
	typ := TypeTypeGetIssuesQueryParamIssuesType1

	return Type{
		GetIssuesQueryParamIssuesType1: &getIssuesQueryParamIssuesType1,
		Type:                           typ,
	}
}

func CreateTypeArrayOfgetIssuesQueryParamIssuesType2(arrayOfgetIssuesQueryParamIssuesType2 []GetIssuesQueryParamIssuesType2) Type {
	typ := TypeTypeArrayOfgetIssuesQueryParamIssuesType2

	return Type{
		ArrayOfgetIssuesQueryParamIssuesType2: arrayOfgetIssuesQueryParamIssuesType2,
		Type:                                  typ,
	}
}

func (u *Type) UnmarshalJSON(data []byte) error {

	getIssuesQueryParamIssuesType1 := GetIssuesQueryParamIssuesType1("")
	if err := utils.UnmarshalJSON(data, &getIssuesQueryParamIssuesType1, "", true, true); err == nil {
		u.GetIssuesQueryParamIssuesType1 = &getIssuesQueryParamIssuesType1
		u.Type = TypeTypeGetIssuesQueryParamIssuesType1
		return nil
	}

	arrayOfgetIssuesQueryParamIssuesType2 := []GetIssuesQueryParamIssuesType2{}
	if err := utils.UnmarshalJSON(data, &arrayOfgetIssuesQueryParamIssuesType2, "", true, true); err == nil {
		u.ArrayOfgetIssuesQueryParamIssuesType2 = arrayOfgetIssuesQueryParamIssuesType2
		u.Type = TypeTypeArrayOfgetIssuesQueryParamIssuesType2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u Type) MarshalJSON() ([]byte, error) {
	if u.GetIssuesQueryParamIssuesType1 != nil {
		return utils.MarshalJSON(u.GetIssuesQueryParamIssuesType1, "", true)
	}

	if u.ArrayOfgetIssuesQueryParamIssuesType2 != nil {
		return utils.MarshalJSON(u.ArrayOfgetIssuesQueryParamIssuesType2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetIssuesRequest struct {
	// Filter by aggregation keys
	AggregationKeys *AggregationKeys `queryParam:"style=form,explode=true,name=aggregation_keys"`
	// Filter by created dates
	CreatedAt *GetIssuesQueryParamCreatedAt `queryParam:"style=form,explode=true,name=created_at"`
	// Sort direction
	Dir *GetIssuesQueryParamDir `queryParam:"style=form,explode=true,name=dir"`
	// Filter by dismissed dates
	DismissedAt *DismissedAt `queryParam:"style=form,explode=true,name=dismissed_at"`
	// Filter by first seen dates
	FirstSeenAt *FirstSeenAt `queryParam:"style=form,explode=true,name=first_seen_at"`
	// Filter by Issue IDs
	ID *GetIssuesQueryParamID `queryParam:"style=form,explode=true,name=id"`
	// Filter by Issue trigger IDs
	IssueTriggerID *IssueTriggerID `queryParam:"style=form,explode=true,name=issue_trigger_id"`
	// Filter by last seen dates
	LastSeenAt *LastSeenAt `queryParam:"style=form,explode=true,name=last_seen_at"`
	Limit      *int64      `queryParam:"style=form,explode=true,name=limit"`
	// Filter by Merged Issue IDs
	MergedWith *MergedWith `queryParam:"style=form,explode=true,name=merged_with"`
	Next       *string     `queryParam:"style=form,explode=true,name=next"`
	// Sort key(s)
	OrderBy *GetIssuesQueryParamOrderBy `queryParam:"style=form,explode=true,name=order_by"`
	Prev    *string                     `queryParam:"style=form,explode=true,name=prev"`
	// Filter by Issue statuses
	Status *GetIssuesQueryParamStatus `queryParam:"style=form,explode=true,name=status"`
	// Filter by Issue types
	Type *Type `queryParam:"style=form,explode=true,name=type"`
}

func (o *GetIssuesRequest) GetAggregationKeys() *AggregationKeys {
	if o == nil {
		return nil
	}
	return o.AggregationKeys
}

func (o *GetIssuesRequest) GetCreatedAt() *GetIssuesQueryParamCreatedAt {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetIssuesRequest) GetDir() *GetIssuesQueryParamDir {
	if o == nil {
		return nil
	}
	return o.Dir
}

func (o *GetIssuesRequest) GetDismissedAt() *DismissedAt {
	if o == nil {
		return nil
	}
	return o.DismissedAt
}

func (o *GetIssuesRequest) GetFirstSeenAt() *FirstSeenAt {
	if o == nil {
		return nil
	}
	return o.FirstSeenAt
}

func (o *GetIssuesRequest) GetID() *GetIssuesQueryParamID {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *GetIssuesRequest) GetIssueTriggerID() *IssueTriggerID {
	if o == nil {
		return nil
	}
	return o.IssueTriggerID
}

func (o *GetIssuesRequest) GetLastSeenAt() *LastSeenAt {
	if o == nil {
		return nil
	}
	return o.LastSeenAt
}

func (o *GetIssuesRequest) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *GetIssuesRequest) GetMergedWith() *MergedWith {
	if o == nil {
		return nil
	}
	return o.MergedWith
}

func (o *GetIssuesRequest) GetNext() *string {
	if o == nil {
		return nil
	}
	return o.Next
}

func (o *GetIssuesRequest) GetOrderBy() *GetIssuesQueryParamOrderBy {
	if o == nil {
		return nil
	}
	return o.OrderBy
}

func (o *GetIssuesRequest) GetPrev() *string {
	if o == nil {
		return nil
	}
	return o.Prev
}

func (o *GetIssuesRequest) GetStatus() *GetIssuesQueryParamStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *GetIssuesRequest) GetType() *Type {
	if o == nil {
		return nil
	}
	return o.Type
}

type GetIssuesResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// List of issues
	IssueWithDataPaginatedResult *components.IssueWithDataPaginatedResult
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *GetIssuesResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetIssuesResponse) GetIssueWithDataPaginatedResult() *components.IssueWithDataPaginatedResult {
	if o == nil {
		return nil
	}
	return o.IssueWithDataPaginatedResult
}

func (o *GetIssuesResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetIssuesResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
