// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/speakeasy-sdks/hookdeck-go/internal/utils"
	"github.com/speakeasy-sdks/hookdeck-go/models/components"
	"net/http"
	"time"
)

type GetBookmarksQueryParam2 string

const (
	GetBookmarksQueryParam2Asc  GetBookmarksQueryParam2 = "asc"
	GetBookmarksQueryParam2Desc GetBookmarksQueryParam2 = "desc"
)

func (e GetBookmarksQueryParam2) ToPointer() *GetBookmarksQueryParam2 {
	return &e
}

func (e *GetBookmarksQueryParam2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = GetBookmarksQueryParam2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetBookmarksQueryParam2: %v", v)
	}
}

type GetBookmarksQueryParam1 string

const (
	GetBookmarksQueryParam1Asc  GetBookmarksQueryParam1 = "asc"
	GetBookmarksQueryParam1Desc GetBookmarksQueryParam1 = "desc"
)

func (e GetBookmarksQueryParam1) ToPointer() *GetBookmarksQueryParam1 {
	return &e
}

func (e *GetBookmarksQueryParam1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = GetBookmarksQueryParam1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetBookmarksQueryParam1: %v", v)
	}
}

type QueryParamDirType string

const (
	QueryParamDirTypeGetBookmarksQueryParam1        QueryParamDirType = "getBookmarks_queryParam_1"
	QueryParamDirTypeArrayOfgetBookmarksQueryParam2 QueryParamDirType = "arrayOfgetBookmarks_queryParam_2"
)

// QueryParamDir - Sort direction
type QueryParamDir struct {
	GetBookmarksQueryParam1        *GetBookmarksQueryParam1
	ArrayOfgetBookmarksQueryParam2 []GetBookmarksQueryParam2

	Type QueryParamDirType
}

func CreateQueryParamDirGetBookmarksQueryParam1(getBookmarksQueryParam1 GetBookmarksQueryParam1) QueryParamDir {
	typ := QueryParamDirTypeGetBookmarksQueryParam1

	return QueryParamDir{
		GetBookmarksQueryParam1: &getBookmarksQueryParam1,
		Type:                    typ,
	}
}

func CreateQueryParamDirArrayOfgetBookmarksQueryParam2(arrayOfgetBookmarksQueryParam2 []GetBookmarksQueryParam2) QueryParamDir {
	typ := QueryParamDirTypeArrayOfgetBookmarksQueryParam2

	return QueryParamDir{
		ArrayOfgetBookmarksQueryParam2: arrayOfgetBookmarksQueryParam2,
		Type:                           typ,
	}
}

func (u *QueryParamDir) UnmarshalJSON(data []byte) error {

	getBookmarksQueryParam1 := GetBookmarksQueryParam1("")
	if err := utils.UnmarshalJSON(data, &getBookmarksQueryParam1, "", true, true); err == nil {
		u.GetBookmarksQueryParam1 = &getBookmarksQueryParam1
		u.Type = QueryParamDirTypeGetBookmarksQueryParam1
		return nil
	}

	arrayOfgetBookmarksQueryParam2 := []GetBookmarksQueryParam2{}
	if err := utils.UnmarshalJSON(data, &arrayOfgetBookmarksQueryParam2, "", true, true); err == nil {
		u.ArrayOfgetBookmarksQueryParam2 = arrayOfgetBookmarksQueryParam2
		u.Type = QueryParamDirTypeArrayOfgetBookmarksQueryParam2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u QueryParamDir) MarshalJSON() ([]byte, error) {
	if u.GetBookmarksQueryParam1 != nil {
		return utils.MarshalJSON(u.GetBookmarksQueryParam1, "", true)
	}

	if u.ArrayOfgetBookmarksQueryParam2 != nil {
		return utils.MarshalJSON(u.ArrayOfgetBookmarksQueryParam2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type QueryParamEventDataIDType string

const (
	QueryParamEventDataIDTypeStr        QueryParamEventDataIDType = "str"
	QueryParamEventDataIDTypeArrayOfstr QueryParamEventDataIDType = "arrayOfstr"
)

// QueryParamEventDataID - Filter by associated event data ID
type QueryParamEventDataID struct {
	Str        *string
	ArrayOfstr []string

	Type QueryParamEventDataIDType
}

func CreateQueryParamEventDataIDStr(str string) QueryParamEventDataID {
	typ := QueryParamEventDataIDTypeStr

	return QueryParamEventDataID{
		Str:  &str,
		Type: typ,
	}
}

func CreateQueryParamEventDataIDArrayOfstr(arrayOfstr []string) QueryParamEventDataID {
	typ := QueryParamEventDataIDTypeArrayOfstr

	return QueryParamEventDataID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *QueryParamEventDataID) UnmarshalJSON(data []byte) error {

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = QueryParamEventDataIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = QueryParamEventDataIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u QueryParamEventDataID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type QueryParamIDType string

const (
	QueryParamIDTypeStr        QueryParamIDType = "str"
	QueryParamIDTypeArrayOfstr QueryParamIDType = "arrayOfstr"
)

// QueryParamID - Filter by bookmark IDs
type QueryParamID struct {
	Str        *string
	ArrayOfstr []string

	Type QueryParamIDType
}

func CreateQueryParamIDStr(str string) QueryParamID {
	typ := QueryParamIDTypeStr

	return QueryParamID{
		Str:  &str,
		Type: typ,
	}
}

func CreateQueryParamIDArrayOfstr(arrayOfstr []string) QueryParamID {
	typ := QueryParamIDTypeArrayOfstr

	return QueryParamID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *QueryParamID) UnmarshalJSON(data []byte) error {

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = QueryParamIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = QueryParamIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u QueryParamID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type LabelType string

const (
	LabelTypeStr        LabelType = "str"
	LabelTypeArrayOfstr LabelType = "arrayOfstr"
)

// Label - Filter by label
type Label struct {
	Str        *string
	ArrayOfstr []string

	Type LabelType
}

func CreateLabelStr(str string) Label {
	typ := LabelTypeStr

	return Label{
		Str:  &str,
		Type: typ,
	}
}

func CreateLabelArrayOfstr(arrayOfstr []string) Label {
	typ := LabelTypeArrayOfstr

	return Label{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *Label) UnmarshalJSON(data []byte) error {

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = LabelTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = LabelTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u Label) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetBookmarksQueryParamBookmarks2 struct {
	Any *bool `queryParam:"name=any"`
	// Last used date
	Gt *time.Time `queryParam:"name=gt"`
	// Last used date
	Gte *time.Time `queryParam:"name=gte"`
	// Last used date
	Le *time.Time `queryParam:"name=le"`
	// Last used date
	Lte *time.Time `queryParam:"name=lte"`
}

func (g GetBookmarksQueryParamBookmarks2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetBookmarksQueryParamBookmarks2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetBookmarksQueryParamBookmarks2) GetAny() *bool {
	if o == nil {
		return nil
	}
	return o.Any
}

func (o *GetBookmarksQueryParamBookmarks2) GetGt() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *GetBookmarksQueryParamBookmarks2) GetGte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *GetBookmarksQueryParamBookmarks2) GetLe() *time.Time {
	if o == nil {
		return nil
	}
	return o.Le
}

func (o *GetBookmarksQueryParamBookmarks2) GetLte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Lte
}

type LastUsedAtType string

const (
	LastUsedAtTypeDateTime                         LastUsedAtType = "date-time"
	LastUsedAtTypeGetBookmarksQueryParamBookmarks2 LastUsedAtType = "getBookmarks_queryParam_Bookmarks_2"
)

// LastUsedAt - Filter by last used date
type LastUsedAt struct {
	DateTime                         *time.Time
	GetBookmarksQueryParamBookmarks2 *GetBookmarksQueryParamBookmarks2

	Type LastUsedAtType
}

func CreateLastUsedAtDateTime(dateTime time.Time) LastUsedAt {
	typ := LastUsedAtTypeDateTime

	return LastUsedAt{
		DateTime: &dateTime,
		Type:     typ,
	}
}

func CreateLastUsedAtGetBookmarksQueryParamBookmarks2(getBookmarksQueryParamBookmarks2 GetBookmarksQueryParamBookmarks2) LastUsedAt {
	typ := LastUsedAtTypeGetBookmarksQueryParamBookmarks2

	return LastUsedAt{
		GetBookmarksQueryParamBookmarks2: &getBookmarksQueryParamBookmarks2,
		Type:                             typ,
	}
}

func (u *LastUsedAt) UnmarshalJSON(data []byte) error {

	getBookmarksQueryParamBookmarks2 := GetBookmarksQueryParamBookmarks2{}
	if err := utils.UnmarshalJSON(data, &getBookmarksQueryParamBookmarks2, "", true, true); err == nil {
		u.GetBookmarksQueryParamBookmarks2 = &getBookmarksQueryParamBookmarks2
		u.Type = LastUsedAtTypeGetBookmarksQueryParamBookmarks2
		return nil
	}

	dateTime := time.Time{}
	if err := utils.UnmarshalJSON(data, &dateTime, "", true, true); err == nil {
		u.DateTime = &dateTime
		u.Type = LastUsedAtTypeDateTime
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u LastUsedAt) MarshalJSON() ([]byte, error) {
	if u.DateTime != nil {
		return utils.MarshalJSON(u.DateTime, "", true)
	}

	if u.GetBookmarksQueryParamBookmarks2 != nil {
		return utils.MarshalJSON(u.GetBookmarksQueryParamBookmarks2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type NameType string

const (
	NameTypeStr        NameType = "str"
	NameTypeArrayOfstr NameType = "arrayOfstr"
)

// Name - Filter by bookmark name
type Name struct {
	Str        *string
	ArrayOfstr []string

	Type NameType
}

func CreateNameStr(str string) Name {
	typ := NameTypeStr

	return Name{
		Str:  &str,
		Type: typ,
	}
}

func CreateNameArrayOfstr(arrayOfstr []string) Name {
	typ := NameTypeArrayOfstr

	return Name{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *Name) UnmarshalJSON(data []byte) error {

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = NameTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = NameTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u Name) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetBookmarksQueryParamBookmarksOrderBy2 string

const (
	GetBookmarksQueryParamBookmarksOrderBy2CreatedAt GetBookmarksQueryParamBookmarksOrderBy2 = "created_at"
)

func (e GetBookmarksQueryParamBookmarksOrderBy2) ToPointer() *GetBookmarksQueryParamBookmarksOrderBy2 {
	return &e
}

func (e *GetBookmarksQueryParamBookmarksOrderBy2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "created_at":
		*e = GetBookmarksQueryParamBookmarksOrderBy2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetBookmarksQueryParamBookmarksOrderBy2: %v", v)
	}
}

type GetBookmarksQueryParamBookmarks1 string

const (
	GetBookmarksQueryParamBookmarks1CreatedAt GetBookmarksQueryParamBookmarks1 = "created_at"
)

func (e GetBookmarksQueryParamBookmarks1) ToPointer() *GetBookmarksQueryParamBookmarks1 {
	return &e
}

func (e *GetBookmarksQueryParamBookmarks1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "created_at":
		*e = GetBookmarksQueryParamBookmarks1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetBookmarksQueryParamBookmarks1: %v", v)
	}
}

type QueryParamOrderByType string

const (
	QueryParamOrderByTypeGetBookmarksQueryParamBookmarks1               QueryParamOrderByType = "getBookmarks_queryParam_Bookmarks_1"
	QueryParamOrderByTypeArrayOfgetBookmarksQueryParamBookmarksOrderBy2 QueryParamOrderByType = "arrayOfgetBookmarks_queryParam_Bookmarks_order_by_2"
)

// QueryParamOrderBy - Sort key(s)
type QueryParamOrderBy struct {
	GetBookmarksQueryParamBookmarks1               *GetBookmarksQueryParamBookmarks1
	ArrayOfgetBookmarksQueryParamBookmarksOrderBy2 []GetBookmarksQueryParamBookmarksOrderBy2

	Type QueryParamOrderByType
}

func CreateQueryParamOrderByGetBookmarksQueryParamBookmarks1(getBookmarksQueryParamBookmarks1 GetBookmarksQueryParamBookmarks1) QueryParamOrderBy {
	typ := QueryParamOrderByTypeGetBookmarksQueryParamBookmarks1

	return QueryParamOrderBy{
		GetBookmarksQueryParamBookmarks1: &getBookmarksQueryParamBookmarks1,
		Type:                             typ,
	}
}

func CreateQueryParamOrderByArrayOfgetBookmarksQueryParamBookmarksOrderBy2(arrayOfgetBookmarksQueryParamBookmarksOrderBy2 []GetBookmarksQueryParamBookmarksOrderBy2) QueryParamOrderBy {
	typ := QueryParamOrderByTypeArrayOfgetBookmarksQueryParamBookmarksOrderBy2

	return QueryParamOrderBy{
		ArrayOfgetBookmarksQueryParamBookmarksOrderBy2: arrayOfgetBookmarksQueryParamBookmarksOrderBy2,
		Type: typ,
	}
}

func (u *QueryParamOrderBy) UnmarshalJSON(data []byte) error {

	getBookmarksQueryParamBookmarks1 := GetBookmarksQueryParamBookmarks1("")
	if err := utils.UnmarshalJSON(data, &getBookmarksQueryParamBookmarks1, "", true, true); err == nil {
		u.GetBookmarksQueryParamBookmarks1 = &getBookmarksQueryParamBookmarks1
		u.Type = QueryParamOrderByTypeGetBookmarksQueryParamBookmarks1
		return nil
	}

	arrayOfgetBookmarksQueryParamBookmarksOrderBy2 := []GetBookmarksQueryParamBookmarksOrderBy2{}
	if err := utils.UnmarshalJSON(data, &arrayOfgetBookmarksQueryParamBookmarksOrderBy2, "", true, true); err == nil {
		u.ArrayOfgetBookmarksQueryParamBookmarksOrderBy2 = arrayOfgetBookmarksQueryParamBookmarksOrderBy2
		u.Type = QueryParamOrderByTypeArrayOfgetBookmarksQueryParamBookmarksOrderBy2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u QueryParamOrderBy) MarshalJSON() ([]byte, error) {
	if u.GetBookmarksQueryParamBookmarks1 != nil {
		return utils.MarshalJSON(u.GetBookmarksQueryParamBookmarks1, "", true)
	}

	if u.ArrayOfgetBookmarksQueryParamBookmarksOrderBy2 != nil {
		return utils.MarshalJSON(u.ArrayOfgetBookmarksQueryParamBookmarksOrderBy2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type QueryParamWebhookIDType string

const (
	QueryParamWebhookIDTypeStr        QueryParamWebhookIDType = "str"
	QueryParamWebhookIDTypeArrayOfstr QueryParamWebhookIDType = "arrayOfstr"
)

// QueryParamWebhookID - Filter by associated connection ID
type QueryParamWebhookID struct {
	Str        *string
	ArrayOfstr []string

	Type QueryParamWebhookIDType
}

func CreateQueryParamWebhookIDStr(str string) QueryParamWebhookID {
	typ := QueryParamWebhookIDTypeStr

	return QueryParamWebhookID{
		Str:  &str,
		Type: typ,
	}
}

func CreateQueryParamWebhookIDArrayOfstr(arrayOfstr []string) QueryParamWebhookID {
	typ := QueryParamWebhookIDTypeArrayOfstr

	return QueryParamWebhookID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *QueryParamWebhookID) UnmarshalJSON(data []byte) error {

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = QueryParamWebhookIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = QueryParamWebhookIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u QueryParamWebhookID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetBookmarksRequest struct {
	// Sort direction
	Dir *QueryParamDir `queryParam:"style=form,explode=true,name=dir"`
	// Filter by associated event data ID
	EventDataID *QueryParamEventDataID `queryParam:"style=form,explode=true,name=event_data_id"`
	// Filter by bookmark IDs
	ID *QueryParamID `queryParam:"style=form,explode=true,name=id"`
	// Filter by label
	Label *Label `queryParam:"style=form,explode=true,name=label"`
	// Filter by last used date
	LastUsedAt *LastUsedAt `queryParam:"style=form,explode=true,name=last_used_at"`
	Limit      *int64      `queryParam:"style=form,explode=true,name=limit"`
	// Filter by bookmark name
	Name *Name   `queryParam:"style=form,explode=true,name=name"`
	Next *string `queryParam:"style=form,explode=true,name=next"`
	// Sort key(s)
	OrderBy *QueryParamOrderBy `queryParam:"style=form,explode=true,name=order_by"`
	Prev    *string            `queryParam:"style=form,explode=true,name=prev"`
	// Filter by associated connection ID
	WebhookID *QueryParamWebhookID `queryParam:"style=form,explode=true,name=webhook_id"`
}

func (o *GetBookmarksRequest) GetDir() *QueryParamDir {
	if o == nil {
		return nil
	}
	return o.Dir
}

func (o *GetBookmarksRequest) GetEventDataID() *QueryParamEventDataID {
	if o == nil {
		return nil
	}
	return o.EventDataID
}

func (o *GetBookmarksRequest) GetID() *QueryParamID {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *GetBookmarksRequest) GetLabel() *Label {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *GetBookmarksRequest) GetLastUsedAt() *LastUsedAt {
	if o == nil {
		return nil
	}
	return o.LastUsedAt
}

func (o *GetBookmarksRequest) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *GetBookmarksRequest) GetName() *Name {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *GetBookmarksRequest) GetNext() *string {
	if o == nil {
		return nil
	}
	return o.Next
}

func (o *GetBookmarksRequest) GetOrderBy() *QueryParamOrderBy {
	if o == nil {
		return nil
	}
	return o.OrderBy
}

func (o *GetBookmarksRequest) GetPrev() *string {
	if o == nil {
		return nil
	}
	return o.Prev
}

func (o *GetBookmarksRequest) GetWebhookID() *QueryParamWebhookID {
	if o == nil {
		return nil
	}
	return o.WebhookID
}

type GetBookmarksResponse struct {
	// List of bookmarks
	BookmarkPaginatedResult *components.BookmarkPaginatedResult
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *GetBookmarksResponse) GetBookmarkPaginatedResult() *components.BookmarkPaginatedResult {
	if o == nil {
		return nil
	}
	return o.BookmarkPaginatedResult
}

func (o *GetBookmarksResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetBookmarksResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetBookmarksResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
