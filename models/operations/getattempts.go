// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/speakeasy-sdks/hookdeck-go/internal/utils"
	"github.com/speakeasy-sdks/hookdeck-go/models/components"
	"net/http"
)

type GetAttemptsQueryParam2 string

const (
	GetAttemptsQueryParam2Asc  GetAttemptsQueryParam2 = "asc"
	GetAttemptsQueryParam2Desc GetAttemptsQueryParam2 = "desc"
)

func (e GetAttemptsQueryParam2) ToPointer() *GetAttemptsQueryParam2 {
	return &e
}

func (e *GetAttemptsQueryParam2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = GetAttemptsQueryParam2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAttemptsQueryParam2: %v", v)
	}
}

type GetAttemptsQueryParam1 string

const (
	GetAttemptsQueryParam1Asc  GetAttemptsQueryParam1 = "asc"
	GetAttemptsQueryParam1Desc GetAttemptsQueryParam1 = "desc"
)

func (e GetAttemptsQueryParam1) ToPointer() *GetAttemptsQueryParam1 {
	return &e
}

func (e *GetAttemptsQueryParam1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = GetAttemptsQueryParam1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAttemptsQueryParam1: %v", v)
	}
}

type DirType string

const (
	DirTypeGetAttemptsQueryParam1        DirType = "getAttempts_queryParam_1"
	DirTypeArrayOfgetAttemptsQueryParam2 DirType = "arrayOfgetAttempts_queryParam_2"
)

// Dir - Sort direction
type Dir struct {
	GetAttemptsQueryParam1        *GetAttemptsQueryParam1
	ArrayOfgetAttemptsQueryParam2 []GetAttemptsQueryParam2

	Type DirType
}

func CreateDirGetAttemptsQueryParam1(getAttemptsQueryParam1 GetAttemptsQueryParam1) Dir {
	typ := DirTypeGetAttemptsQueryParam1

	return Dir{
		GetAttemptsQueryParam1: &getAttemptsQueryParam1,
		Type:                   typ,
	}
}

func CreateDirArrayOfgetAttemptsQueryParam2(arrayOfgetAttemptsQueryParam2 []GetAttemptsQueryParam2) Dir {
	typ := DirTypeArrayOfgetAttemptsQueryParam2

	return Dir{
		ArrayOfgetAttemptsQueryParam2: arrayOfgetAttemptsQueryParam2,
		Type:                          typ,
	}
}

func (u *Dir) UnmarshalJSON(data []byte) error {

	getAttemptsQueryParam1 := GetAttemptsQueryParam1("")
	if err := utils.UnmarshalJSON(data, &getAttemptsQueryParam1, "", true, true); err == nil {
		u.GetAttemptsQueryParam1 = &getAttemptsQueryParam1
		u.Type = DirTypeGetAttemptsQueryParam1
		return nil
	}

	arrayOfgetAttemptsQueryParam2 := []GetAttemptsQueryParam2{}
	if err := utils.UnmarshalJSON(data, &arrayOfgetAttemptsQueryParam2, "", true, true); err == nil {
		u.ArrayOfgetAttemptsQueryParam2 = arrayOfgetAttemptsQueryParam2
		u.Type = DirTypeArrayOfgetAttemptsQueryParam2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u Dir) MarshalJSON() ([]byte, error) {
	if u.GetAttemptsQueryParam1 != nil {
		return utils.MarshalJSON(u.GetAttemptsQueryParam1, "", true)
	}

	if u.ArrayOfgetAttemptsQueryParam2 != nil {
		return utils.MarshalJSON(u.ArrayOfgetAttemptsQueryParam2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type EventIDType string

const (
	EventIDTypeStr        EventIDType = "str"
	EventIDTypeArrayOfstr EventIDType = "arrayOfstr"
)

// EventID - Event the attempt is associated with
type EventID struct {
	Str        *string
	ArrayOfstr []string

	Type EventIDType
}

func CreateEventIDStr(str string) EventID {
	typ := EventIDTypeStr

	return EventID{
		Str:  &str,
		Type: typ,
	}
}

func CreateEventIDArrayOfstr(arrayOfstr []string) EventID {
	typ := EventIDTypeArrayOfstr

	return EventID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *EventID) UnmarshalJSON(data []byte) error {

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = EventIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = EventIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u EventID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type QueryParam2 string

const (
	QueryParam2CreatedAt QueryParam2 = "created_at"
)

func (e QueryParam2) ToPointer() *QueryParam2 {
	return &e
}

func (e *QueryParam2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "created_at":
		*e = QueryParam2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for QueryParam2: %v", v)
	}
}

type QueryParam1 string

const (
	QueryParam1CreatedAt QueryParam1 = "created_at"
)

func (e QueryParam1) ToPointer() *QueryParam1 {
	return &e
}

func (e *QueryParam1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "created_at":
		*e = QueryParam1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for QueryParam1: %v", v)
	}
}

type OrderByType string

const (
	OrderByTypeQueryParam1        OrderByType = "queryParam_1"
	OrderByTypeArrayOfqueryParam2 OrderByType = "arrayOfqueryParam_2"
)

// OrderBy - Sort key(s)
type OrderBy struct {
	QueryParam1        *QueryParam1
	ArrayOfqueryParam2 []QueryParam2

	Type OrderByType
}

func CreateOrderByQueryParam1(queryParam1 QueryParam1) OrderBy {
	typ := OrderByTypeQueryParam1

	return OrderBy{
		QueryParam1: &queryParam1,
		Type:        typ,
	}
}

func CreateOrderByArrayOfqueryParam2(arrayOfqueryParam2 []QueryParam2) OrderBy {
	typ := OrderByTypeArrayOfqueryParam2

	return OrderBy{
		ArrayOfqueryParam2: arrayOfqueryParam2,
		Type:               typ,
	}
}

func (u *OrderBy) UnmarshalJSON(data []byte) error {

	queryParam1 := QueryParam1("")
	if err := utils.UnmarshalJSON(data, &queryParam1, "", true, true); err == nil {
		u.QueryParam1 = &queryParam1
		u.Type = OrderByTypeQueryParam1
		return nil
	}

	arrayOfqueryParam2 := []QueryParam2{}
	if err := utils.UnmarshalJSON(data, &arrayOfqueryParam2, "", true, true); err == nil {
		u.ArrayOfqueryParam2 = arrayOfqueryParam2
		u.Type = OrderByTypeArrayOfqueryParam2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u OrderBy) MarshalJSON() ([]byte, error) {
	if u.QueryParam1 != nil {
		return utils.MarshalJSON(u.QueryParam1, "", true)
	}

	if u.ArrayOfqueryParam2 != nil {
		return utils.MarshalJSON(u.ArrayOfqueryParam2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetAttemptsRequest struct {
	// Sort direction
	Dir *Dir `queryParam:"style=form,explode=true,name=dir"`
	// Event the attempt is associated with
	EventID *EventID `queryParam:"style=form,explode=true,name=event_id"`
	Limit   *int64   `queryParam:"style=form,explode=true,name=limit"`
	Next    *string  `queryParam:"style=form,explode=true,name=next"`
	// Sort key(s)
	OrderBy *OrderBy `queryParam:"style=form,explode=true,name=order_by"`
	Prev    *string  `queryParam:"style=form,explode=true,name=prev"`
}

func (o *GetAttemptsRequest) GetDir() *Dir {
	if o == nil {
		return nil
	}
	return o.Dir
}

func (o *GetAttemptsRequest) GetEventID() *EventID {
	if o == nil {
		return nil
	}
	return o.EventID
}

func (o *GetAttemptsRequest) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *GetAttemptsRequest) GetNext() *string {
	if o == nil {
		return nil
	}
	return o.Next
}

func (o *GetAttemptsRequest) GetOrderBy() *OrderBy {
	if o == nil {
		return nil
	}
	return o.OrderBy
}

func (o *GetAttemptsRequest) GetPrev() *string {
	if o == nil {
		return nil
	}
	return o.Prev
}

type GetAttemptsResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// List of attempts
	EventAttemptPaginatedResult *components.EventAttemptPaginatedResult
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *GetAttemptsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetAttemptsResponse) GetEventAttemptPaginatedResult() *components.EventAttemptPaginatedResult {
	if o == nil {
		return nil
	}
	return o.EventAttemptPaginatedResult
}

func (o *GetAttemptsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetAttemptsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
