// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"errors"
	"github.com/speakeasy-sdks/hookdeck-go/internal/utils"
	"github.com/speakeasy-sdks/hookdeck-go/models/components"
	"net/http"
	"time"
)

type UpdateIssueTriggerConfigsType string

const (
	UpdateIssueTriggerConfigsTypeIssueTriggerDeliveryConfigs       UpdateIssueTriggerConfigsType = "IssueTriggerDeliveryConfigs"
	UpdateIssueTriggerConfigsTypeIssueTriggerTransformationConfigs UpdateIssueTriggerConfigsType = "IssueTriggerTransformationConfigs"
	UpdateIssueTriggerConfigsTypeIssueTriggerBackpressureConfigs   UpdateIssueTriggerConfigsType = "IssueTriggerBackpressureConfigs"
)

type UpdateIssueTriggerConfigs struct {
	IssueTriggerDeliveryConfigs       *components.IssueTriggerDeliveryConfigs
	IssueTriggerTransformationConfigs *components.IssueTriggerTransformationConfigs
	IssueTriggerBackpressureConfigs   *components.IssueTriggerBackpressureConfigs

	Type UpdateIssueTriggerConfigsType
}

func CreateUpdateIssueTriggerConfigsIssueTriggerDeliveryConfigs(issueTriggerDeliveryConfigs components.IssueTriggerDeliveryConfigs) UpdateIssueTriggerConfigs {
	typ := UpdateIssueTriggerConfigsTypeIssueTriggerDeliveryConfigs

	return UpdateIssueTriggerConfigs{
		IssueTriggerDeliveryConfigs: &issueTriggerDeliveryConfigs,
		Type:                        typ,
	}
}

func CreateUpdateIssueTriggerConfigsIssueTriggerTransformationConfigs(issueTriggerTransformationConfigs components.IssueTriggerTransformationConfigs) UpdateIssueTriggerConfigs {
	typ := UpdateIssueTriggerConfigsTypeIssueTriggerTransformationConfigs

	return UpdateIssueTriggerConfigs{
		IssueTriggerTransformationConfigs: &issueTriggerTransformationConfigs,
		Type:                              typ,
	}
}

func CreateUpdateIssueTriggerConfigsIssueTriggerBackpressureConfigs(issueTriggerBackpressureConfigs components.IssueTriggerBackpressureConfigs) UpdateIssueTriggerConfigs {
	typ := UpdateIssueTriggerConfigsTypeIssueTriggerBackpressureConfigs

	return UpdateIssueTriggerConfigs{
		IssueTriggerBackpressureConfigs: &issueTriggerBackpressureConfigs,
		Type:                            typ,
	}
}

func (u *UpdateIssueTriggerConfigs) UnmarshalJSON(data []byte) error {

	issueTriggerDeliveryConfigs := components.IssueTriggerDeliveryConfigs{}
	if err := utils.UnmarshalJSON(data, &issueTriggerDeliveryConfigs, "", true, true); err == nil {
		u.IssueTriggerDeliveryConfigs = &issueTriggerDeliveryConfigs
		u.Type = UpdateIssueTriggerConfigsTypeIssueTriggerDeliveryConfigs
		return nil
	}

	issueTriggerTransformationConfigs := components.IssueTriggerTransformationConfigs{}
	if err := utils.UnmarshalJSON(data, &issueTriggerTransformationConfigs, "", true, true); err == nil {
		u.IssueTriggerTransformationConfigs = &issueTriggerTransformationConfigs
		u.Type = UpdateIssueTriggerConfigsTypeIssueTriggerTransformationConfigs
		return nil
	}

	issueTriggerBackpressureConfigs := components.IssueTriggerBackpressureConfigs{}
	if err := utils.UnmarshalJSON(data, &issueTriggerBackpressureConfigs, "", true, true); err == nil {
		u.IssueTriggerBackpressureConfigs = &issueTriggerBackpressureConfigs
		u.Type = UpdateIssueTriggerConfigsTypeIssueTriggerBackpressureConfigs
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u UpdateIssueTriggerConfigs) MarshalJSON() ([]byte, error) {
	if u.IssueTriggerDeliveryConfigs != nil {
		return utils.MarshalJSON(u.IssueTriggerDeliveryConfigs, "", true)
	}

	if u.IssueTriggerTransformationConfigs != nil {
		return utils.MarshalJSON(u.IssueTriggerTransformationConfigs, "", true)
	}

	if u.IssueTriggerBackpressureConfigs != nil {
		return utils.MarshalJSON(u.IssueTriggerBackpressureConfigs, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type UpdateIssueTriggerRequestBody struct {
	// Notification channels object for the specific channel type
	Channels *components.IssueTriggerChannels `json:"channels,omitempty"`
	// Configuration object for the specific issue type selected
	Configs *UpdateIssueTriggerConfigs `json:"configs,omitempty"`
	// Date when the issue trigger was disabled
	DisabledAt *time.Time `json:"disabled_at,omitempty"`
	// Optional unique name to use as reference when using the API
	Name *string `json:"name,omitempty"`
}

func (u UpdateIssueTriggerRequestBody) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateIssueTriggerRequestBody) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *UpdateIssueTriggerRequestBody) GetChannels() *components.IssueTriggerChannels {
	if o == nil {
		return nil
	}
	return o.Channels
}

func (o *UpdateIssueTriggerRequestBody) GetConfigs() *UpdateIssueTriggerConfigs {
	if o == nil {
		return nil
	}
	return o.Configs
}

func (o *UpdateIssueTriggerRequestBody) GetDisabledAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *UpdateIssueTriggerRequestBody) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

type UpdateIssueTriggerRequest struct {
	RequestBody UpdateIssueTriggerRequestBody `request:"mediaType=application/json"`
	ID          string                        `pathParam:"style=simple,explode=false,name=id"`
}

func (o *UpdateIssueTriggerRequest) GetRequestBody() UpdateIssueTriggerRequestBody {
	if o == nil {
		return UpdateIssueTriggerRequestBody{}
	}
	return o.RequestBody
}

func (o *UpdateIssueTriggerRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type UpdateIssueTriggerResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// A single issue trigger
	IssueTrigger *components.IssueTrigger
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *UpdateIssueTriggerResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *UpdateIssueTriggerResponse) GetIssueTrigger() *components.IssueTrigger {
	if o == nil {
		return nil
	}
	return o.IssueTrigger
}

func (o *UpdateIssueTriggerResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *UpdateIssueTriggerResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
