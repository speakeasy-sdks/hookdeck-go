// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/speakeasy-sdks/hookdeck-go/internal/utils"
	"github.com/speakeasy-sdks/hookdeck-go/models/components"
	"net/http"
)

type GetTransformationsQueryParam2 string

const (
	GetTransformationsQueryParam2Asc  GetTransformationsQueryParam2 = "asc"
	GetTransformationsQueryParam2Desc GetTransformationsQueryParam2 = "desc"
)

func (e GetTransformationsQueryParam2) ToPointer() *GetTransformationsQueryParam2 {
	return &e
}

func (e *GetTransformationsQueryParam2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = GetTransformationsQueryParam2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetTransformationsQueryParam2: %v", v)
	}
}

// GetTransformationsQueryParam1 - Sort direction
type GetTransformationsQueryParam1 string

const (
	GetTransformationsQueryParam1Asc  GetTransformationsQueryParam1 = "asc"
	GetTransformationsQueryParam1Desc GetTransformationsQueryParam1 = "desc"
)

func (e GetTransformationsQueryParam1) ToPointer() *GetTransformationsQueryParam1 {
	return &e
}

func (e *GetTransformationsQueryParam1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = GetTransformationsQueryParam1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetTransformationsQueryParam1: %v", v)
	}
}

type GetTransformationsQueryParamDirType string

const (
	GetTransformationsQueryParamDirTypeGetTransformationsQueryParam1        GetTransformationsQueryParamDirType = "getTransformations_queryParam_1"
	GetTransformationsQueryParamDirTypeArrayOfgetTransformationsQueryParam2 GetTransformationsQueryParamDirType = "arrayOfgetTransformations_queryParam_2"
)

type GetTransformationsQueryParamDir struct {
	GetTransformationsQueryParam1        *GetTransformationsQueryParam1
	ArrayOfgetTransformationsQueryParam2 []GetTransformationsQueryParam2

	Type GetTransformationsQueryParamDirType
}

func CreateGetTransformationsQueryParamDirGetTransformationsQueryParam1(getTransformationsQueryParam1 GetTransformationsQueryParam1) GetTransformationsQueryParamDir {
	typ := GetTransformationsQueryParamDirTypeGetTransformationsQueryParam1

	return GetTransformationsQueryParamDir{
		GetTransformationsQueryParam1: &getTransformationsQueryParam1,
		Type:                          typ,
	}
}

func CreateGetTransformationsQueryParamDirArrayOfgetTransformationsQueryParam2(arrayOfgetTransformationsQueryParam2 []GetTransformationsQueryParam2) GetTransformationsQueryParamDir {
	typ := GetTransformationsQueryParamDirTypeArrayOfgetTransformationsQueryParam2

	return GetTransformationsQueryParamDir{
		ArrayOfgetTransformationsQueryParam2: arrayOfgetTransformationsQueryParam2,
		Type:                                 typ,
	}
}

func (u *GetTransformationsQueryParamDir) UnmarshalJSON(data []byte) error {

	getTransformationsQueryParam1 := GetTransformationsQueryParam1("")
	if err := utils.UnmarshalJSON(data, &getTransformationsQueryParam1, "", true, true); err == nil {
		u.GetTransformationsQueryParam1 = &getTransformationsQueryParam1
		u.Type = GetTransformationsQueryParamDirTypeGetTransformationsQueryParam1
		return nil
	}

	arrayOfgetTransformationsQueryParam2 := []GetTransformationsQueryParam2{}
	if err := utils.UnmarshalJSON(data, &arrayOfgetTransformationsQueryParam2, "", true, true); err == nil {
		u.ArrayOfgetTransformationsQueryParam2 = arrayOfgetTransformationsQueryParam2
		u.Type = GetTransformationsQueryParamDirTypeArrayOfgetTransformationsQueryParam2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetTransformationsQueryParamDir) MarshalJSON() ([]byte, error) {
	if u.GetTransformationsQueryParam1 != nil {
		return utils.MarshalJSON(u.GetTransformationsQueryParam1, "", true)
	}

	if u.ArrayOfgetTransformationsQueryParam2 != nil {
		return utils.MarshalJSON(u.ArrayOfgetTransformationsQueryParam2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetTransformationsQueryParamIDType string

const (
	GetTransformationsQueryParamIDTypeStr        GetTransformationsQueryParamIDType = "str"
	GetTransformationsQueryParamIDTypeArrayOfstr GetTransformationsQueryParamIDType = "arrayOfstr"
)

type GetTransformationsQueryParamID struct {
	Str        *string
	ArrayOfstr []string

	Type GetTransformationsQueryParamIDType
}

func CreateGetTransformationsQueryParamIDStr(str string) GetTransformationsQueryParamID {
	typ := GetTransformationsQueryParamIDTypeStr

	return GetTransformationsQueryParamID{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetTransformationsQueryParamIDArrayOfstr(arrayOfstr []string) GetTransformationsQueryParamID {
	typ := GetTransformationsQueryParamIDTypeArrayOfstr

	return GetTransformationsQueryParamID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *GetTransformationsQueryParamID) UnmarshalJSON(data []byte) error {

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GetTransformationsQueryParamIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = GetTransformationsQueryParamIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetTransformationsQueryParamID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetTransformationsQueryParamNameType string

const (
	GetTransformationsQueryParamNameTypeStr        GetTransformationsQueryParamNameType = "str"
	GetTransformationsQueryParamNameTypeArrayOfstr GetTransformationsQueryParamNameType = "arrayOfstr"
)

type GetTransformationsQueryParamName struct {
	Str        *string
	ArrayOfstr []string

	Type GetTransformationsQueryParamNameType
}

func CreateGetTransformationsQueryParamNameStr(str string) GetTransformationsQueryParamName {
	typ := GetTransformationsQueryParamNameTypeStr

	return GetTransformationsQueryParamName{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetTransformationsQueryParamNameArrayOfstr(arrayOfstr []string) GetTransformationsQueryParamName {
	typ := GetTransformationsQueryParamNameTypeArrayOfstr

	return GetTransformationsQueryParamName{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *GetTransformationsQueryParamName) UnmarshalJSON(data []byte) error {

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GetTransformationsQueryParamNameTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = GetTransformationsQueryParamNameTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetTransformationsQueryParamName) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetTransformationsQueryParamTransformations2 string

const (
	GetTransformationsQueryParamTransformations2CreatedAt GetTransformationsQueryParamTransformations2 = "created_at"
)

func (e GetTransformationsQueryParamTransformations2) ToPointer() *GetTransformationsQueryParamTransformations2 {
	return &e
}

func (e *GetTransformationsQueryParamTransformations2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "created_at":
		*e = GetTransformationsQueryParamTransformations2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetTransformationsQueryParamTransformations2: %v", v)
	}
}

// GetTransformationsQueryParamTransformations1 - Sort key(s)
type GetTransformationsQueryParamTransformations1 string

const (
	GetTransformationsQueryParamTransformations1CreatedAt GetTransformationsQueryParamTransformations1 = "created_at"
)

func (e GetTransformationsQueryParamTransformations1) ToPointer() *GetTransformationsQueryParamTransformations1 {
	return &e
}

func (e *GetTransformationsQueryParamTransformations1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "created_at":
		*e = GetTransformationsQueryParamTransformations1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetTransformationsQueryParamTransformations1: %v", v)
	}
}

type GetTransformationsQueryParamOrderByType string

const (
	GetTransformationsQueryParamOrderByTypeGetTransformationsQueryParamTransformations1        GetTransformationsQueryParamOrderByType = "getTransformations_queryParam_Transformations_1"
	GetTransformationsQueryParamOrderByTypeArrayOfgetTransformationsQueryParamTransformations2 GetTransformationsQueryParamOrderByType = "arrayOfgetTransformations_queryParam_Transformations_2"
)

type GetTransformationsQueryParamOrderBy struct {
	GetTransformationsQueryParamTransformations1        *GetTransformationsQueryParamTransformations1
	ArrayOfgetTransformationsQueryParamTransformations2 []GetTransformationsQueryParamTransformations2

	Type GetTransformationsQueryParamOrderByType
}

func CreateGetTransformationsQueryParamOrderByGetTransformationsQueryParamTransformations1(getTransformationsQueryParamTransformations1 GetTransformationsQueryParamTransformations1) GetTransformationsQueryParamOrderBy {
	typ := GetTransformationsQueryParamOrderByTypeGetTransformationsQueryParamTransformations1

	return GetTransformationsQueryParamOrderBy{
		GetTransformationsQueryParamTransformations1: &getTransformationsQueryParamTransformations1,
		Type: typ,
	}
}

func CreateGetTransformationsQueryParamOrderByArrayOfgetTransformationsQueryParamTransformations2(arrayOfgetTransformationsQueryParamTransformations2 []GetTransformationsQueryParamTransformations2) GetTransformationsQueryParamOrderBy {
	typ := GetTransformationsQueryParamOrderByTypeArrayOfgetTransformationsQueryParamTransformations2

	return GetTransformationsQueryParamOrderBy{
		ArrayOfgetTransformationsQueryParamTransformations2: arrayOfgetTransformationsQueryParamTransformations2,
		Type: typ,
	}
}

func (u *GetTransformationsQueryParamOrderBy) UnmarshalJSON(data []byte) error {

	getTransformationsQueryParamTransformations1 := GetTransformationsQueryParamTransformations1("")
	if err := utils.UnmarshalJSON(data, &getTransformationsQueryParamTransformations1, "", true, true); err == nil {
		u.GetTransformationsQueryParamTransformations1 = &getTransformationsQueryParamTransformations1
		u.Type = GetTransformationsQueryParamOrderByTypeGetTransformationsQueryParamTransformations1
		return nil
	}

	arrayOfgetTransformationsQueryParamTransformations2 := []GetTransformationsQueryParamTransformations2{}
	if err := utils.UnmarshalJSON(data, &arrayOfgetTransformationsQueryParamTransformations2, "", true, true); err == nil {
		u.ArrayOfgetTransformationsQueryParamTransformations2 = arrayOfgetTransformationsQueryParamTransformations2
		u.Type = GetTransformationsQueryParamOrderByTypeArrayOfgetTransformationsQueryParamTransformations2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetTransformationsQueryParamOrderBy) MarshalJSON() ([]byte, error) {
	if u.GetTransformationsQueryParamTransformations1 != nil {
		return utils.MarshalJSON(u.GetTransformationsQueryParamTransformations1, "", true)
	}

	if u.ArrayOfgetTransformationsQueryParamTransformations2 != nil {
		return utils.MarshalJSON(u.ArrayOfgetTransformationsQueryParamTransformations2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetTransformationsRequest struct {
	Dir     *GetTransformationsQueryParamDir     `queryParam:"style=form,explode=true,name=dir"`
	ID      *GetTransformationsQueryParamID      `queryParam:"style=form,explode=true,name=id"`
	Limit   *int64                               `queryParam:"style=form,explode=true,name=limit"`
	Name    *GetTransformationsQueryParamName    `queryParam:"style=form,explode=true,name=name"`
	Next    *string                              `queryParam:"style=form,explode=true,name=next"`
	OrderBy *GetTransformationsQueryParamOrderBy `queryParam:"style=form,explode=true,name=order_by"`
	Prev    *string                              `queryParam:"style=form,explode=true,name=prev"`
}

func (o *GetTransformationsRequest) GetDir() *GetTransformationsQueryParamDir {
	if o == nil {
		return nil
	}
	return o.Dir
}

func (o *GetTransformationsRequest) GetID() *GetTransformationsQueryParamID {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *GetTransformationsRequest) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *GetTransformationsRequest) GetName() *GetTransformationsQueryParamName {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *GetTransformationsRequest) GetNext() *string {
	if o == nil {
		return nil
	}
	return o.Next
}

func (o *GetTransformationsRequest) GetOrderBy() *GetTransformationsQueryParamOrderBy {
	if o == nil {
		return nil
	}
	return o.OrderBy
}

func (o *GetTransformationsRequest) GetPrev() *string {
	if o == nil {
		return nil
	}
	return o.Prev
}

type GetTransformationsResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// List of transformations
	TransformationPaginatedResult *components.TransformationPaginatedResult
}

func (o *GetTransformationsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetTransformationsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetTransformationsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GetTransformationsResponse) GetTransformationPaginatedResult() *components.TransformationPaginatedResult {
	if o == nil {
		return nil
	}
	return o.TransformationPaginatedResult
}
