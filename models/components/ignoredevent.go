// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/speakeasy-sdks/hookdeck-go/internal/utils"
	"time"
)

type TransformationFailedMetaSchemas struct {
	TransformationID string `json:"transformation_id"`
}

func (o *TransformationFailedMetaSchemas) GetTransformationID() string {
	if o == nil {
		return ""
	}
	return o.TransformationID
}

type Schemas string

const (
	SchemasBody    Schemas = "body"
	SchemasHeaders Schemas = "headers"
	SchemasPath    Schemas = "path"
	SchemasQuery   Schemas = "query"
)

func (e Schemas) ToPointer() *Schemas {
	return &e
}

func (e *Schemas) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "body":
		fallthrough
	case "headers":
		fallthrough
	case "path":
		fallthrough
	case "query":
		*e = Schemas(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Schemas: %v", v)
	}
}

type MetaType string

const (
	MetaTypeSchemas                         MetaType = "Schemas"
	MetaTypeTransformationFailedMetaSchemas MetaType = "TransformationFailedMeta_Schemas"
)

type Meta struct {
	Schemas                         *Schemas
	TransformationFailedMetaSchemas *TransformationFailedMetaSchemas

	Type MetaType
}

func CreateMetaSchemas(schemas Schemas) Meta {
	typ := MetaTypeSchemas

	return Meta{
		Schemas: &schemas,
		Type:    typ,
	}
}

func CreateMetaTransformationFailedMetaSchemas(transformationFailedMetaSchemas TransformationFailedMetaSchemas) Meta {
	typ := MetaTypeTransformationFailedMetaSchemas

	return Meta{
		TransformationFailedMetaSchemas: &transformationFailedMetaSchemas,
		Type:                            typ,
	}
}

func (u *Meta) UnmarshalJSON(data []byte) error {

	transformationFailedMetaSchemas := TransformationFailedMetaSchemas{}
	if err := utils.UnmarshalJSON(data, &transformationFailedMetaSchemas, "", true, true); err == nil {
		u.TransformationFailedMetaSchemas = &transformationFailedMetaSchemas
		u.Type = MetaTypeTransformationFailedMetaSchemas
		return nil
	}

	schemas := Schemas("")
	if err := utils.UnmarshalJSON(data, &schemas, "", true, true); err == nil {
		u.Schemas = &schemas
		u.Type = MetaTypeSchemas
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u Meta) MarshalJSON() ([]byte, error) {
	if u.Schemas != nil {
		return utils.MarshalJSON(u.Schemas, "", true)
	}

	if u.TransformationFailedMetaSchemas != nil {
		return utils.MarshalJSON(u.TransformationFailedMetaSchemas, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type IgnoredEvent struct {
	Cause     IgnoredEventCause `json:"cause"`
	CreatedAt time.Time         `json:"created_at"`
	ID        string            `json:"id"`
	Meta      *Meta             `json:"meta,omitempty"`
	RequestID string            `json:"request_id"`
	TeamID    string            `json:"team_id"`
	UpdatedAt time.Time         `json:"updated_at"`
	WebhookID string            `json:"webhook_id"`
}

func (i IgnoredEvent) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *IgnoredEvent) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *IgnoredEvent) GetCause() IgnoredEventCause {
	if o == nil {
		return IgnoredEventCause("")
	}
	return o.Cause
}

func (o *IgnoredEvent) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *IgnoredEvent) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *IgnoredEvent) GetMeta() *Meta {
	if o == nil {
		return nil
	}
	return o.Meta
}

func (o *IgnoredEvent) GetRequestID() string {
	if o == nil {
		return ""
	}
	return o.RequestID
}

func (o *IgnoredEvent) GetTeamID() string {
	if o == nil {
		return ""
	}
	return o.TeamID
}

func (o *IgnoredEvent) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

func (o *IgnoredEvent) GetWebhookID() string {
	if o == nil {
		return ""
	}
	return o.WebhookID
}
