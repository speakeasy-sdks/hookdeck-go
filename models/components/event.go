// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package components

import (
	"errors"
	"github.com/speakeasy-sdks/hookdeck-go/internal/utils"
	"time"
)

type EventSchemas2 struct {
}

type EventBodyType string

const (
	EventBodyTypeStr           EventBodyType = "str"
	EventBodyTypeEventSchemas2 EventBodyType = "Event_Schemas_2"
	EventBodyTypeArrayOfany    EventBodyType = "arrayOfany"
)

type EventBody struct {
	Str           *string
	EventSchemas2 *EventSchemas2
	ArrayOfany    []interface{}

	Type EventBodyType
}

func CreateEventBodyStr(str string) EventBody {
	typ := EventBodyTypeStr

	return EventBody{
		Str:  &str,
		Type: typ,
	}
}

func CreateEventBodyEventSchemas2(eventSchemas2 EventSchemas2) EventBody {
	typ := EventBodyTypeEventSchemas2

	return EventBody{
		EventSchemas2: &eventSchemas2,
		Type:          typ,
	}
}

func CreateEventBodyArrayOfany(arrayOfany []interface{}) EventBody {
	typ := EventBodyTypeArrayOfany

	return EventBody{
		ArrayOfany: arrayOfany,
		Type:       typ,
	}
}

func (u *EventBody) UnmarshalJSON(data []byte) error {

	eventSchemas2 := EventSchemas2{}
	if err := utils.UnmarshalJSON(data, &eventSchemas2, "", true, true); err == nil {
		u.EventSchemas2 = &eventSchemas2
		u.Type = EventBodyTypeEventSchemas2
		return nil
	}

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = EventBodyTypeStr
		return nil
	}

	arrayOfany := []interface{}{}
	if err := utils.UnmarshalJSON(data, &arrayOfany, "", true, true); err == nil {
		u.ArrayOfany = arrayOfany
		u.Type = EventBodyTypeArrayOfany
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u EventBody) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.EventSchemas2 != nil {
		return utils.MarshalJSON(u.EventSchemas2, "", true)
	}

	if u.ArrayOfany != nil {
		return utils.MarshalJSON(u.ArrayOfany, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type EventHeadersType string

const (
	EventHeadersTypeStr      EventHeadersType = "str"
	EventHeadersTypeMapOfstr EventHeadersType = "mapOfstr"
)

type EventHeaders struct {
	Str      *string
	MapOfstr map[string]string

	Type EventHeadersType
}

func CreateEventHeadersStr(str string) EventHeaders {
	typ := EventHeadersTypeStr

	return EventHeaders{
		Str:  &str,
		Type: typ,
	}
}

func CreateEventHeadersMapOfstr(mapOfstr map[string]string) EventHeaders {
	typ := EventHeadersTypeMapOfstr

	return EventHeaders{
		MapOfstr: mapOfstr,
		Type:     typ,
	}
}

func (u *EventHeaders) UnmarshalJSON(data []byte) error {

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = EventHeadersTypeStr
		return nil
	}

	mapOfstr := map[string]string{}
	if err := utils.UnmarshalJSON(data, &mapOfstr, "", true, true); err == nil {
		u.MapOfstr = mapOfstr
		u.Type = EventHeadersTypeMapOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u EventHeaders) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.MapOfstr != nil {
		return utils.MarshalJSON(u.MapOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type Event2 struct {
}

type EventParsedQueryType string

const (
	EventParsedQueryTypeStr    EventParsedQueryType = "str"
	EventParsedQueryTypeEvent2 EventParsedQueryType = "Event_2"
)

type EventParsedQuery struct {
	Str    *string
	Event2 *Event2

	Type EventParsedQueryType
}

func CreateEventParsedQueryStr(str string) EventParsedQuery {
	typ := EventParsedQueryTypeStr

	return EventParsedQuery{
		Str:  &str,
		Type: typ,
	}
}

func CreateEventParsedQueryEvent2(event2 Event2) EventParsedQuery {
	typ := EventParsedQueryTypeEvent2

	return EventParsedQuery{
		Event2: &event2,
		Type:   typ,
	}
}

func (u *EventParsedQuery) UnmarshalJSON(data []byte) error {

	event2 := Event2{}
	if err := utils.UnmarshalJSON(data, &event2, "", true, true); err == nil {
		u.Event2 = &event2
		u.Type = EventParsedQueryTypeEvent2
		return nil
	}

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = EventParsedQueryTypeStr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u EventParsedQuery) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Event2 != nil {
		return utils.MarshalJSON(u.Event2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type Data struct {
	Body           *EventBody        `json:"body,omitempty"`
	Headers        *EventHeaders     `json:"headers,omitempty"`
	IsLargePayload *bool             `json:"is_large_payload,omitempty"`
	ParsedQuery    *EventParsedQuery `json:"parsed_query,omitempty"`
	Path           string            `json:"path"`
	Query          *string           `json:"query,omitempty"`
}

func (o *Data) GetBody() *EventBody {
	if o == nil {
		return nil
	}
	return o.Body
}

func (o *Data) GetHeaders() *EventHeaders {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *Data) GetIsLargePayload() *bool {
	if o == nil {
		return nil
	}
	return o.IsLargePayload
}

func (o *Data) GetParsedQuery() *EventParsedQuery {
	if o == nil {
		return nil
	}
	return o.ParsedQuery
}

func (o *Data) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *Data) GetQuery() *string {
	if o == nil {
		return nil
	}
	return o.Query
}

type Event struct {
	// Number of delivery attempts made
	Attempts int64 `json:"attempts"`
	// ID of the CLI the event is sent to
	CliID *string `json:"cli_id,omitempty"`
	// Date the event was created
	CreatedAt   time.Time `json:"created_at"`
	CreatedAtID *string   `json:"created_at_id,omitempty"`
	Data        *Data     `json:"data,omitempty"`
	// ID of the associated destination
	DestinationID string `json:"destination_id"`
	// ID of the request data
	EventDataID string `json:"event_data_id"`
	// ID of the event
	ID string `json:"id"`
	// Date of the most recently attempted retry
	LastAttemptAt   *time.Time `json:"last_attempt_at,omitempty"`
	LastAttemptAtID *string    `json:"last_attempt_at_id,omitempty"`
	// Date of the next scheduled retry
	NextAttemptAt *time.Time `json:"next_attempt_at,omitempty"`
	// ID of the request that created the event
	RequestID string `json:"request_id"`
	// Event status
	ResponseStatus *int64 `json:"response_status,omitempty"`
	// ID of the associated source
	SourceID string      `json:"source_id"`
	Status   EventStatus `json:"status"`
	// Date of the latest successful attempt
	SuccessfulAt *time.Time `json:"successful_at,omitempty"`
	// ID of the workspace
	TeamID string `json:"team_id"`
	// Date the event was last updated
	UpdatedAt time.Time `json:"updated_at"`
	// ID of the associated connection
	WebhookID string `json:"webhook_id"`
}

func (e Event) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *Event) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Event) GetAttempts() int64 {
	if o == nil {
		return 0
	}
	return o.Attempts
}

func (o *Event) GetCliID() *string {
	if o == nil {
		return nil
	}
	return o.CliID
}

func (o *Event) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *Event) GetCreatedAtID() *string {
	if o == nil {
		return nil
	}
	return o.CreatedAtID
}

func (o *Event) GetData() *Data {
	if o == nil {
		return nil
	}
	return o.Data
}

func (o *Event) GetDestinationID() string {
	if o == nil {
		return ""
	}
	return o.DestinationID
}

func (o *Event) GetEventDataID() string {
	if o == nil {
		return ""
	}
	return o.EventDataID
}

func (o *Event) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Event) GetLastAttemptAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.LastAttemptAt
}

func (o *Event) GetLastAttemptAtID() *string {
	if o == nil {
		return nil
	}
	return o.LastAttemptAtID
}

func (o *Event) GetNextAttemptAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.NextAttemptAt
}

func (o *Event) GetRequestID() string {
	if o == nil {
		return ""
	}
	return o.RequestID
}

func (o *Event) GetResponseStatus() *int64 {
	if o == nil {
		return nil
	}
	return o.ResponseStatus
}

func (o *Event) GetSourceID() string {
	if o == nil {
		return ""
	}
	return o.SourceID
}

func (o *Event) GetStatus() EventStatus {
	if o == nil {
		return EventStatus("")
	}
	return o.Status
}

func (o *Event) GetSuccessfulAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.SuccessfulAt
}

func (o *Event) GetTeamID() string {
	if o == nil {
		return ""
	}
	return o.TeamID
}

func (o *Event) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

func (o *Event) GetWebhookID() string {
	if o == nil {
		return ""
	}
	return o.WebhookID
}
