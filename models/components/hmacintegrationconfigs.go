// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type Encoding string

const (
	EncodingBase64 Encoding = "base64"
	EncodingHex    Encoding = "hex"
)

func (e Encoding) ToPointer() *Encoding {
	return &e
}

func (e *Encoding) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "base64":
		fallthrough
	case "hex":
		*e = Encoding(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Encoding: %v", v)
	}
}

type HMACIntegrationConfigs struct {
	Algorithm        HMACAlgorithms `json:"algorithm"`
	Encoding         Encoding       `json:"encoding"`
	HeaderKey        string         `json:"header_key"`
	WebhookSecretKey string         `json:"webhook_secret_key"`
}

func (o *HMACIntegrationConfigs) GetAlgorithm() HMACAlgorithms {
	if o == nil {
		return HMACAlgorithms("")
	}
	return o.Algorithm
}

func (o *HMACIntegrationConfigs) GetEncoding() Encoding {
	if o == nil {
		return Encoding("")
	}
	return o.Encoding
}

func (o *HMACIntegrationConfigs) GetHeaderKey() string {
	if o == nil {
		return ""
	}
	return o.HeaderKey
}

func (o *HMACIntegrationConfigs) GetWebhookSecretKey() string {
	if o == nil {
		return ""
	}
	return o.WebhookSecretKey
}
