// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/speakeasy-sdks/hookdeck-go/v2/internal/utils"
	"time"
)

type Request2 struct {
}

type RequestBodyType string

const (
	RequestBodyTypeStr        RequestBodyType = "str"
	RequestBodyTypeRequest2   RequestBodyType = "Request_2"
	RequestBodyTypeArrayOfany RequestBodyType = "arrayOfany"
)

type RequestBody struct {
	Str        *string
	Request2   *Request2
	ArrayOfany []interface{}

	Type RequestBodyType
}

func CreateRequestBodyStr(str string) RequestBody {
	typ := RequestBodyTypeStr

	return RequestBody{
		Str:  &str,
		Type: typ,
	}
}

func CreateRequestBodyRequest2(request2 Request2) RequestBody {
	typ := RequestBodyTypeRequest2

	return RequestBody{
		Request2: &request2,
		Type:     typ,
	}
}

func CreateRequestBodyArrayOfany(arrayOfany []interface{}) RequestBody {
	typ := RequestBodyTypeArrayOfany

	return RequestBody{
		ArrayOfany: arrayOfany,
		Type:       typ,
	}
}

func (u *RequestBody) UnmarshalJSON(data []byte) error {

	request2 := Request2{}
	if err := utils.UnmarshalJSON(data, &request2, "", true, true); err == nil {
		u.Request2 = &request2
		u.Type = RequestBodyTypeRequest2
		return nil
	}

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = RequestBodyTypeStr
		return nil
	}

	arrayOfany := []interface{}{}
	if err := utils.UnmarshalJSON(data, &arrayOfany, "", true, true); err == nil {
		u.ArrayOfany = arrayOfany
		u.Type = RequestBodyTypeArrayOfany
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u RequestBody) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Request2 != nil {
		return utils.MarshalJSON(u.Request2, "", true)
	}

	if u.ArrayOfany != nil {
		return utils.MarshalJSON(u.ArrayOfany, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type RequestHeadersType string

const (
	RequestHeadersTypeStr      RequestHeadersType = "str"
	RequestHeadersTypeMapOfstr RequestHeadersType = "mapOfstr"
)

type RequestHeaders struct {
	Str      *string
	MapOfstr map[string]string

	Type RequestHeadersType
}

func CreateRequestHeadersStr(str string) RequestHeaders {
	typ := RequestHeadersTypeStr

	return RequestHeaders{
		Str:  &str,
		Type: typ,
	}
}

func CreateRequestHeadersMapOfstr(mapOfstr map[string]string) RequestHeaders {
	typ := RequestHeadersTypeMapOfstr

	return RequestHeaders{
		MapOfstr: mapOfstr,
		Type:     typ,
	}
}

func (u *RequestHeaders) UnmarshalJSON(data []byte) error {

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = RequestHeadersTypeStr
		return nil
	}

	mapOfstr := map[string]string{}
	if err := utils.UnmarshalJSON(data, &mapOfstr, "", true, true); err == nil {
		u.MapOfstr = mapOfstr
		u.Type = RequestHeadersTypeMapOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u RequestHeaders) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.MapOfstr != nil {
		return utils.MarshalJSON(u.MapOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type RequestSchemas2 struct {
}

type RequestParsedQueryType string

const (
	RequestParsedQueryTypeStr             RequestParsedQueryType = "str"
	RequestParsedQueryTypeRequestSchemas2 RequestParsedQueryType = "Request_Schemas_2"
)

type RequestParsedQuery struct {
	Str             *string
	RequestSchemas2 *RequestSchemas2

	Type RequestParsedQueryType
}

func CreateRequestParsedQueryStr(str string) RequestParsedQuery {
	typ := RequestParsedQueryTypeStr

	return RequestParsedQuery{
		Str:  &str,
		Type: typ,
	}
}

func CreateRequestParsedQueryRequestSchemas2(requestSchemas2 RequestSchemas2) RequestParsedQuery {
	typ := RequestParsedQueryTypeRequestSchemas2

	return RequestParsedQuery{
		RequestSchemas2: &requestSchemas2,
		Type:            typ,
	}
}

func (u *RequestParsedQuery) UnmarshalJSON(data []byte) error {

	requestSchemas2 := RequestSchemas2{}
	if err := utils.UnmarshalJSON(data, &requestSchemas2, "", true, true); err == nil {
		u.RequestSchemas2 = &requestSchemas2
		u.Type = RequestParsedQueryTypeRequestSchemas2
		return nil
	}

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = RequestParsedQueryTypeStr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u RequestParsedQuery) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.RequestSchemas2 != nil {
		return utils.MarshalJSON(u.RequestSchemas2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type RequestData struct {
	Body           *RequestBody        `json:"body,omitempty"`
	Headers        *RequestHeaders     `json:"headers,omitempty"`
	IsLargePayload *bool               `json:"is_large_payload,omitempty"`
	ParsedQuery    *RequestParsedQuery `json:"parsed_query,omitempty"`
	Path           string              `json:"path"`
	Query          *string             `json:"query,omitempty"`
}

func (o *RequestData) GetBody() *RequestBody {
	if o == nil {
		return nil
	}
	return o.Body
}

func (o *RequestData) GetHeaders() *RequestHeaders {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *RequestData) GetIsLargePayload() *bool {
	if o == nil {
		return nil
	}
	return o.IsLargePayload
}

func (o *RequestData) GetParsedQuery() *RequestParsedQuery {
	if o == nil {
		return nil
	}
	return o.ParsedQuery
}

func (o *RequestData) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *RequestData) GetQuery() *string {
	if o == nil {
		return nil
	}
	return o.Query
}

// IngestPriority - The priority attributed to the request when received
type IngestPriority string

const (
	IngestPriorityNormal IngestPriority = "NORMAL"
	IngestPriorityLow    IngestPriority = "LOW"
)

func (e IngestPriority) ToPointer() *IngestPriority {
	return &e
}

func (e *IngestPriority) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NORMAL":
		fallthrough
	case "LOW":
		*e = IngestPriority(v)
		return nil
	default:
		return fmt.Errorf("invalid value for IngestPriority: %v", v)
	}
}

type Request struct {
	// The count of CLI events created from this request
	CliEventsCount *int64 `json:"cli_events_count,omitempty"`
	// 	Date the event was created
	CreatedAt time.Time    `json:"created_at"`
	Data      *RequestData `json:"data,omitempty"`
	// Hash of the request data payload used to check for duplicates
	DuplicateHash *string `json:"duplicate_hash,omitempty"`
	// Count of duplicate hits found
	DuplicateHits *int64 `json:"duplicate_hits,omitempty"`
	// The count of events created from this request (CLI events not included)
	EventsCount *int64 `json:"events_count,omitempty"`
	// ID of the request
	ID           string `json:"id"`
	IgnoredCount *int64 `json:"ignored_count,omitempty"`
	// The priority attributed to the request when received
	IngestPriority *IngestPriority `json:"ingest_priority,omitempty"`
	// The time the request was originally received
	IngestedAt   *time.Time `json:"ingested_at,omitempty"`
	IngestedAtID *string    `json:"ingested_at_id,omitempty"`
	// ID of the request data
	OriginalEventDataID *string                `json:"original_event_data_id,omitempty"`
	RejectionCause      *RequestRejectionCause `json:"rejection_cause,omitempty"`
	// ID of the associated source
	SourceID string `json:"source_id"`
	// ID of the workspace
	TeamID string `json:"team_id"`
	// Date the event was last updated
	UpdatedAt time.Time `json:"updated_at"`
	// Whether or not the request was verified when received
	Verified *bool `json:"verified,omitempty"`
}

func (r Request) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *Request) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Request) GetCliEventsCount() *int64 {
	if o == nil {
		return nil
	}
	return o.CliEventsCount
}

func (o *Request) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *Request) GetData() *RequestData {
	if o == nil {
		return nil
	}
	return o.Data
}

func (o *Request) GetDuplicateHash() *string {
	if o == nil {
		return nil
	}
	return o.DuplicateHash
}

func (o *Request) GetDuplicateHits() *int64 {
	if o == nil {
		return nil
	}
	return o.DuplicateHits
}

func (o *Request) GetEventsCount() *int64 {
	if o == nil {
		return nil
	}
	return o.EventsCount
}

func (o *Request) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Request) GetIgnoredCount() *int64 {
	if o == nil {
		return nil
	}
	return o.IgnoredCount
}

func (o *Request) GetIngestPriority() *IngestPriority {
	if o == nil {
		return nil
	}
	return o.IngestPriority
}

func (o *Request) GetIngestedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.IngestedAt
}

func (o *Request) GetIngestedAtID() *string {
	if o == nil {
		return nil
	}
	return o.IngestedAtID
}

func (o *Request) GetOriginalEventDataID() *string {
	if o == nil {
		return nil
	}
	return o.OriginalEventDataID
}

func (o *Request) GetRejectionCause() *RequestRejectionCause {
	if o == nil {
		return nil
	}
	return o.RejectionCause
}

func (o *Request) GetSourceID() string {
	if o == nil {
		return ""
	}
	return o.SourceID
}

func (o *Request) GetTeamID() string {
	if o == nil {
		return ""
	}
	return o.TeamID
}

func (o *Request) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

func (o *Request) GetVerified() *bool {
	if o == nil {
		return nil
	}
	return o.Verified
}
