// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package components

import (
	"errors"
	"github.com/speakeasy-sdks/hookdeck-go/internal/utils"
)

type TransformationsType string

const (
	TransformationsTypeStr        TransformationsType = "str"
	TransformationsTypeArrayOfstr TransformationsType = "arrayOfstr"
)

type Transformations struct {
	Str        *string
	ArrayOfstr []string

	Type TransformationsType
}

func CreateTransformationsStr(str string) Transformations {
	typ := TransformationsTypeStr

	return Transformations{
		Str:  &str,
		Type: typ,
	}
}

func CreateTransformationsArrayOfstr(arrayOfstr []string) Transformations {
	typ := TransformationsTypeArrayOfstr

	return Transformations{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *Transformations) UnmarshalJSON(data []byte) error {

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = TransformationsTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = TransformationsTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u Transformations) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// IssueTriggerTransformationConfigs - Configurations for a 'Transformation' issue trigger
type IssueTriggerTransformationConfigs struct {
	// The minimum log level to open the issue on
	LogLevel TransformationExecutionLogLevel `json:"log_level"`
	// A pattern to match on the transformation name or array of transformation IDs. Use `*` as wildcard.
	Transformations Transformations `json:"transformations"`
}

func (o *IssueTriggerTransformationConfigs) GetLogLevel() TransformationExecutionLogLevel {
	if o == nil {
		return TransformationExecutionLogLevel("")
	}
	return o.LogLevel
}

func (o *IssueTriggerTransformationConfigs) GetTransformations() Transformations {
	if o == nil {
		return Transformations{}
	}
	return o.Transformations
}
