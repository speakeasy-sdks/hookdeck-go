// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/speakeasy-sdks/hookdeck-go/internal/utils"
)

type OrderByDirection4 string

const (
	OrderByDirection4Desc OrderByDirection4 = "DESC"
)

func (e OrderByDirection4) ToPointer() *OrderByDirection4 {
	return &e
}

func (e *OrderByDirection4) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DESC":
		*e = OrderByDirection4(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OrderByDirection4: %v", v)
	}
}

type Three string

const (
	ThreeAsc Three = "ASC"
)

func (e Three) ToPointer() *Three {
	return &e
}

func (e *Three) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ASC":
		*e = Three(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Three: %v", v)
	}
}

type Two string

const (
	TwoDesc Two = "desc"
)

func (e Two) ToPointer() *Two {
	return &e
}

func (e *Two) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "desc":
		*e = Two(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Two: %v", v)
	}
}

type OrderByDirection1 string

const (
	OrderByDirection1Asc OrderByDirection1 = "asc"
)

func (e OrderByDirection1) ToPointer() *OrderByDirection1 {
	return &e
}

func (e *OrderByDirection1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		*e = OrderByDirection1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OrderByDirection1: %v", v)
	}
}

type OrderByDirectionType string

const (
	OrderByDirectionTypeOrderByDirection1 OrderByDirectionType = "OrderByDirection_1"
	OrderByDirectionTypeTwo               OrderByDirectionType = "2"
	OrderByDirectionTypeThree             OrderByDirectionType = "3"
	OrderByDirectionTypeOrderByDirection4 OrderByDirectionType = "OrderByDirection_4"
)

type OrderByDirection struct {
	OrderByDirection1 *OrderByDirection1
	Two               *Two
	Three             *Three
	OrderByDirection4 *OrderByDirection4

	Type OrderByDirectionType
}

func CreateOrderByDirectionOrderByDirection1(orderByDirection1 OrderByDirection1) OrderByDirection {
	typ := OrderByDirectionTypeOrderByDirection1

	return OrderByDirection{
		OrderByDirection1: &orderByDirection1,
		Type:              typ,
	}
}

func CreateOrderByDirectionTwo(two Two) OrderByDirection {
	typ := OrderByDirectionTypeTwo

	return OrderByDirection{
		Two:  &two,
		Type: typ,
	}
}

func CreateOrderByDirectionThree(three Three) OrderByDirection {
	typ := OrderByDirectionTypeThree

	return OrderByDirection{
		Three: &three,
		Type:  typ,
	}
}

func CreateOrderByDirectionOrderByDirection4(orderByDirection4 OrderByDirection4) OrderByDirection {
	typ := OrderByDirectionTypeOrderByDirection4

	return OrderByDirection{
		OrderByDirection4: &orderByDirection4,
		Type:              typ,
	}
}

func (u *OrderByDirection) UnmarshalJSON(data []byte) error {

	orderByDirection1 := OrderByDirection1("")
	if err := utils.UnmarshalJSON(data, &orderByDirection1, "", true, true); err == nil {
		u.OrderByDirection1 = &orderByDirection1
		u.Type = OrderByDirectionTypeOrderByDirection1
		return nil
	}

	two := Two("")
	if err := utils.UnmarshalJSON(data, &two, "", true, true); err == nil {
		u.Two = &two
		u.Type = OrderByDirectionTypeTwo
		return nil
	}

	three := Three("")
	if err := utils.UnmarshalJSON(data, &three, "", true, true); err == nil {
		u.Three = &three
		u.Type = OrderByDirectionTypeThree
		return nil
	}

	orderByDirection4 := OrderByDirection4("")
	if err := utils.UnmarshalJSON(data, &orderByDirection4, "", true, true); err == nil {
		u.OrderByDirection4 = &orderByDirection4
		u.Type = OrderByDirectionTypeOrderByDirection4
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u OrderByDirection) MarshalJSON() ([]byte, error) {
	if u.OrderByDirection1 != nil {
		return utils.MarshalJSON(u.OrderByDirection1, "", true)
	}

	if u.Two != nil {
		return utils.MarshalJSON(u.Two, "", true)
	}

	if u.Three != nil {
		return utils.MarshalJSON(u.Three, "", true)
	}

	if u.OrderByDirection4 != nil {
		return utils.MarshalJSON(u.OrderByDirection4, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}
