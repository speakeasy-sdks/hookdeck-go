// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package components

import (
	"errors"
	"github.com/speakeasy-sdks/hookdeck-go/v2/internal/utils"
)

type RuleType string

const (
	RuleTypeRetryRule     RuleType = "RetryRule"
	RuleTypeAlertRule     RuleType = "AlertRule"
	RuleTypeFilterRule    RuleType = "FilterRule"
	RuleTypeTransformRule RuleType = "TransformRule"
	RuleTypeDelayRule     RuleType = "DelayRule"
)

type Rule struct {
	RetryRule     *RetryRule
	AlertRule     *AlertRule
	FilterRule    *FilterRule
	TransformRule *TransformRule
	DelayRule     *DelayRule

	Type RuleType
}

func CreateRuleRetryRule(retryRule RetryRule) Rule {
	typ := RuleTypeRetryRule

	return Rule{
		RetryRule: &retryRule,
		Type:      typ,
	}
}

func CreateRuleAlertRule(alertRule AlertRule) Rule {
	typ := RuleTypeAlertRule

	return Rule{
		AlertRule: &alertRule,
		Type:      typ,
	}
}

func CreateRuleFilterRule(filterRule FilterRule) Rule {
	typ := RuleTypeFilterRule

	return Rule{
		FilterRule: &filterRule,
		Type:       typ,
	}
}

func CreateRuleTransformRule(transformRule TransformRule) Rule {
	typ := RuleTypeTransformRule

	return Rule{
		TransformRule: &transformRule,
		Type:          typ,
	}
}

func CreateRuleDelayRule(delayRule DelayRule) Rule {
	typ := RuleTypeDelayRule

	return Rule{
		DelayRule: &delayRule,
		Type:      typ,
	}
}

func (u *Rule) UnmarshalJSON(data []byte) error {

	alertRule := AlertRule{}
	if err := utils.UnmarshalJSON(data, &alertRule, "", true, true); err == nil {
		u.AlertRule = &alertRule
		u.Type = RuleTypeAlertRule
		return nil
	}

	delayRule := DelayRule{}
	if err := utils.UnmarshalJSON(data, &delayRule, "", true, true); err == nil {
		u.DelayRule = &delayRule
		u.Type = RuleTypeDelayRule
		return nil
	}

	retryRule := RetryRule{}
	if err := utils.UnmarshalJSON(data, &retryRule, "", true, true); err == nil {
		u.RetryRule = &retryRule
		u.Type = RuleTypeRetryRule
		return nil
	}

	filterRule := FilterRule{}
	if err := utils.UnmarshalJSON(data, &filterRule, "", true, true); err == nil {
		u.FilterRule = &filterRule
		u.Type = RuleTypeFilterRule
		return nil
	}

	transformRule := TransformRule{}
	if err := utils.UnmarshalJSON(data, &transformRule, "", true, true); err == nil {
		u.TransformRule = &transformRule
		u.Type = RuleTypeTransformRule
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u Rule) MarshalJSON() ([]byte, error) {
	if u.RetryRule != nil {
		return utils.MarshalJSON(u.RetryRule, "", true)
	}

	if u.AlertRule != nil {
		return utils.MarshalJSON(u.AlertRule, "", true)
	}

	if u.FilterRule != nil {
		return utils.MarshalJSON(u.FilterRule, "", true)
	}

	if u.TransformRule != nil {
		return utils.MarshalJSON(u.TransformRule, "", true)
	}

	if u.DelayRule != nil {
		return utils.MarshalJSON(u.DelayRule, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}
