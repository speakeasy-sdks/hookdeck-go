// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/hookdeck-go/internal/utils"
	"time"
)

type RateLimitPeriod string

const (
	RateLimitPeriodLessThanNilGreaterThan RateLimitPeriod = "<nil>"
	RateLimitPeriodMinute                 RateLimitPeriod = "minute"
	RateLimitPeriodSecond                 RateLimitPeriod = "second"
)

func (e RateLimitPeriod) ToPointer() *RateLimitPeriod {
	return &e
}

func (e *RateLimitPeriod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "<nil>":
		fallthrough
	case "minute":
		fallthrough
	case "second":
		*e = RateLimitPeriod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RateLimitPeriod: %v", v)
	}
}

// ShopifyIntegrationConfigsSchemas - Decrypted Key/Value object of the associated configuration for that provider
type ShopifyIntegrationConfigsSchemas struct {
	APIKey           *string          `json:"api_key,omitempty"`
	APISecret        *string          `json:"api_secret,omitempty"`
	RateLimit        *float32         `json:"rate_limit,omitempty"`
	RateLimitPeriod  *RateLimitPeriod `json:"rate_limit_period,omitempty"`
	Shop             *string          `json:"shop,omitempty"`
	WebhookSecretKey string           `json:"webhook_secret_key"`
}

func (o *ShopifyIntegrationConfigsSchemas) GetAPIKey() *string {
	if o == nil {
		return nil
	}
	return o.APIKey
}

func (o *ShopifyIntegrationConfigsSchemas) GetAPISecret() *string {
	if o == nil {
		return nil
	}
	return o.APISecret
}

func (o *ShopifyIntegrationConfigsSchemas) GetRateLimit() *float32 {
	if o == nil {
		return nil
	}
	return o.RateLimit
}

func (o *ShopifyIntegrationConfigsSchemas) GetRateLimitPeriod() *RateLimitPeriod {
	if o == nil {
		return nil
	}
	return o.RateLimitPeriod
}

func (o *ShopifyIntegrationConfigsSchemas) GetShop() *string {
	if o == nil {
		return nil
	}
	return o.Shop
}

func (o *ShopifyIntegrationConfigsSchemas) GetWebhookSecretKey() string {
	if o == nil {
		return ""
	}
	return o.WebhookSecretKey
}

// BasicAuthIntegrationConfigsSchemas - Decrypted Key/Value object of the associated configuration for that provider
type BasicAuthIntegrationConfigsSchemas struct {
	Name     string `json:"name"`
	Password string `json:"password"`
}

func (o *BasicAuthIntegrationConfigsSchemas) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *BasicAuthIntegrationConfigsSchemas) GetPassword() string {
	if o == nil {
		return ""
	}
	return o.Password
}

// HandledHMACConfigsSchemas - Decrypted Key/Value object of the associated configuration for that provider
type HandledHMACConfigsSchemas struct {
	WebhookSecretKey string `json:"webhook_secret_key"`
}

func (o *HandledHMACConfigsSchemas) GetWebhookSecretKey() string {
	if o == nil {
		return ""
	}
	return o.WebhookSecretKey
}

// Schemas - Decrypted Key/Value object of the associated configuration for that provider
type Schemas struct {
	APIKey    string `json:"api_key"`
	HeaderKey string `json:"header_key"`
}

func (o *Schemas) GetAPIKey() string {
	if o == nil {
		return ""
	}
	return o.APIKey
}

func (o *Schemas) GetHeaderKey() string {
	if o == nil {
		return ""
	}
	return o.HeaderKey
}

type Encoding string

const (
	EncodingBase64 Encoding = "base64"
	EncodingHex    Encoding = "hex"
)

func (e Encoding) ToPointer() *Encoding {
	return &e
}

func (e *Encoding) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "base64":
		fallthrough
	case "hex":
		*e = Encoding(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Encoding: %v", v)
	}
}

// HMACIntegrationConfigsSchemas - Decrypted Key/Value object of the associated configuration for that provider
type HMACIntegrationConfigsSchemas struct {
	Algorithm        HMACAlgorithms `json:"algorithm"`
	Encoding         Encoding       `json:"encoding"`
	HeaderKey        string         `json:"header_key"`
	WebhookSecretKey string         `json:"webhook_secret_key"`
}

func (o *HMACIntegrationConfigsSchemas) GetAlgorithm() HMACAlgorithms {
	if o == nil {
		return HMACAlgorithms("")
	}
	return o.Algorithm
}

func (o *HMACIntegrationConfigsSchemas) GetEncoding() Encoding {
	if o == nil {
		return Encoding("")
	}
	return o.Encoding
}

func (o *HMACIntegrationConfigsSchemas) GetHeaderKey() string {
	if o == nil {
		return ""
	}
	return o.HeaderKey
}

func (o *HMACIntegrationConfigsSchemas) GetWebhookSecretKey() string {
	if o == nil {
		return ""
	}
	return o.WebhookSecretKey
}

// Integration1 - Decrypted Key/Value object of the associated configuration for that provider
type Integration1 struct {
}

type Integration struct {
	// Decrypted Key/Value object of the associated configuration for that provider
	Configs interface{} `json:"configs"`
	// Date the integration was created
	CreatedAt time.Time `json:"created_at"`
	// List of features to enable (see features list below)
	Features []IntegrationFeature `json:"features"`
	// ID of the integration
	ID string `json:"id"`
	// Label of the integration
	Label string `json:"label"`
	// The provider name
	Provider IntegrationProvider `json:"provider"`
	// List of source IDs the integration is attached to
	Sources []string `json:"sources"`
	// ID of the workspace
	TeamID string `json:"team_id"`
	// Date the integration was last updated
	UpdatedAt time.Time `json:"updated_at"`
}

func (i Integration) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *Integration) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Integration) GetConfigs() interface{} {
	if o == nil {
		return nil
	}
	return o.Configs
}

func (o *Integration) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *Integration) GetFeatures() []IntegrationFeature {
	if o == nil {
		return []IntegrationFeature{}
	}
	return o.Features
}

func (o *Integration) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Integration) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *Integration) GetProvider() IntegrationProvider {
	if o == nil {
		return IntegrationProvider("")
	}
	return o.Provider
}

func (o *Integration) GetSources() []string {
	if o == nil {
		return []string{}
	}
	return o.Sources
}

func (o *Integration) GetTeamID() string {
	if o == nil {
		return ""
	}
	return o.TeamID
}

func (o *Integration) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}
